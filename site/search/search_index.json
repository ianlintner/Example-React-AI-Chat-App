{
  "config": {
    "indexing": "full",
    "lang": ["en"],
    "min_search_length": 3,
    "prebuild_index": false,
    "separator": "[\\s\\-]+"
  },
  "docs": [
    {
      "location": "",
      "text": "Project Documentation \u00b6 Welcome to the project documentation. This site is structured for Backstage TechDocs using MkDocs. Quick Start \u00b6 Quickstart: getting-started/quickstart.md Setup: getting-started/setup.md Troubleshooting: getting-started/troubleshooting.md Table of Contents \u00b6 Getting Started Quickstart: getting-started/quickstart.md Setup: getting-started/setup.md Troubleshooting: getting-started/troubleshooting.md Architecture System Overview: architecture/system-overview.md Architecture Guide: architecture/architecture.md Components Agents: architecture/components/agents.md Backend: architecture/components/backend.md Frontend: architecture/components/frontend.md Message Queue: architecture/components/message-queue.md RAG System: architecture/components/rag-system.md Validation System: architecture/components/validation-system.md Operations CI/CD: operations/ci-cd.md Observability: operations/observability.md Prometheus & Grafana: operations/prometheus-grafana.md Tracing: operations/tracing.md Reference API Reference: reference/api-reference.md Code Quality: reference/code-quality.md Docker Setup: reference/docker-setup.md Test Bench: reference/test-bench.md Test Bench OpenAPI: reference/test-bench-openapi.yaml YouTube Embedding: reference/youtube-embedding.md Examples External App: examples/external-app.md Additional Resources System Summary: system-summary.md Backend (legacy): backend.md API Reference (legacy): api-reference.md Architecture (root doc): architecture.md Docs README: README.md IA Proposal: IA-PROPOSAL.md Consolidation Plan: CONSOLIDATION-PLAN.md Prometheus Grafana Migration: prometheus-grafana-migration.md Docs Inventory (CSV): docs-inventory.csv How to View These Docs \u00b6 Local MkDocs preview: Install MkDocs: pip install mkdocs Serve locally from repo root: mkdocs serve Open http://127.0.0.1:8000 Backstage TechDocs: Ensure your Backstage instance is configured for TechDocs. Register the component using catalog-info.yaml at the repo root (see below). Open the registered entity in Backstage and navigate to Docs. Contributing \u00b6 Follow style and structure consistent with the sections above. Add new pages under the relevant folder (getting-started, architecture, operations, reference, examples). Update mkdocs.yml to include new pages in the navigation if needed.",
      "title": "Home"
    },
    {
      "location": "#project-documentation",
      "text": "Welcome to the project documentation. This site is structured for Backstage TechDocs using MkDocs.",
      "title": "Project Documentation"
    },
    {
      "location": "#quick-start",
      "text": "Quickstart: getting-started/quickstart.md Setup: getting-started/setup.md Troubleshooting: getting-started/troubleshooting.md",
      "title": "Quick Start"
    },
    {
      "location": "#table-of-contents",
      "text": "Getting Started Quickstart: getting-started/quickstart.md Setup: getting-started/setup.md Troubleshooting: getting-started/troubleshooting.md Architecture System Overview: architecture/system-overview.md Architecture Guide: architecture/architecture.md Components Agents: architecture/components/agents.md Backend: architecture/components/backend.md Frontend: architecture/components/frontend.md Message Queue: architecture/components/message-queue.md RAG System: architecture/components/rag-system.md Validation System: architecture/components/validation-system.md Operations CI/CD: operations/ci-cd.md Observability: operations/observability.md Prometheus & Grafana: operations/prometheus-grafana.md Tracing: operations/tracing.md Reference API Reference: reference/api-reference.md Code Quality: reference/code-quality.md Docker Setup: reference/docker-setup.md Test Bench: reference/test-bench.md Test Bench OpenAPI: reference/test-bench-openapi.yaml YouTube Embedding: reference/youtube-embedding.md Examples External App: examples/external-app.md Additional Resources System Summary: system-summary.md Backend (legacy): backend.md API Reference (legacy): api-reference.md Architecture (root doc): architecture.md Docs README: README.md IA Proposal: IA-PROPOSAL.md Consolidation Plan: CONSOLIDATION-PLAN.md Prometheus Grafana Migration: prometheus-grafana-migration.md Docs Inventory (CSV): docs-inventory.csv",
      "title": "Table of Contents"
    },
    {
      "location": "#how-to-view-these-docs",
      "text": "Local MkDocs preview: Install MkDocs: pip install mkdocs Serve locally from repo root: mkdocs serve Open http://127.0.0.1:8000 Backstage TechDocs: Ensure your Backstage instance is configured for TechDocs. Register the component using catalog-info.yaml at the repo root (see below). Open the registered entity in Backstage and navigate to Docs.",
      "title": "How to View These Docs"
    },
    {
      "location": "#contributing",
      "text": "Follow style and structure consistent with the sections above. Add new pages under the relevant folder (getting-started, architecture, operations, reference, examples). Update mkdocs.yml to include new pages in the navigation if needed.",
      "title": "Contributing"
    },
    {
      "location": "architecture/architecture/",
      "text": "Demo Portfolio Architecture \u2014 AI + Modern Web Engineering Patterns \u00b6 This guide supports a demo portfolio project. It focuses on patterns, tradeoffs, and implementation details that matter in AI and modern web app engineering. Production hardening and full productization are out of scope. Table of Contents \u00b6 Demo Portfoloio Table of Contents System Overview Key Architectural Principles High-Level Architecture Component Architecture Frontend Architecture (React Native) Backend Architecture Data Flow Diagrams Message Processing Flow Agent Selection Flow Goal-Seeking System Flow Agent System Architecture Agent Hierarchy RAG System Architecture Database Design Data Models Storage Architecture API Architecture REST API Structure WebSocket Event Architecture Security Architecture Security Layers Deployment Architecture Container Architecture Docker Deployment Monitoring Observability Stack Key Performance Indicators (KPIs) System Overview \u00b6 This demo portfolio implements a mobile-first, real-time AI chat system to showcase multi-agent orchestration, goal-seeking behavior, and enterprise-style observability. It demonstrates patterns and tradeoffs rather than delivering a complete product, including intelligent customer service, technical support, and entertainment via specialized agents. Key Architectural Principles \u00b6 Mobile-First: Native React Native/Expo application Microservices-Ready: Modular backend architecture Agent-Based: 16 specialized AI agents for different use cases Real-Time: Socket.io for instant communication Observable: Comprehensive monitoring and tracing Scalable: Horizontal scaling capabilities Type-Safe: Full TypeScript implementation High-Level Architecture \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 graph TB subgraph \"Client Layer\" Mobile[\ud83d\udcf1 React Native App<br/>Expo/Metro] Web[\ud83c\udf10 Web Interface<br/>Optional] end subgraph \"API Gateway Layer\" Gateway[\ud83d\udeaa API Gateway<br/>Express.js] Socket[\ud83d\udd0c Socket.io Server<br/>Real-time Communication] end subgraph \"Business Logic Layer\" AgentRouter[\ud83e\udd16 Agent Router<br/>Message Classification] GoalSeeker[\ud83c\udfaf Goal-Seeking System<br/>Proactive Actions] Validator[\u2705 Response Validator<br/>Quality Control] end subgraph \"Agent Layer\" TechAgent[\ud83d\udc68\u200d\ud83d\udcbb Technical Agent] EntertainmentAgent[\ud83c\udfad Entertainment Agents] SupportAgent[\ud83d\udcde Support Agents] CustomerAgent[\ud83c\udfa7 Customer Service] HoldAgent[\u23f3 Hold Management] end subgraph \"Data Layer\" Memory[\ud83d\udcbe Memory Storage<br/>Conversations & State] RAG[\ud83d\udcda RAG Content DB<br/>Curated Entertainment] Metrics[\ud83d\udcca Metrics Storage<br/>Performance Data] end subgraph \"External Services\" OpenAI[\ud83e\udde0 OpenAI API<br/>GPT Models] Monitoring[\ud83d\udcc8 Observability<br/>Jaeger/Prometheus] end Mobile --> Gateway Web --> Gateway Mobile <--> Socket Gateway --> AgentRouter Socket --> AgentRouter AgentRouter --> GoalSeeker AgentRouter --> Validator GoalSeeker --> TechAgent GoalSeeker --> EntertainmentAgent GoalSeeker --> SupportAgent GoalSeeker --> CustomerAgent GoalSeeker --> HoldAgent TechAgent --> Memory EntertainmentAgent --> RAG SupportAgent --> Memory CustomerAgent --> Memory HoldAgent --> Memory TechAgent --> OpenAI EntertainmentAgent --> OpenAI Validator --> Metrics GoalSeeker --> Monitoring Socket --> Monitoring classDef client fill:#e1f5fe classDef api fill:#f3e5f5 classDef logic fill:#e8f5e8 classDef agents fill:#fff3e0 classDef data fill:#fce4ec classDef external fill:#f1f8e9 class Mobile,Web client class Gateway,Socket api class AgentRouter,GoalSeeker,Validator logic class TechAgent,EntertainmentAgent,SupportAgent,CustomerAgent,HoldAgent agents class Memory,RAG,Metrics data class OpenAI,Monitoring external Component Architecture \u00b6 Frontend Architecture (React Native) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 graph TB subgraph \"React Native App Structure\" App[\ud83d\udcf1 App.tsx<br/>Root Component] Router[\ud83e\udded Expo Router<br/>Navigation] subgraph \"Screens\" ChatScreen[\ud83d\udcac Chat Screen<br/>Main Interface] DashboardScreen[\ud83d\udcca Dashboard Screen<br/>Validation Metrics] ExploreScreen[\ud83d\udd0d Explore Screen<br/>Agent Selection] end subgraph \"Components\" MessageInput[\u2328\ufe0f Message Input<br/>Text Input & Send] ChatBubble[\ud83d\udcad Message Bubble<br/>User/Agent Messages] AgentStatus[\ud83e\udd16 Agent Status Bar<br/>Current Agent Display] ValidationDash[\ud83d\udcc8 Validation Dashboard<br/>Quality Metrics] end subgraph \"Services\" SocketService[\ud83d\udd0c Socket Service<br/>Real-time Connection] ApiService[\ud83c\udf10 API Service<br/>HTTP Requests] StateService[\ud83d\uddc2\ufe0f State Management<br/>Conversation State] end subgraph \"Types & Utils\" Types[\ud83d\udcdd TypeScript Types<br/>Shared Interfaces] Constants[\u2699\ufe0f Constants<br/>Configuration] Hooks[\ud83c\udfa3 Custom Hooks<br/>Reusable Logic] end end App --> Router Router --> ChatScreen Router --> DashboardScreen Router --> ExploreScreen ChatScreen --> MessageInput ChatScreen --> ChatBubble ChatScreen --> AgentStatus DashboardScreen --> ValidationDash MessageInput --> SocketService ChatBubble --> StateService AgentStatus --> StateService SocketService --> ApiService StateService --> Types Components --> Hooks Services --> Constants classDef screen fill:#e3f2fd classDef component fill:#f1f8e9 classDef service fill:#fff8e1 classDef util fill:#fce4ec class ChatScreen,DashboardScreen,ExploreScreen screen class MessageInput,ChatBubble,AgentStatus,ValidationDash component class SocketService,ApiService,StateService service class Types,Constants,Hooks util Backend Architecture \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 graph TB subgraph \"Backend Server Architecture\" Index[\ud83d\ude80 index.ts<br/>Server Entry Point] subgraph \"Routes Layer\" ChatRoute[\ud83d\udcac Chat Routes<br/>/api/chat] ConversationRoute[\ud83d\uddc2\ufe0f Conversation Routes<br/>/api/conversations] ValidationRoute[\u2705 Validation Routes<br/>/api/validation] TestBenchRoute[\ud83e\uddea Test Bench Routes<br/>/api/test-bench] SwaggerRoute[\ud83d\udcd6 API Docs<br/>/api/docs] end subgraph \"Agent System\" AgentService[\ud83e\udd16 Agent Service<br/>Agent Management] Classifier[\ud83d\udd0d Message Classifier<br/>Intent Recognition] GoalSeeker[\ud83c\udfaf Goal-Seeking System<br/>Proactive Behavior] ConversationMgr[\ud83d\udcac Conversation Manager<br/>Context Management] end subgraph \"Specialized Services\" RAGService[\ud83d\udcda RAG Service<br/>Content Retrieval] DNDService[\ud83c\udfb2 D&D Service<br/>RPG Mechanics] JokeLearning[\ud83d\ude04 Joke Learning<br/>Humor Adaptation] ResponseValidator[\u2705 Response Validator<br/>Quality Control] end subgraph \"Infrastructure\" SocketHandler[\ud83d\udd0c Socket Handlers<br/>WebSocket Events] MemoryStorage[\ud83d\udcbe Memory Storage<br/>Data Persistence] Prometheus[\ud83d\udcca Prometheus Metrics<br/>Performance Monitoring] Tracer[\ud83d\udd0d OpenTelemetry<br/>Distributed Tracing] end end Index --> ChatRoute Index --> ConversationRoute Index --> ValidationRoute Index --> TestBenchRoute Index --> SwaggerRoute Index --> SocketHandler ChatRoute --> AgentService ConversationRoute --> ConversationMgr ValidationRoute --> ResponseValidator AgentService --> Classifier AgentService --> GoalSeeker Classifier --> RAGService Classifier --> DNDService Classifier --> JokeLearning GoalSeeker --> ConversationMgr ConversationMgr --> MemoryStorage SocketHandler --> AgentService SocketHandler --> ResponseValidator ResponseValidator --> Prometheus AgentService --> Tracer GoalSeeker --> Tracer classDef route fill:#e8eaf6 classDef agent fill:#e0f2f1 classDef service fill:#fff3e0 classDef infra fill:#fce4ec class ChatRoute,ConversationRoute,ValidationRoute,TestBenchRoute,SwaggerRoute route class AgentService,Classifier,GoalSeeker,ConversationMgr agent class RAGService,DNDService,JokeLearning,ResponseValidator service class SocketHandler,MemoryStorage,Prometheus,Tracer infra Data Flow Diagrams \u00b6 Message Processing Flow \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 sequenceDiagram participant U as User participant F as Frontend participant S as Socket.io participant C as Classifier participant G as Goal Seeker participant A as Agent participant V as Validator participant O as OpenAI U->>F: Types message F->>S: emit('message', data) S->>C: Classify message intent C->>G: Update user context G->>A: Route to appropriate agent A->>O: Generate response (if needed) O->>A: AI response A->>V: Validate response V->>S: Validated response S->>F: emit('response', data) F->>U: Display response Note over G: Update goals & context G->>A: Trigger proactive actions (if needed) A->>S: Proactive message S->>F: emit('proactive', data) F->>U: Display proactive content Agent Selection Flow \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 flowchart TD Start([User Message Received]) Classify{Message Classification} Technical[\ud83d\udd27 Technical Keywords?] Entertainment[\ud83c\udfad Entertainment Request?] Support[\ud83d\udcde Support Keywords?] Hold[\u23f3 Hold State?] General[\ud83d\udcac General/Unknown] TechAgent[\ud83d\udc68\u200d\ud83d\udcbb Technical Agent] JokeAgent[\ud83d\ude04 Joke Master] TriviaAgent[\ud83e\udde0 Trivia Master] GifAgent[\ud83c\udfac GIF Master] StoryAgent[\ud83d\udcda Story Teller] RiddleAgent[\ud83e\udde9 Riddle Master] GameAgent[\ud83c\udfae Game Host] AccountAgent[\ud83d\udc64 Account Support] BillingAgent[\ud83d\udcb3 Billing Support] WebsiteAgent[\ud83c\udf10 Website Support] OperatorAgent[\ud83c\udfa7 Customer Service] HoldAgent[\ud83d\udcde Hold Agent] GeneralAgent[\ud83e\udd16 General Router] Response([Generate Response]) Start --> Classify Classify --> Technical Classify --> Entertainment Classify --> Support Classify --> Hold Classify --> General Technical --> TechAgent Entertainment --> JokeAgent Entertainment --> TriviaAgent Entertainment --> GifAgent Entertainment --> StoryAgent Entertainment --> RiddleAgent Entertainment --> GameAgent Support --> AccountAgent Support --> BillingAgent Support --> WebsiteAgent Support --> OperatorAgent Hold --> HoldAgent General --> GeneralAgent TechAgent --> Response JokeAgent --> Response TriviaAgent --> Response GifAgent --> Response StoryAgent --> Response RiddleAgent --> Response GameAgent --> Response AccountAgent --> Response BillingAgent --> Response WebsiteAgent --> Response OperatorAgent --> Response HoldAgent --> Response GeneralAgent --> Response classDef technical fill:#e3f2fd classDef entertainment fill:#f1f8e9 classDef support fill:#fff3e0 classDef hold fill:#fce4ec classDef general fill:#f3e5f5 class TechAgent technical class JokeAgent,TriviaAgent,GifAgent,StoryAgent,RiddleAgent,GameAgent entertainment class AccountAgent,BillingAgent,WebsiteAgent,OperatorAgent support class HoldAgent hold class GeneralAgent general Goal-Seeking System Flow \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 flowchart TD UserConnect([User Connects]) InitState[Initialize User State<br/>- on_hold: true<br/>- engagement: neutral<br/>- preferences: unknown] MonitorLoop{Monitor User Activity} Engaged[User Active/Engaged] Idle[User Idle > 30s] Frustrated[Negative Signals] UpdateGoals[Update Goal Priorities<br/>- Entertainment Goal<br/>- Support Goal<br/>- Satisfaction Goal] SelectAction{Select Proactive Action} OfferJoke[\ud83c\udfad Offer Humor] ShareTrivia[\ud83e\udde0 Share Facts] ShowGif[\ud83c\udfac Visual Entertainment] PlayGame[\ud83c\udfae Interactive Games] CheckStatus[\ud83d\udcde Status Update] ExecuteAction[Execute Proactive Action] MeasureResponse{Measure User Response} Positive[Positive Response<br/>- Engagement \u2191<br/>- Satisfaction \u2191] Negative[Negative Response<br/>- Try Different Approach] NoResponse[No Response<br/>- Adjust Timing] LearnPrefs[Update User Preferences<br/>- Content Type<br/>- Timing<br/>- Frequency] UserConnect --> InitState InitState --> MonitorLoop MonitorLoop --> Engaged MonitorLoop --> Idle MonitorLoop --> Frustrated Engaged --> UpdateGoals Idle --> UpdateGoals Frustrated --> UpdateGoals UpdateGoals --> SelectAction SelectAction --> OfferJoke SelectAction --> ShareTrivia SelectAction --> ShowGif SelectAction --> PlayGame SelectAction --> CheckStatus OfferJoke --> ExecuteAction ShareTrivia --> ExecuteAction ShowGif --> ExecuteAction PlayGame --> ExecuteAction CheckStatus --> ExecuteAction ExecuteAction --> MeasureResponse MeasureResponse --> Positive MeasureResponse --> Negative MeasureResponse --> NoResponse Positive --> LearnPrefs Negative --> LearnPrefs NoResponse --> LearnPrefs LearnPrefs --> MonitorLoop classDef state fill:#e1f5fe classDef action fill:#e8f5e8 classDef response fill:#fff3e0 classDef learning fill:#fce4ec class InitState,UpdateGoals state class OfferJoke,ShareTrivia,ShowGif,PlayGame,CheckStatus action class Positive,Negative,NoResponse response class LearnPrefs learning Agent System Architecture \u00b6 Agent Hierarchy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 graph TB subgraph \"Agent Classification System\" Router[\ud83e\udd16 Agent Router<br/>Message Classification & Routing] subgraph \"Entertainment Agents\" Joke[\ud83c\udfad Adaptive Joke Master<br/>Humor with Learning] Trivia[\ud83e\udde0 Trivia Master<br/>Educational Facts] Gif[\ud83c\udfac GIF Master<br/>Visual Entertainment] Story[\ud83d\udcda Story Teller<br/>Interactive Narratives] Riddle[\ud83e\udde9 Riddle Master<br/>Brain Teasers] Quote[\ud83d\udcab Quote Master<br/>Inspirational Content] Game[\ud83c\udfae Game Host<br/>Interactive Games] Music[\ud83c\udfb5 Music Guru<br/>Music Recommendations] YouTube[\ud83d\udcfa YouTube Guru<br/>Video Curation] DND[\ud83c\udfb2 D&D Master<br/>RPG Adventures] end subgraph \"Support Agents\" Account[\ud83d\udc64 Account Support<br/>User Account Issues] Billing[\ud83d\udcb3 Billing Support<br/>Payment & Subscriptions] Website[\ud83c\udf10 Website Issues<br/>Technical Web Support] Operator[\ud83c\udfa7 Customer Service<br/>General Support Router] end subgraph \"Specialized Agents\" Hold[\ud83d\udcde Hold Agent<br/>Wait Management] General[\ud83d\udcac General Router<br/>Fallback & Routing] end end Router --> Joke Router --> Trivia Router --> Gif Router --> Story Router --> Riddle Router --> Quote Router --> Game Router --> Music Router --> YouTube Router --> DND Router --> Account Router --> Billing Router --> Website Router --> Operator Router --> Hold Router --> General classDef entertainment fill:#e8f5e8 classDef support fill:#fff3e0 classDef specialized fill:#e3f2fd classDef router fill:#fce4ec class Joke,Trivia,Gif,Story,Riddle,Quote,Game,Music,YouTube,DND entertainment class Account,Billing,Website,Operator support class Hold,General specialized class Router router RAG System Architecture \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 graph TB subgraph \"RAG (Retrieval-Augmented Generation) System\" Query[User Query/Request] ContentDB[(\ud83d\udcda Curated Content Database<br/>\u2022 10 Premium Jokes (4-5\u2b50)<br/>\u2022 10 Fascinating Facts<br/>\u2022 10 Entertaining GIFs<br/>\u2022 Quality Rated Content)] Retriever[\ud83d\udd0d Content Retriever<br/>Semantic Search & Matching] Ranker[\ud83d\udcca Content Ranker<br/>\u2022 Relevance Scoring<br/>\u2022 Quality Rating<br/>\u2022 User Preference Matching<br/>\u2022 Context Appropriateness] Generator[\ud83e\udd16 Response Generator<br/>Enhanced AI Response with Retrieved Content] Response[\ud83d\udce4 Enhanced Response<br/>High-Quality + AI Generated] end Query --> Retriever ContentDB --> Retriever Retriever --> Ranker Ranker --> Generator Generator --> Response subgraph \"Content Categories\" Jokes[\ud83d\ude04 Premium Jokes<br/>\u2022 Dad Jokes<br/>\u2022 Wordplay<br/>\u2022 Tech Humor<br/>\u2022 Clean Comedy] Trivia[\ud83e\udde0 Fascinating Facts<br/>\u2022 Science<br/>\u2022 History<br/>\u2022 Nature<br/>\u2022 Technology] Gifs[\ud83c\udfac Curated GIFs<br/>\u2022 Funny Animals<br/>\u2022 Reactions<br/>\u2022 Celebrations<br/>\u2022 Universal Appeal] end ContentDB --> Jokes ContentDB --> Trivia ContentDB --> Gifs classDef content fill:#e8f5e8 classDef process fill:#e3f2fd classDef data fill:#fff3e0 class Jokes,Trivia,Gifs content class Retriever,Ranker,Generator process class ContentDB,Query,Response data Database Design \u00b6 Data Models \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 erDiagram User ||--o{ Conversation : has User ||--o{ UserState : has User ||--o{ UserPreferences : has Conversation ||--o{ Message : contains Conversation ||--o{ ConversationMeta : has Message ||--o{ MessageValidation : validated_by Message }o--|| Agent : generated_by Agent ||--o{ AgentMetrics : tracks Agent ||--o{ AgentConfig : configured_by RAGContent ||--o{ ContentRating : rated RAGContent }o--o{ Message : enhances User { string id PK string username string email datetime createdAt datetime lastActive string status } UserState { string userId PK string currentState json goals float engagementLevel json preferences datetime lastUpdated } Conversation { string id PK string userId FK string title json participants datetime createdAt datetime updatedAt string status } Message { string id PK string conversationId FK string agentId FK string role text content json metadata datetime timestamp boolean isProactive } Agent { string id PK string name string type text systemPrompt string model float temperature int maxTokens json capabilities } MessageValidation { string messageId PK float qualityScore float appropriatenessScore float relevanceScore json issues datetime validatedAt string validatorVersion } RAGContent { string id PK string type string category text content json metadata float qualityRating json tags datetime createdAt } AgentMetrics { string agentId PK string date PK int messagesHandled float avgResponseTime float avgQualityScore float userSatisfaction json performanceData } Storage Architecture \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 graph TB subgraph \"Storage Layer Architecture\" subgraph \"Primary Storage\" Memory[\ud83d\udcbe Memory Storage<br/>\u2022 Active Conversations<br/>\u2022 User Sessions<br/>\u2022 Real-time State] end subgraph \"Content Storage\" RAGStore[\ud83d\udcda RAG Content Store<br/>\u2022 Curated Jokes<br/>\u2022 Trivia Facts<br/>\u2022 GIF Database<br/>\u2022 Quality Ratings] end subgraph \"Analytics Storage\" Metrics[\ud83d\udcca Metrics Store<br/>\u2022 Agent Performance<br/>\u2022 User Analytics<br/>\u2022 Validation Scores<br/>\u2022 System Health] end subgraph \"Future Storage Options\" MongoDB[(\ud83c\udf43 MongoDB<br/>Document Store<br/>\u2022 Conversations<br/>\u2022 User Profiles)] Redis[(\ud83d\udd34 Redis<br/>Cache Layer<br/>\u2022 Sessions<br/>\u2022 Quick Access)] Postgres[(\ud83d\udc18 PostgreSQL<br/>Relational Data<br/>\u2022 User Management<br/>\u2022 Analytics)] Elasticsearch[(\ud83d\udd0d Elasticsearch<br/>Search Engine<br/>\u2022 Content Search<br/>\u2022 Log Analysis)] end end Memory --> RAGStore Memory --> Metrics Memory -.->|Migration Path| MongoDB RAGStore -.->|Caching| Redis Metrics -.->|Analytics| Postgres RAGStore -.->|Search| Elasticsearch classDef current fill:#e8f5e8 classDef future fill:#e3f2fd class Memory,RAGStore,Metrics current class MongoDB,Redis,Postgres,Elasticsearch future API Architecture \u00b6 REST API Structure \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 graph TB subgraph \"API Layer Structure\" Client[\ud83d\udcf1 Client Applications] subgraph \"API Gateway\" Gateway[\ud83d\udeaa Express Gateway<br/>\u2022 Route Management<br/>\u2022 Middleware Stack<br/>\u2022 Error Handling] end subgraph \"Route Handlers\" ChatAPI[\ud83d\udcac Chat API<br/>/api/chat<br/>\u2022 Message Sending<br/>\u2022 Streaming Responses] ConversationAPI[\ud83d\uddc2\ufe0f Conversation API<br/>/api/conversations<br/>\u2022 CRUD Operations<br/>\u2022 History Management] ValidationAPI[\u2705 Validation API<br/>/api/validation<br/>\u2022 Quality Metrics<br/>\u2022 Dashboard Data] AgentAPI[\ud83e\udd16 Agent API<br/>/api/agents<br/>\u2022 Agent Status<br/>\u2022 Configuration] TestBenchAPI[\ud83e\uddea Test Bench API<br/>/api/test-bench<br/>\u2022 Agent Testing<br/>\u2022 Performance Metrics] DocsAPI[\ud83d\udcd6 Documentation API<br/>/api/docs<br/>\u2022 OpenAPI Spec<br/>\u2022 Interactive Docs] end subgraph \"WebSocket Layer\" SocketIO[\ud83d\udd0c Socket.io Server<br/>\u2022 Real-time Messages<br/>\u2022 Event Broadcasting<br/>\u2022 Connection Management] end subgraph \"Middleware Stack\" Auth[\ud83d\udd10 Authentication<br/>JWT Validation] CORS[\ud83c\udf10 CORS Handler<br/>Cross-Origin Requests] RateLimit[\u26a1 Rate Limiting<br/>API Protection] Logging[\ud83d\udcdd Request Logging<br/>Audit Trail] ErrorHandler[\u274c Error Handler<br/>Standardized Responses] end end Client --> Gateway Gateway --> ChatAPI Gateway --> ConversationAPI Gateway --> ValidationAPI Gateway --> AgentAPI Gateway --> TestBenchAPI Gateway --> DocsAPI Client <--> SocketIO Gateway --> Auth Gateway --> CORS Gateway --> RateLimit Gateway --> Logging Gateway --> ErrorHandler classDef api fill:#e3f2fd classDef middleware fill:#fff3e0 classDef websocket fill:#e8f5e8 class ChatAPI,ConversationAPI,ValidationAPI,AgentAPI,TestBenchAPI,DocsAPI api class Auth,CORS,RateLimit,Logging,ErrorHandler middleware class SocketIO websocket WebSocket Event Architecture \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 sequenceDiagram participant C as Client participant S as Socket.io Server participant A as Agent System participant G as Goal Seeker participant V as Validator Note over C,V: Connection & Setup C->>S: connect() S->>C: connection_established C->>S: join_conversation(conversationId) S->>G: initialize_user_state(userId) G->>C: user_state_initialized Note over C,V: Message Flow C->>S: send_message(message, conversationId) S->>A: process_message(message) A->>S: message_processed(response) S->>V: validate_response(response) V->>S: response_validated(validatedResponse) S->>C: message_response(validatedResponse) Note over C,V: Proactive Actions G->>S: trigger_proactive_action(action) S->>A: execute_proactive_action(action) A->>S: proactive_response(response) S->>C: proactive_message(response) Note over C,V: Status Updates A->>S: agent_status_changed(agentId, status) S->>C: agent_status_update(agentId, status) G->>S: user_state_changed(userId, state) S->>C: user_state_update(state) Note over C,V: Error Handling S->>C: error(errorDetails) C->>S: acknowledge_error() Note over C,V: Disconnection C->>S: disconnect() S->>G: cleanup_user_state(userId) Security Architecture \u00b6 Security Layers \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 graph TB subgraph \"Security Architecture\" subgraph \"Client Security\" ClientAuth[\ud83d\udd10 Client Authentication<br/>\u2022 JWT Tokens<br/>\u2022 Biometric/PIN<br/>\u2022 Secure Storage] ClientValidation[\u2705 Input Validation<br/>\u2022 XSS Prevention<br/>\u2022 Injection Protection<br/>\u2022 Content Filtering] end subgraph \"Transport Security\" HTTPS[\ud83d\udd12 HTTPS/TLS<br/>\u2022 Certificate Pinning<br/>\u2022 Encrypted Transport<br/>\u2022 Secure WebSockets] end subgraph \"API Security\" APIAuth[\ud83d\udee1\ufe0f API Authentication<br/>\u2022 JWT Validation<br/>\u2022 Token Refresh<br/>\u2022 Session Management] RateLimiting[\u26a1 Rate Limiting<br/>\u2022 DDoS Protection<br/>\u2022 Abuse Prevention<br/>\u2022 Fair Usage] InputSanitization[\ud83e\uddfd Input Sanitization<br/>\u2022 SQL Injection Prevention<br/>\u2022 Command Injection<br/>\u2022 Data Validation] end subgraph \"Data Security\" Encryption[\ud83d\udd10 Data Encryption<br/>\u2022 At-Rest Encryption<br/>\u2022 Field-Level Security<br/>\u2022 Key Management] Privacy[\ud83d\udd76\ufe0f Privacy Controls<br/>\u2022 Data Anonymization<br/>\u2022 Consent Management<br/>\u2022 GDPR Compliance] end subgraph \"Agent Security\" ResponseFiltering[\ud83d\udeab Response Filtering<br/>\u2022 Content Safety<br/>\u2022 Harmful Content Detection<br/>\u2022 Bias Prevention] PromptInjection[\u26a0\ufe0f Prompt Injection Protection<br/>\u2022 Input Analysis<br/>\u2022 Malicious Pattern Detection<br/>\u2022 Safe AI Responses] end end ClientAuth --> HTTPS ClientValidation --> HTTPS HTTPS --> APIAuth HTTPS --> RateLimiting HTTPS --> InputSanitization APIAuth --> Encryption RateLimiting --> Privacy InputSanitization --> ResponseFiltering Encryption --> PromptInjection Privacy --> PromptInjection ResponseFiltering --> PromptInjection classDef client fill:#e3f2fd classDef transport fill:#e8f5e8 classDef api fill:#fff3e0 classDef data fill:#fce4ec classDef agent fill:#f1f8e9 class ClientAuth,ClientValidation client class HTTPS transport class APIAuth,RateLimiting,InputSanitization api class Encryption,Privacy data class ResponseFiltering,PromptInjection agent Deployment Architecture \u00b6 Container Architecture \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 graph TB subgraph \"Production Deployment\" subgraph \"Load Balancer Layer\" LB[\u2696\ufe0f Load Balancer<br/>NGINX/HAProxy<br/>SSL Termination] end subgraph \"Application Layer\" App1[\ud83d\ude80 Backend Instance 1<br/>Node.js + Express] App2[\ud83d\ude80 Backend Instance 2<br/>Node.js + Express] App3[\ud83d\ude80 Backend Instance 3<br/>Node.js + Express] end subgraph \"Mobile Distribution\" AppStore[\ud83d\udcf1 iOS App Store<br/>Native iOS App] PlayStore[\ud83e\udd16 Google Play Store<br/>Native Android App] Expo[\ud83d\udcf1 Expo Go<br/>Development Testing] end subgraph \"Data Layer\" MongoDB[(\ud83c\udf43 MongoDB Cluster<br/>Primary + Replicas)] Redis[(\ud83d\udd34 Redis Cluster<br/>Cache + Sessions)] end subgraph \"Monitoring Stack\" Prometheus[\ud83d\udcca Prometheus<br/>Metrics Collection] Grafana[\ud83d\udcc8 Grafana<br/>Visualization] Jaeger[\ud83d\udd0d Jaeger<br/>Distributed Tracing] AlertManager[\ud83d\udea8 AlertManager<br/>Alert Routing] end subgraph \"External Services\" OpenAIAPI[\ud83e\udde0 OpenAI API<br/>GPT Models] CDN[\ud83c\udf10 CDN<br/>Static Assets] end end LB --> App1 LB --> App2 LB --> App3 App1 --> MongoDB App2 --> MongoDB App3 --> MongoDB App1 --> Redis App2 --> Redis App3 --> Redis App1 --> OpenAIAPI App2 --> OpenAIAPI App3 --> OpenAIAPI AppStore --> LB PlayStore --> LB Expo --> LB App1 --> Prometheus App2 --> Prometheus App3 --> Prometheus Prometheus --> Grafana Prometheus --> AlertManager App1 --> Jaeger App2 --> Jaeger App3 --> Jaeger classDef lb fill:#e3f2fd classDef app fill:#e8f5e8 classDef mobile fill:#fff3e0 classDef data fill:#fce4ec classDef monitoring fill:#f1f8e9 classDef external fill:#f3e5f5 class LB lb class App1,App2,App3 app class AppStore,PlayStore,Expo mobile class MongoDB,Redis data class Prometheus,Grafana,Jaeger,AlertManager monitoring class OpenAIAPI,CDN external Docker Deployment \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 graph TB subgraph \"Docker Compose Stack\" subgraph \"Application Services\" BackendContainer[\ud83d\udc33 Backend Container<br/>\u2022 Node.js App<br/>\u2022 Health Checks<br/>\u2022 Auto-restart] RedisContainer[\ud83d\udc33 Redis Container<br/>\u2022 Session Storage<br/>\u2022 Cache Layer<br/>\u2022 Persistence] end subgraph \"Monitoring Services\" PrometheusContainer[\ud83d\udc33 Prometheus Container<br/>\u2022 Metrics Collection<br/>\u2022 Data Retention<br/>\u2022 Alert Rules] GrafanaContainer[\ud83d\udc33 Grafana Container<br/>\u2022 Dashboards<br/>\u2022 Visualizations<br/>\u2022 User Management] JaegerContainer[\ud83d\udc33 Jaeger Container<br/>\u2022 Trace Collection<br/>\u2022 UI Interface<br/>\u2022 Data Storage] end subgraph \"Infrastructure Services\" NGINXContainer[\ud83d\udc33 NGINX Container<br/>\u2022 Reverse Proxy<br/>\u2022 SSL Termination<br/>\u2022 Load Balancing] OtelContainer[\ud83d\udc33 OTEL Collector<br/>\u2022 Trace Processing<br/>\u2022 Metrics Pipeline<br/>\u2022 Export Configuration] end subgraph \"Data Volumes\" PrometheusData[(\ud83d\udcca Prometheus Data<br/>Time Series Storage)] GrafanaData[(\ud83d\udcc8 Grafana Data<br/>Dashboards & Config)] RedisData[(\ud83d\udd34 Redis Data<br/>Cache Persistence)] end end NGINXContainer --> BackendContainer BackendContainer --> RedisContainer BackendContainer --> OtelContainer OtelContainer --> PrometheusContainer OtelContainer --> JaegerContainer PrometheusContainer --> GrafanaContainer PrometheusContainer --> PrometheusData GrafanaContainer --> GrafanaData RedisContainer --> RedisData classDef app fill:#e8f5e8 classDef monitoring fill:#fff3e0 classDef infra fill:#e3f2fd classDef data fill:#fce4ec class BackendContainer,RedisContainer app class PrometheusContainer,GrafanaContainer,JaegerContainer monitoring class NGINXContainer,OtelContainer infra class PrometheusData,GrafanaData,RedisData data Monitoring & Observability \u00b6 Observability Stack \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 graph TB subgraph \"Three Pillars of Observability\" subgraph \"Metrics\" AppMetrics[\ud83d\udcca Application Metrics<br/>\u2022 Response Times<br/>\u2022 Error Rates<br/>\u2022 Throughput<br/>\u2022 Resource Usage] AgentMetrics[\ud83e\udd16 Agent Metrics<br/>\u2022 Agent Selection<br/>\u2022 Response Quality<br/>\u2022 User Satisfaction<br/>\u2022 Goal Achievement] InfraMetrics[\ud83d\udda5\ufe0f Infrastructure Metrics<br/>\u2022 CPU/Memory Usage<br/>\u2022 Network I/O<br/>\u2022 Disk Usage<br/>\u2022 Container Health] end subgraph \"Logs\" AppLogs[\ud83d\udcdd Application Logs<br/>\u2022 Request/Response<br/>\u2022 Error Messages<br/>\u2022 Debug Information<br/>\u2022 Audit Trail] AgentLogs[\ud83e\udd16 Agent Logs<br/>\u2022 Agent Decisions<br/>\u2022 Classification Results<br/>\u2022 Goal State Changes<br/>\u2022 User Interactions] InfraLogs[\ud83d\udda5\ufe0f Infrastructure Logs<br/>\u2022 Container Logs<br/>\u2022 System Events<br/>\u2022 Security Events<br/>\u2022 Performance Issues] end subgraph \"Traces\" RequestTraces[\ud83d\udd0d Request Traces<br/>\u2022 End-to-End Journey<br/>\u2022 Service Dependencies<br/>\u2022 Performance Bottlenecks<br/>\u2022 Error Propagation] AgentTraces[\ud83e\udd16 Agent Traces<br/>\u2022 Message Processing<br/>\u2022 Agent Selection Flow<br/>\u2022 Goal-Seeking Actions<br/>\u2022 Validation Pipeline] end end subgraph \"Collection & Processing\" OTELCollector[\ud83d\udce1 OpenTelemetry Collector<br/>\u2022 Data Collection<br/>\u2022 Processing Pipeline<br/>\u2022 Export Configuration<br/>\u2022 Protocol Translation] end subgraph \"Storage & Analysis\" Prometheus[(\ud83d\udcca Prometheus<br/>Metrics Storage)] Jaeger[(\ud83d\udd0d Jaeger<br/>Trace Storage)] Loki[(\ud83d\udcdd Grafana Loki<br/>Log Aggregation)] end subgraph \"Visualization & Alerting\" Grafana[\ud83d\udcc8 Grafana Dashboards<br/>\u2022 Real-time Monitoring<br/>\u2022 Custom Dashboards<br/>\u2022 Alert Rules<br/>\u2022 Notification Channels] end AppMetrics --> OTELCollector AgentMetrics --> OTELCollector InfraMetrics --> OTELCollector AppLogs --> OTELCollector AgentLogs --> OTELCollector InfraLogs --> OTELCollector RequestTraces --> OTELCollector AgentTraces --> OTELCollector OTELCollector --> Prometheus OTELCollector --> Jaeger OTELCollector --> Loki Prometheus --> Grafana Jaeger --> Grafana Loki --> Grafana classDef metrics fill:#e8f5e8 classDef logs fill:#fff3e0 classDef traces fill:#e3f2fd classDef collection fill:#fce4ec classDef storage fill:#f1f8e9 classDef visualization fill:#f3e5f5 class AppMetrics,AgentMetrics,InfraMetrics metrics class AppLogs,AgentLogs,InfraLogs logs class RequestTraces,AgentTraces traces class OTELCollector collection class Prometheus,Jaeger,Loki storage class Grafana visualization Key Performance Indicators (KPIs) \u00b6 1 2 3 graph LR subgraph \"Business KPIs\" UserSat[\ud83d\udc65 User Satisfaction<br/>\u2022 Engagement Score<br",
      "title": "Architecture Guide"
    },
    {
      "location": "architecture/architecture/#demo-portfolio-architecture--ai--modern-web-engineering-patterns",
      "text": "This guide supports a demo portfolio project. It focuses on patterns, tradeoffs, and implementation details that matter in AI and modern web app engineering. Production hardening and full productization are out of scope.",
      "title": "Demo Portfolio Architecture \u2014 AI + Modern Web Engineering Patterns"
    },
    {
      "location": "architecture/architecture/#table-of-contents",
      "text": "Demo Portfoloio Table of Contents System Overview Key Architectural Principles High-Level Architecture Component Architecture Frontend Architecture (React Native) Backend Architecture Data Flow Diagrams Message Processing Flow Agent Selection Flow Goal-Seeking System Flow Agent System Architecture Agent Hierarchy RAG System Architecture Database Design Data Models Storage Architecture API Architecture REST API Structure WebSocket Event Architecture Security Architecture Security Layers Deployment Architecture Container Architecture Docker Deployment Monitoring Observability Stack Key Performance Indicators (KPIs)",
      "title": "Table of Contents"
    },
    {
      "location": "architecture/architecture/#system-overview",
      "text": "This demo portfolio implements a mobile-first, real-time AI chat system to showcase multi-agent orchestration, goal-seeking behavior, and enterprise-style observability. It demonstrates patterns and tradeoffs rather than delivering a complete product, including intelligent customer service, technical support, and entertainment via specialized agents.",
      "title": "System Overview"
    },
    {
      "location": "architecture/architecture/#key-architectural-principles",
      "text": "Mobile-First: Native React Native/Expo application Microservices-Ready: Modular backend architecture Agent-Based: 16 specialized AI agents for different use cases Real-Time: Socket.io for instant communication Observable: Comprehensive monitoring and tracing Scalable: Horizontal scaling capabilities Type-Safe: Full TypeScript implementation",
      "title": "Key Architectural Principles"
    },
    {
      "location": "architecture/architecture/#high-level-architecture",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 graph TB subgraph \"Client Layer\" Mobile[\ud83d\udcf1 React Native App<br/>Expo/Metro] Web[\ud83c\udf10 Web Interface<br/>Optional] end subgraph \"API Gateway Layer\" Gateway[\ud83d\udeaa API Gateway<br/>Express.js] Socket[\ud83d\udd0c Socket.io Server<br/>Real-time Communication] end subgraph \"Business Logic Layer\" AgentRouter[\ud83e\udd16 Agent Router<br/>Message Classification] GoalSeeker[\ud83c\udfaf Goal-Seeking System<br/>Proactive Actions] Validator[\u2705 Response Validator<br/>Quality Control] end subgraph \"Agent Layer\" TechAgent[\ud83d\udc68\u200d\ud83d\udcbb Technical Agent] EntertainmentAgent[\ud83c\udfad Entertainment Agents] SupportAgent[\ud83d\udcde Support Agents] CustomerAgent[\ud83c\udfa7 Customer Service] HoldAgent[\u23f3 Hold Management] end subgraph \"Data Layer\" Memory[\ud83d\udcbe Memory Storage<br/>Conversations & State] RAG[\ud83d\udcda RAG Content DB<br/>Curated Entertainment] Metrics[\ud83d\udcca Metrics Storage<br/>Performance Data] end subgraph \"External Services\" OpenAI[\ud83e\udde0 OpenAI API<br/>GPT Models] Monitoring[\ud83d\udcc8 Observability<br/>Jaeger/Prometheus] end Mobile --> Gateway Web --> Gateway Mobile <--> Socket Gateway --> AgentRouter Socket --> AgentRouter AgentRouter --> GoalSeeker AgentRouter --> Validator GoalSeeker --> TechAgent GoalSeeker --> EntertainmentAgent GoalSeeker --> SupportAgent GoalSeeker --> CustomerAgent GoalSeeker --> HoldAgent TechAgent --> Memory EntertainmentAgent --> RAG SupportAgent --> Memory CustomerAgent --> Memory HoldAgent --> Memory TechAgent --> OpenAI EntertainmentAgent --> OpenAI Validator --> Metrics GoalSeeker --> Monitoring Socket --> Monitoring classDef client fill:#e1f5fe classDef api fill:#f3e5f5 classDef logic fill:#e8f5e8 classDef agents fill:#fff3e0 classDef data fill:#fce4ec classDef external fill:#f1f8e9 class Mobile,Web client class Gateway,Socket api class AgentRouter,GoalSeeker,Validator logic class TechAgent,EntertainmentAgent,SupportAgent,CustomerAgent,HoldAgent agents class Memory,RAG,Metrics data class OpenAI,Monitoring external",
      "title": "High-Level Architecture"
    },
    { "location": "architecture/architecture/#component-architecture", "text": "", "title": "Component Architecture" },
    {
      "location": "architecture/architecture/#frontend-architecture-react-native",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 graph TB subgraph \"React Native App Structure\" App[\ud83d\udcf1 App.tsx<br/>Root Component] Router[\ud83e\udded Expo Router<br/>Navigation] subgraph \"Screens\" ChatScreen[\ud83d\udcac Chat Screen<br/>Main Interface] DashboardScreen[\ud83d\udcca Dashboard Screen<br/>Validation Metrics] ExploreScreen[\ud83d\udd0d Explore Screen<br/>Agent Selection] end subgraph \"Components\" MessageInput[\u2328\ufe0f Message Input<br/>Text Input & Send] ChatBubble[\ud83d\udcad Message Bubble<br/>User/Agent Messages] AgentStatus[\ud83e\udd16 Agent Status Bar<br/>Current Agent Display] ValidationDash[\ud83d\udcc8 Validation Dashboard<br/>Quality Metrics] end subgraph \"Services\" SocketService[\ud83d\udd0c Socket Service<br/>Real-time Connection] ApiService[\ud83c\udf10 API Service<br/>HTTP Requests] StateService[\ud83d\uddc2\ufe0f State Management<br/>Conversation State] end subgraph \"Types & Utils\" Types[\ud83d\udcdd TypeScript Types<br/>Shared Interfaces] Constants[\u2699\ufe0f Constants<br/>Configuration] Hooks[\ud83c\udfa3 Custom Hooks<br/>Reusable Logic] end end App --> Router Router --> ChatScreen Router --> DashboardScreen Router --> ExploreScreen ChatScreen --> MessageInput ChatScreen --> ChatBubble ChatScreen --> AgentStatus DashboardScreen --> ValidationDash MessageInput --> SocketService ChatBubble --> StateService AgentStatus --> StateService SocketService --> ApiService StateService --> Types Components --> Hooks Services --> Constants classDef screen fill:#e3f2fd classDef component fill:#f1f8e9 classDef service fill:#fff8e1 classDef util fill:#fce4ec class ChatScreen,DashboardScreen,ExploreScreen screen class MessageInput,ChatBubble,AgentStatus,ValidationDash component class SocketService,ApiService,StateService service class Types,Constants,Hooks util",
      "title": "Frontend Architecture (React Native)"
    },
    {
      "location": "architecture/architecture/#backend-architecture",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 graph TB subgraph \"Backend Server Architecture\" Index[\ud83d\ude80 index.ts<br/>Server Entry Point] subgraph \"Routes Layer\" ChatRoute[\ud83d\udcac Chat Routes<br/>/api/chat] ConversationRoute[\ud83d\uddc2\ufe0f Conversation Routes<br/>/api/conversations] ValidationRoute[\u2705 Validation Routes<br/>/api/validation] TestBenchRoute[\ud83e\uddea Test Bench Routes<br/>/api/test-bench] SwaggerRoute[\ud83d\udcd6 API Docs<br/>/api/docs] end subgraph \"Agent System\" AgentService[\ud83e\udd16 Agent Service<br/>Agent Management] Classifier[\ud83d\udd0d Message Classifier<br/>Intent Recognition] GoalSeeker[\ud83c\udfaf Goal-Seeking System<br/>Proactive Behavior] ConversationMgr[\ud83d\udcac Conversation Manager<br/>Context Management] end subgraph \"Specialized Services\" RAGService[\ud83d\udcda RAG Service<br/>Content Retrieval] DNDService[\ud83c\udfb2 D&D Service<br/>RPG Mechanics] JokeLearning[\ud83d\ude04 Joke Learning<br/>Humor Adaptation] ResponseValidator[\u2705 Response Validator<br/>Quality Control] end subgraph \"Infrastructure\" SocketHandler[\ud83d\udd0c Socket Handlers<br/>WebSocket Events] MemoryStorage[\ud83d\udcbe Memory Storage<br/>Data Persistence] Prometheus[\ud83d\udcca Prometheus Metrics<br/>Performance Monitoring] Tracer[\ud83d\udd0d OpenTelemetry<br/>Distributed Tracing] end end Index --> ChatRoute Index --> ConversationRoute Index --> ValidationRoute Index --> TestBenchRoute Index --> SwaggerRoute Index --> SocketHandler ChatRoute --> AgentService ConversationRoute --> ConversationMgr ValidationRoute --> ResponseValidator AgentService --> Classifier AgentService --> GoalSeeker Classifier --> RAGService Classifier --> DNDService Classifier --> JokeLearning GoalSeeker --> ConversationMgr ConversationMgr --> MemoryStorage SocketHandler --> AgentService SocketHandler --> ResponseValidator ResponseValidator --> Prometheus AgentService --> Tracer GoalSeeker --> Tracer classDef route fill:#e8eaf6 classDef agent fill:#e0f2f1 classDef service fill:#fff3e0 classDef infra fill:#fce4ec class ChatRoute,ConversationRoute,ValidationRoute,TestBenchRoute,SwaggerRoute route class AgentService,Classifier,GoalSeeker,ConversationMgr agent class RAGService,DNDService,JokeLearning,ResponseValidator service class SocketHandler,MemoryStorage,Prometheus,Tracer infra",
      "title": "Backend Architecture"
    },
    { "location": "architecture/architecture/#data-flow-diagrams", "text": "", "title": "Data Flow Diagrams" },
    {
      "location": "architecture/architecture/#message-processing-flow",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 sequenceDiagram participant U as User participant F as Frontend participant S as Socket.io participant C as Classifier participant G as Goal Seeker participant A as Agent participant V as Validator participant O as OpenAI U->>F: Types message F->>S: emit('message', data) S->>C: Classify message intent C->>G: Update user context G->>A: Route to appropriate agent A->>O: Generate response (if needed) O->>A: AI response A->>V: Validate response V->>S: Validated response S->>F: emit('response', data) F->>U: Display response Note over G: Update goals & context G->>A: Trigger proactive actions (if needed) A->>S: Proactive message S->>F: emit('proactive', data) F->>U: Display proactive content",
      "title": "Message Processing Flow"
    },
    {
      "location": "architecture/architecture/#agent-selection-flow",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 flowchart TD Start([User Message Received]) Classify{Message Classification} Technical[\ud83d\udd27 Technical Keywords?] Entertainment[\ud83c\udfad Entertainment Request?] Support[\ud83d\udcde Support Keywords?] Hold[\u23f3 Hold State?] General[\ud83d\udcac General/Unknown] TechAgent[\ud83d\udc68\u200d\ud83d\udcbb Technical Agent] JokeAgent[\ud83d\ude04 Joke Master] TriviaAgent[\ud83e\udde0 Trivia Master] GifAgent[\ud83c\udfac GIF Master] StoryAgent[\ud83d\udcda Story Teller] RiddleAgent[\ud83e\udde9 Riddle Master] GameAgent[\ud83c\udfae Game Host] AccountAgent[\ud83d\udc64 Account Support] BillingAgent[\ud83d\udcb3 Billing Support] WebsiteAgent[\ud83c\udf10 Website Support] OperatorAgent[\ud83c\udfa7 Customer Service] HoldAgent[\ud83d\udcde Hold Agent] GeneralAgent[\ud83e\udd16 General Router] Response([Generate Response]) Start --> Classify Classify --> Technical Classify --> Entertainment Classify --> Support Classify --> Hold Classify --> General Technical --> TechAgent Entertainment --> JokeAgent Entertainment --> TriviaAgent Entertainment --> GifAgent Entertainment --> StoryAgent Entertainment --> RiddleAgent Entertainment --> GameAgent Support --> AccountAgent Support --> BillingAgent Support --> WebsiteAgent Support --> OperatorAgent Hold --> HoldAgent General --> GeneralAgent TechAgent --> Response JokeAgent --> Response TriviaAgent --> Response GifAgent --> Response StoryAgent --> Response RiddleAgent --> Response GameAgent --> Response AccountAgent --> Response BillingAgent --> Response WebsiteAgent --> Response OperatorAgent --> Response HoldAgent --> Response GeneralAgent --> Response classDef technical fill:#e3f2fd classDef entertainment fill:#f1f8e9 classDef support fill:#fff3e0 classDef hold fill:#fce4ec classDef general fill:#f3e5f5 class TechAgent technical class JokeAgent,TriviaAgent,GifAgent,StoryAgent,RiddleAgent,GameAgent entertainment class AccountAgent,BillingAgent,WebsiteAgent,OperatorAgent support class HoldAgent hold class GeneralAgent general",
      "title": "Agent Selection Flow"
    },
    {
      "location": "architecture/architecture/#goal-seeking-system-flow",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 flowchart TD UserConnect([User Connects]) InitState[Initialize User State<br/>- on_hold: true<br/>- engagement: neutral<br/>- preferences: unknown] MonitorLoop{Monitor User Activity} Engaged[User Active/Engaged] Idle[User Idle > 30s] Frustrated[Negative Signals] UpdateGoals[Update Goal Priorities<br/>- Entertainment Goal<br/>- Support Goal<br/>- Satisfaction Goal] SelectAction{Select Proactive Action} OfferJoke[\ud83c\udfad Offer Humor] ShareTrivia[\ud83e\udde0 Share Facts] ShowGif[\ud83c\udfac Visual Entertainment] PlayGame[\ud83c\udfae Interactive Games] CheckStatus[\ud83d\udcde Status Update] ExecuteAction[Execute Proactive Action] MeasureResponse{Measure User Response} Positive[Positive Response<br/>- Engagement \u2191<br/>- Satisfaction \u2191] Negative[Negative Response<br/>- Try Different Approach] NoResponse[No Response<br/>- Adjust Timing] LearnPrefs[Update User Preferences<br/>- Content Type<br/>- Timing<br/>- Frequency] UserConnect --> InitState InitState --> MonitorLoop MonitorLoop --> Engaged MonitorLoop --> Idle MonitorLoop --> Frustrated Engaged --> UpdateGoals Idle --> UpdateGoals Frustrated --> UpdateGoals UpdateGoals --> SelectAction SelectAction --> OfferJoke SelectAction --> ShareTrivia SelectAction --> ShowGif SelectAction --> PlayGame SelectAction --> CheckStatus OfferJoke --> ExecuteAction ShareTrivia --> ExecuteAction ShowGif --> ExecuteAction PlayGame --> ExecuteAction CheckStatus --> ExecuteAction ExecuteAction --> MeasureResponse MeasureResponse --> Positive MeasureResponse --> Negative MeasureResponse --> NoResponse Positive --> LearnPrefs Negative --> LearnPrefs NoResponse --> LearnPrefs LearnPrefs --> MonitorLoop classDef state fill:#e1f5fe classDef action fill:#e8f5e8 classDef response fill:#fff3e0 classDef learning fill:#fce4ec class InitState,UpdateGoals state class OfferJoke,ShareTrivia,ShowGif,PlayGame,CheckStatus action class Positive,Negative,NoResponse response class LearnPrefs learning",
      "title": "Goal-Seeking System Flow"
    },
    {
      "location": "architecture/architecture/#agent-system-architecture",
      "text": "",
      "title": "Agent System Architecture"
    },
    {
      "location": "architecture/architecture/#agent-hierarchy",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 graph TB subgraph \"Agent Classification System\" Router[\ud83e\udd16 Agent Router<br/>Message Classification & Routing] subgraph \"Entertainment Agents\" Joke[\ud83c\udfad Adaptive Joke Master<br/>Humor with Learning] Trivia[\ud83e\udde0 Trivia Master<br/>Educational Facts] Gif[\ud83c\udfac GIF Master<br/>Visual Entertainment] Story[\ud83d\udcda Story Teller<br/>Interactive Narratives] Riddle[\ud83e\udde9 Riddle Master<br/>Brain Teasers] Quote[\ud83d\udcab Quote Master<br/>Inspirational Content] Game[\ud83c\udfae Game Host<br/>Interactive Games] Music[\ud83c\udfb5 Music Guru<br/>Music Recommendations] YouTube[\ud83d\udcfa YouTube Guru<br/>Video Curation] DND[\ud83c\udfb2 D&D Master<br/>RPG Adventures] end subgraph \"Support Agents\" Account[\ud83d\udc64 Account Support<br/>User Account Issues] Billing[\ud83d\udcb3 Billing Support<br/>Payment & Subscriptions] Website[\ud83c\udf10 Website Issues<br/>Technical Web Support] Operator[\ud83c\udfa7 Customer Service<br/>General Support Router] end subgraph \"Specialized Agents\" Hold[\ud83d\udcde Hold Agent<br/>Wait Management] General[\ud83d\udcac General Router<br/>Fallback & Routing] end end Router --> Joke Router --> Trivia Router --> Gif Router --> Story Router --> Riddle Router --> Quote Router --> Game Router --> Music Router --> YouTube Router --> DND Router --> Account Router --> Billing Router --> Website Router --> Operator Router --> Hold Router --> General classDef entertainment fill:#e8f5e8 classDef support fill:#fff3e0 classDef specialized fill:#e3f2fd classDef router fill:#fce4ec class Joke,Trivia,Gif,Story,Riddle,Quote,Game,Music,YouTube,DND entertainment class Account,Billing,Website,Operator support class Hold,General specialized class Router router",
      "title": "Agent Hierarchy"
    },
    {
      "location": "architecture/architecture/#rag-system-architecture",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 graph TB subgraph \"RAG (Retrieval-Augmented Generation) System\" Query[User Query/Request] ContentDB[(\ud83d\udcda Curated Content Database<br/>\u2022 10 Premium Jokes (4-5\u2b50)<br/>\u2022 10 Fascinating Facts<br/>\u2022 10 Entertaining GIFs<br/>\u2022 Quality Rated Content)] Retriever[\ud83d\udd0d Content Retriever<br/>Semantic Search & Matching] Ranker[\ud83d\udcca Content Ranker<br/>\u2022 Relevance Scoring<br/>\u2022 Quality Rating<br/>\u2022 User Preference Matching<br/>\u2022 Context Appropriateness] Generator[\ud83e\udd16 Response Generator<br/>Enhanced AI Response with Retrieved Content] Response[\ud83d\udce4 Enhanced Response<br/>High-Quality + AI Generated] end Query --> Retriever ContentDB --> Retriever Retriever --> Ranker Ranker --> Generator Generator --> Response subgraph \"Content Categories\" Jokes[\ud83d\ude04 Premium Jokes<br/>\u2022 Dad Jokes<br/>\u2022 Wordplay<br/>\u2022 Tech Humor<br/>\u2022 Clean Comedy] Trivia[\ud83e\udde0 Fascinating Facts<br/>\u2022 Science<br/>\u2022 History<br/>\u2022 Nature<br/>\u2022 Technology] Gifs[\ud83c\udfac Curated GIFs<br/>\u2022 Funny Animals<br/>\u2022 Reactions<br/>\u2022 Celebrations<br/>\u2022 Universal Appeal] end ContentDB --> Jokes ContentDB --> Trivia ContentDB --> Gifs classDef content fill:#e8f5e8 classDef process fill:#e3f2fd classDef data fill:#fff3e0 class Jokes,Trivia,Gifs content class Retriever,Ranker,Generator process class ContentDB,Query,Response data",
      "title": "RAG System Architecture"
    },
    { "location": "architecture/architecture/#database-design", "text": "", "title": "Database Design" },
    {
      "location": "architecture/architecture/#data-models",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 erDiagram User ||--o{ Conversation : has User ||--o{ UserState : has User ||--o{ UserPreferences : has Conversation ||--o{ Message : contains Conversation ||--o{ ConversationMeta : has Message ||--o{ MessageValidation : validated_by Message }o--|| Agent : generated_by Agent ||--o{ AgentMetrics : tracks Agent ||--o{ AgentConfig : configured_by RAGContent ||--o{ ContentRating : rated RAGContent }o--o{ Message : enhances User { string id PK string username string email datetime createdAt datetime lastActive string status } UserState { string userId PK string currentState json goals float engagementLevel json preferences datetime lastUpdated } Conversation { string id PK string userId FK string title json participants datetime createdAt datetime updatedAt string status } Message { string id PK string conversationId FK string agentId FK string role text content json metadata datetime timestamp boolean isProactive } Agent { string id PK string name string type text systemPrompt string model float temperature int maxTokens json capabilities } MessageValidation { string messageId PK float qualityScore float appropriatenessScore float relevanceScore json issues datetime validatedAt string validatorVersion } RAGContent { string id PK string type string category text content json metadata float qualityRating json tags datetime createdAt } AgentMetrics { string agentId PK string date PK int messagesHandled float avgResponseTime float avgQualityScore float userSatisfaction json performanceData }",
      "title": "Data Models"
    },
    {
      "location": "architecture/architecture/#storage-architecture",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 graph TB subgraph \"Storage Layer Architecture\" subgraph \"Primary Storage\" Memory[\ud83d\udcbe Memory Storage<br/>\u2022 Active Conversations<br/>\u2022 User Sessions<br/>\u2022 Real-time State] end subgraph \"Content Storage\" RAGStore[\ud83d\udcda RAG Content Store<br/>\u2022 Curated Jokes<br/>\u2022 Trivia Facts<br/>\u2022 GIF Database<br/>\u2022 Quality Ratings] end subgraph \"Analytics Storage\" Metrics[\ud83d\udcca Metrics Store<br/>\u2022 Agent Performance<br/>\u2022 User Analytics<br/>\u2022 Validation Scores<br/>\u2022 System Health] end subgraph \"Future Storage Options\" MongoDB[(\ud83c\udf43 MongoDB<br/>Document Store<br/>\u2022 Conversations<br/>\u2022 User Profiles)] Redis[(\ud83d\udd34 Redis<br/>Cache Layer<br/>\u2022 Sessions<br/>\u2022 Quick Access)] Postgres[(\ud83d\udc18 PostgreSQL<br/>Relational Data<br/>\u2022 User Management<br/>\u2022 Analytics)] Elasticsearch[(\ud83d\udd0d Elasticsearch<br/>Search Engine<br/>\u2022 Content Search<br/>\u2022 Log Analysis)] end end Memory --> RAGStore Memory --> Metrics Memory -.->|Migration Path| MongoDB RAGStore -.->|Caching| Redis Metrics -.->|Analytics| Postgres RAGStore -.->|Search| Elasticsearch classDef current fill:#e8f5e8 classDef future fill:#e3f2fd class Memory,RAGStore,Metrics current class MongoDB,Redis,Postgres,Elasticsearch future",
      "title": "Storage Architecture"
    },
    { "location": "architecture/architecture/#api-architecture", "text": "", "title": "API Architecture" },
    {
      "location": "architecture/architecture/#rest-api-structure",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 graph TB subgraph \"API Layer Structure\" Client[\ud83d\udcf1 Client Applications] subgraph \"API Gateway\" Gateway[\ud83d\udeaa Express Gateway<br/>\u2022 Route Management<br/>\u2022 Middleware Stack<br/>\u2022 Error Handling] end subgraph \"Route Handlers\" ChatAPI[\ud83d\udcac Chat API<br/>/api/chat<br/>\u2022 Message Sending<br/>\u2022 Streaming Responses] ConversationAPI[\ud83d\uddc2\ufe0f Conversation API<br/>/api/conversations<br/>\u2022 CRUD Operations<br/>\u2022 History Management] ValidationAPI[\u2705 Validation API<br/>/api/validation<br/>\u2022 Quality Metrics<br/>\u2022 Dashboard Data] AgentAPI[\ud83e\udd16 Agent API<br/>/api/agents<br/>\u2022 Agent Status<br/>\u2022 Configuration] TestBenchAPI[\ud83e\uddea Test Bench API<br/>/api/test-bench<br/>\u2022 Agent Testing<br/>\u2022 Performance Metrics] DocsAPI[\ud83d\udcd6 Documentation API<br/>/api/docs<br/>\u2022 OpenAPI Spec<br/>\u2022 Interactive Docs] end subgraph \"WebSocket Layer\" SocketIO[\ud83d\udd0c Socket.io Server<br/>\u2022 Real-time Messages<br/>\u2022 Event Broadcasting<br/>\u2022 Connection Management] end subgraph \"Middleware Stack\" Auth[\ud83d\udd10 Authentication<br/>JWT Validation] CORS[\ud83c\udf10 CORS Handler<br/>Cross-Origin Requests] RateLimit[\u26a1 Rate Limiting<br/>API Protection] Logging[\ud83d\udcdd Request Logging<br/>Audit Trail] ErrorHandler[\u274c Error Handler<br/>Standardized Responses] end end Client --> Gateway Gateway --> ChatAPI Gateway --> ConversationAPI Gateway --> ValidationAPI Gateway --> AgentAPI Gateway --> TestBenchAPI Gateway --> DocsAPI Client <--> SocketIO Gateway --> Auth Gateway --> CORS Gateway --> RateLimit Gateway --> Logging Gateway --> ErrorHandler classDef api fill:#e3f2fd classDef middleware fill:#fff3e0 classDef websocket fill:#e8f5e8 class ChatAPI,ConversationAPI,ValidationAPI,AgentAPI,TestBenchAPI,DocsAPI api class Auth,CORS,RateLimit,Logging,ErrorHandler middleware class SocketIO websocket",
      "title": "REST API Structure"
    },
    {
      "location": "architecture/architecture/#websocket-event-architecture",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 sequenceDiagram participant C as Client participant S as Socket.io Server participant A as Agent System participant G as Goal Seeker participant V as Validator Note over C,V: Connection & Setup C->>S: connect() S->>C: connection_established C->>S: join_conversation(conversationId) S->>G: initialize_user_state(userId) G->>C: user_state_initialized Note over C,V: Message Flow C->>S: send_message(message, conversationId) S->>A: process_message(message) A->>S: message_processed(response) S->>V: validate_response(response) V->>S: response_validated(validatedResponse) S->>C: message_response(validatedResponse) Note over C,V: Proactive Actions G->>S: trigger_proactive_action(action) S->>A: execute_proactive_action(action) A->>S: proactive_response(response) S->>C: proactive_message(response) Note over C,V: Status Updates A->>S: agent_status_changed(agentId, status) S->>C: agent_status_update(agentId, status) G->>S: user_state_changed(userId, state) S->>C: user_state_update(state) Note over C,V: Error Handling S->>C: error(errorDetails) C->>S: acknowledge_error() Note over C,V: Disconnection C->>S: disconnect() S->>G: cleanup_user_state(userId)",
      "title": "WebSocket Event Architecture"
    },
    { "location": "architecture/architecture/#security-architecture", "text": "", "title": "Security Architecture" },
    {
      "location": "architecture/architecture/#security-layers",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 graph TB subgraph \"Security Architecture\" subgraph \"Client Security\" ClientAuth[\ud83d\udd10 Client Authentication<br/>\u2022 JWT Tokens<br/>\u2022 Biometric/PIN<br/>\u2022 Secure Storage] ClientValidation[\u2705 Input Validation<br/>\u2022 XSS Prevention<br/>\u2022 Injection Protection<br/>\u2022 Content Filtering] end subgraph \"Transport Security\" HTTPS[\ud83d\udd12 HTTPS/TLS<br/>\u2022 Certificate Pinning<br/>\u2022 Encrypted Transport<br/>\u2022 Secure WebSockets] end subgraph \"API Security\" APIAuth[\ud83d\udee1\ufe0f API Authentication<br/>\u2022 JWT Validation<br/>\u2022 Token Refresh<br/>\u2022 Session Management] RateLimiting[\u26a1 Rate Limiting<br/>\u2022 DDoS Protection<br/>\u2022 Abuse Prevention<br/>\u2022 Fair Usage] InputSanitization[\ud83e\uddfd Input Sanitization<br/>\u2022 SQL Injection Prevention<br/>\u2022 Command Injection<br/>\u2022 Data Validation] end subgraph \"Data Security\" Encryption[\ud83d\udd10 Data Encryption<br/>\u2022 At-Rest Encryption<br/>\u2022 Field-Level Security<br/>\u2022 Key Management] Privacy[\ud83d\udd76\ufe0f Privacy Controls<br/>\u2022 Data Anonymization<br/>\u2022 Consent Management<br/>\u2022 GDPR Compliance] end subgraph \"Agent Security\" ResponseFiltering[\ud83d\udeab Response Filtering<br/>\u2022 Content Safety<br/>\u2022 Harmful Content Detection<br/>\u2022 Bias Prevention] PromptInjection[\u26a0\ufe0f Prompt Injection Protection<br/>\u2022 Input Analysis<br/>\u2022 Malicious Pattern Detection<br/>\u2022 Safe AI Responses] end end ClientAuth --> HTTPS ClientValidation --> HTTPS HTTPS --> APIAuth HTTPS --> RateLimiting HTTPS --> InputSanitization APIAuth --> Encryption RateLimiting --> Privacy InputSanitization --> ResponseFiltering Encryption --> PromptInjection Privacy --> PromptInjection ResponseFiltering --> PromptInjection classDef client fill:#e3f2fd classDef transport fill:#e8f5e8 classDef api fill:#fff3e0 classDef data fill:#fce4ec classDef agent fill:#f1f8e9 class ClientAuth,ClientValidation client class HTTPS transport class APIAuth,RateLimiting,InputSanitization api class Encryption,Privacy data class ResponseFiltering,PromptInjection agent",
      "title": "Security Layers"
    },
    {
      "location": "architecture/architecture/#deployment-architecture",
      "text": "",
      "title": "Deployment Architecture"
    },
    {
      "location": "architecture/architecture/#container-architecture",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 graph TB subgraph \"Production Deployment\" subgraph \"Load Balancer Layer\" LB[\u2696\ufe0f Load Balancer<br/>NGINX/HAProxy<br/>SSL Termination] end subgraph \"Application Layer\" App1[\ud83d\ude80 Backend Instance 1<br/>Node.js + Express] App2[\ud83d\ude80 Backend Instance 2<br/>Node.js + Express] App3[\ud83d\ude80 Backend Instance 3<br/>Node.js + Express] end subgraph \"Mobile Distribution\" AppStore[\ud83d\udcf1 iOS App Store<br/>Native iOS App] PlayStore[\ud83e\udd16 Google Play Store<br/>Native Android App] Expo[\ud83d\udcf1 Expo Go<br/>Development Testing] end subgraph \"Data Layer\" MongoDB[(\ud83c\udf43 MongoDB Cluster<br/>Primary + Replicas)] Redis[(\ud83d\udd34 Redis Cluster<br/>Cache + Sessions)] end subgraph \"Monitoring Stack\" Prometheus[\ud83d\udcca Prometheus<br/>Metrics Collection] Grafana[\ud83d\udcc8 Grafana<br/>Visualization] Jaeger[\ud83d\udd0d Jaeger<br/>Distributed Tracing] AlertManager[\ud83d\udea8 AlertManager<br/>Alert Routing] end subgraph \"External Services\" OpenAIAPI[\ud83e\udde0 OpenAI API<br/>GPT Models] CDN[\ud83c\udf10 CDN<br/>Static Assets] end end LB --> App1 LB --> App2 LB --> App3 App1 --> MongoDB App2 --> MongoDB App3 --> MongoDB App1 --> Redis App2 --> Redis App3 --> Redis App1 --> OpenAIAPI App2 --> OpenAIAPI App3 --> OpenAIAPI AppStore --> LB PlayStore --> LB Expo --> LB App1 --> Prometheus App2 --> Prometheus App3 --> Prometheus Prometheus --> Grafana Prometheus --> AlertManager App1 --> Jaeger App2 --> Jaeger App3 --> Jaeger classDef lb fill:#e3f2fd classDef app fill:#e8f5e8 classDef mobile fill:#fff3e0 classDef data fill:#fce4ec classDef monitoring fill:#f1f8e9 classDef external fill:#f3e5f5 class LB lb class App1,App2,App3 app class AppStore,PlayStore,Expo mobile class MongoDB,Redis data class Prometheus,Grafana,Jaeger,AlertManager monitoring class OpenAIAPI,CDN external",
      "title": "Container Architecture"
    },
    {
      "location": "architecture/architecture/#docker-deployment",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 graph TB subgraph \"Docker Compose Stack\" subgraph \"Application Services\" BackendContainer[\ud83d\udc33 Backend Container<br/>\u2022 Node.js App<br/>\u2022 Health Checks<br/>\u2022 Auto-restart] RedisContainer[\ud83d\udc33 Redis Container<br/>\u2022 Session Storage<br/>\u2022 Cache Layer<br/>\u2022 Persistence] end subgraph \"Monitoring Services\" PrometheusContainer[\ud83d\udc33 Prometheus Container<br/>\u2022 Metrics Collection<br/>\u2022 Data Retention<br/>\u2022 Alert Rules] GrafanaContainer[\ud83d\udc33 Grafana Container<br/>\u2022 Dashboards<br/>\u2022 Visualizations<br/>\u2022 User Management] JaegerContainer[\ud83d\udc33 Jaeger Container<br/>\u2022 Trace Collection<br/>\u2022 UI Interface<br/>\u2022 Data Storage] end subgraph \"Infrastructure Services\" NGINXContainer[\ud83d\udc33 NGINX Container<br/>\u2022 Reverse Proxy<br/>\u2022 SSL Termination<br/>\u2022 Load Balancing] OtelContainer[\ud83d\udc33 OTEL Collector<br/>\u2022 Trace Processing<br/>\u2022 Metrics Pipeline<br/>\u2022 Export Configuration] end subgraph \"Data Volumes\" PrometheusData[(\ud83d\udcca Prometheus Data<br/>Time Series Storage)] GrafanaData[(\ud83d\udcc8 Grafana Data<br/>Dashboards & Config)] RedisData[(\ud83d\udd34 Redis Data<br/>Cache Persistence)] end end NGINXContainer --> BackendContainer BackendContainer --> RedisContainer BackendContainer --> OtelContainer OtelContainer --> PrometheusContainer OtelContainer --> JaegerContainer PrometheusContainer --> GrafanaContainer PrometheusContainer --> PrometheusData GrafanaContainer --> GrafanaData RedisContainer --> RedisData classDef app fill:#e8f5e8 classDef monitoring fill:#fff3e0 classDef infra fill:#e3f2fd classDef data fill:#fce4ec class BackendContainer,RedisContainer app class PrometheusContainer,GrafanaContainer,JaegerContainer monitoring class NGINXContainer,OtelContainer infra class PrometheusData,GrafanaData,RedisData data",
      "title": "Docker Deployment"
    },
    {
      "location": "architecture/architecture/#monitoring--observability",
      "text": "",
      "title": "Monitoring &amp; Observability"
    },
    {
      "location": "architecture/architecture/#observability-stack",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 graph TB subgraph \"Three Pillars of Observability\" subgraph \"Metrics\" AppMetrics[\ud83d\udcca Application Metrics<br/>\u2022 Response Times<br/>\u2022 Error Rates<br/>\u2022 Throughput<br/>\u2022 Resource Usage] AgentMetrics[\ud83e\udd16 Agent Metrics<br/>\u2022 Agent Selection<br/>\u2022 Response Quality<br/>\u2022 User Satisfaction<br/>\u2022 Goal Achievement] InfraMetrics[\ud83d\udda5\ufe0f Infrastructure Metrics<br/>\u2022 CPU/Memory Usage<br/>\u2022 Network I/O<br/>\u2022 Disk Usage<br/>\u2022 Container Health] end subgraph \"Logs\" AppLogs[\ud83d\udcdd Application Logs<br/>\u2022 Request/Response<br/>\u2022 Error Messages<br/>\u2022 Debug Information<br/>\u2022 Audit Trail] AgentLogs[\ud83e\udd16 Agent Logs<br/>\u2022 Agent Decisions<br/>\u2022 Classification Results<br/>\u2022 Goal State Changes<br/>\u2022 User Interactions] InfraLogs[\ud83d\udda5\ufe0f Infrastructure Logs<br/>\u2022 Container Logs<br/>\u2022 System Events<br/>\u2022 Security Events<br/>\u2022 Performance Issues] end subgraph \"Traces\" RequestTraces[\ud83d\udd0d Request Traces<br/>\u2022 End-to-End Journey<br/>\u2022 Service Dependencies<br/>\u2022 Performance Bottlenecks<br/>\u2022 Error Propagation] AgentTraces[\ud83e\udd16 Agent Traces<br/>\u2022 Message Processing<br/>\u2022 Agent Selection Flow<br/>\u2022 Goal-Seeking Actions<br/>\u2022 Validation Pipeline] end end subgraph \"Collection & Processing\" OTELCollector[\ud83d\udce1 OpenTelemetry Collector<br/>\u2022 Data Collection<br/>\u2022 Processing Pipeline<br/>\u2022 Export Configuration<br/>\u2022 Protocol Translation] end subgraph \"Storage & Analysis\" Prometheus[(\ud83d\udcca Prometheus<br/>Metrics Storage)] Jaeger[(\ud83d\udd0d Jaeger<br/>Trace Storage)] Loki[(\ud83d\udcdd Grafana Loki<br/>Log Aggregation)] end subgraph \"Visualization & Alerting\" Grafana[\ud83d\udcc8 Grafana Dashboards<br/>\u2022 Real-time Monitoring<br/>\u2022 Custom Dashboards<br/>\u2022 Alert Rules<br/>\u2022 Notification Channels] end AppMetrics --> OTELCollector AgentMetrics --> OTELCollector InfraMetrics --> OTELCollector AppLogs --> OTELCollector AgentLogs --> OTELCollector InfraLogs --> OTELCollector RequestTraces --> OTELCollector AgentTraces --> OTELCollector OTELCollector --> Prometheus OTELCollector --> Jaeger OTELCollector --> Loki Prometheus --> Grafana Jaeger --> Grafana Loki --> Grafana classDef metrics fill:#e8f5e8 classDef logs fill:#fff3e0 classDef traces fill:#e3f2fd classDef collection fill:#fce4ec classDef storage fill:#f1f8e9 classDef visualization fill:#f3e5f5 class AppMetrics,AgentMetrics,InfraMetrics metrics class AppLogs,AgentLogs,InfraLogs logs class RequestTraces,AgentTraces traces class OTELCollector collection class Prometheus,Jaeger,Loki storage class Grafana visualization",
      "title": "Observability Stack"
    },
    {
      "location": "architecture/architecture/#key-performance-indicators-kpis",
      "text": "1 2 3 graph LR subgraph \"Business KPIs\" UserSat[\ud83d\udc65 User Satisfaction<br/>\u2022 Engagement Score<br",
      "title": "Key Performance Indicators (KPIs)"
    },
    {
      "location": "architecture/system-overview/",
      "text": "System Overview \u00b6 High-level architecture, data flows, and responsibilities. Context \u00b6 This demo emphasizes architecture, quality gates, and observability over product completeness. Core Components \u00b6 Frontend (React Native + Expo) Backend (Express/TypeScript) Agent System (multi-agent orchestration) Message Queue RAG System Validation & Observability (tracing/metrics/logging) Key Flows \u00b6 Ingest request -> agent orchestration -> RAG -> validation -> response Telemetry: OTEL tracing, Prometheus metrics, logs",
      "title": "System Overview"
    },
    {
      "location": "architecture/system-overview/#system-overview",
      "text": "High-level architecture, data flows, and responsibilities.",
      "title": "System Overview"
    },
    {
      "location": "architecture/system-overview/#context",
      "text": "This demo emphasizes architecture, quality gates, and observability over product completeness.",
      "title": "Context"
    },
    {
      "location": "architecture/system-overview/#core-components",
      "text": "Frontend (React Native + Expo) Backend (Express/TypeScript) Agent System (multi-agent orchestration) Message Queue RAG System Validation & Observability (tracing/metrics/logging)",
      "title": "Core Components"
    },
    {
      "location": "architecture/system-overview/#key-flows",
      "text": "Ingest request -> agent orchestration -> RAG -> validation -> response Telemetry: OTEL tracing, Prometheus metrics, logs",
      "title": "Key Flows"
    },
    {
      "location": "architecture/components/agents/",
      "text": "Agent System \u00b6 Multi-agent orchestration: goal-seeking loops, classifiers, and specialized agents. Responsibilities \u00b6 Orchestrate tasks across agents Track goals, intermediate steps, and validations Integrate with RAG and message queue Implementation Notes \u00b6 See backend/src/agents/* Classifier, goal-seeking system, and supporting services",
      "title": "Agents"
    },
    {
      "location": "architecture/components/agents/#agent-system",
      "text": "Multi-agent orchestration: goal-seeking loops, classifiers, and specialized agents.",
      "title": "Agent System"
    },
    {
      "location": "architecture/components/agents/#responsibilities",
      "text": "Orchestrate tasks across agents Track goals, intermediate steps, and validations Integrate with RAG and message queue",
      "title": "Responsibilities"
    },
    {
      "location": "architecture/components/agents/#implementation-notes",
      "text": "See backend/src/agents/* Classifier, goal-seeking system, and supporting services",
      "title": "Implementation Notes"
    },
    {
      "location": "architecture/components/backend/",
      "text": "Backend Guide \u00b6 This document provides comprehensive information about the backend architecture, APIs, and development practices for the AI Chat Application. Table of Contents \u00b6 Backend Guide Table of Contents Overview Technology Stack Core Technologies Supporting Libraries Development Tools Project Structure Server Architecture Main Server Configuration Application Architecture API Design RESTful Endpoints Health Check Chat Routes Conversation Routes WebSocket Implementation Socket.io Event Handlers Data Storage In-Memory Storage Implementation OpenAI Integration Streaming Response Implementation Error Handling Centralized Error Handling Overview \u00b6 The backend is built with Node.js, Express, and TypeScript, providing a robust API server with real-time WebSocket capabilities. It integrates with OpenAI's API for AI responses and includes comprehensive error handling, logging, and streaming support. Technology Stack \u00b6 Core Technologies \u00b6 Node.js - JavaScript runtime environment Express 5 - Web application framework TypeScript - Type safety and better developer experience Socket.io - Real-time bidirectional event-based communication Supporting Libraries \u00b6 OpenAI SDK - OpenAI API integration UUID - Unique identifier generation CORS - Cross-origin resource sharing Helmet - Security middleware Morgan - HTTP request logger Development Tools \u00b6 Nodemon - Development server auto-reload TSC - TypeScript compiler ESLint - Code linting Prettier - Code formatting Project Structure \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 backend/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 routes/ # API route handlers \u2502 \u2502 \u251c\u2500\u2500 chat.ts # Chat API endpoints \u2502 \u2502 \u2514\u2500\u2500 conversations.ts # Conversation management \u2502 \u251c\u2500\u2500 socket/ # WebSocket handlers \u2502 \u2502 \u2514\u2500\u2500 socketHandlers.ts # Socket.io event handlers \u2502 \u251c\u2500\u2500 storage/ # Data storage layer \u2502 \u2502 \u2514\u2500\u2500 memoryStorage.ts # In-memory storage implementation \u2502 \u251c\u2500\u2500 types.ts # TypeScript type definitions \u2502 \u2514\u2500\u2500 index.ts # Main server file \u251c\u2500\u2500 package.json # Dependencies and scripts \u251c\u2500\u2500 tsconfig.json # TypeScript configuration \u251c\u2500\u2500 .env # Environment variables \u251c\u2500\u2500 .env.example # Environment template \u2514\u2500\u2500 .gitignore # Git ignore rules Server Architecture \u00b6 Main Server Configuration \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // src/index.ts import express from 'express' ; import { createServer } from 'http' ; import { Server } from 'socket.io' ; import cors from 'cors' ; import { setupSocketHandlers } from './socket/socketHandlers' ; import chatRoutes from './routes/chat' ; import conversationRoutes from './routes/conversations' ; const app = express (); const server = createServer ( app ); const io = new Server ( server , { cors : { origin : process.env.FRONTEND_URL || 'http://localhost:8081' , methods : [ 'GET' , 'POST' ], }, }); // Middleware app . use ( cors ({ origin : process.env.FRONTEND_URL || 'http://localhost:8081' , }), ); app . use ( express . json ()); // Routes app . use ( '/api/chat' , chatRoutes ); app . use ( '/api/conversations' , conversationRoutes ); // Health check app . get ( '/api/health' , ( req , res ) => { res . json ({ status : 'OK' , timestamp : new Date (). toISOString (), version : '1.0.0' , }); }); // Socket.io setup setupSocketHandlers ( io ); const PORT = process . env . PORT || 5001 ; server . listen ( PORT , () => { console . log ( `\ud83d\ude80 Server running on port ${ PORT } ` ); console . log ( `\ud83d\udce1 WebSocket server ready` ); }); Application Architecture \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Express Server \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 CORS \u2502 \u2502 JSON \u2502 \u2502 Security \u2502 \u2502 \u2502 \u2502 Middleware \u2502 \u2502 Middleware \u2502 \u2502 Middleware \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Chat \u2502 \u2502Conversation \u2502 \u2502 Health \u2502 \u2502 \u2502 \u2502 Routes \u2502 \u2502 Routes \u2502 \u2502 Routes \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Socket.io Server \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Connection \u2502 \u2502 Room \u2502 \u2502 Event \u2502 \u2502 \u2502 \u2502 Handling \u2502 \u2502 Management \u2502 \u2502 Broadcasting\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Service Layer \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Storage \u2502 \u2502 OpenAI \u2502 \u2502 Validation \u2502 \u2502 \u2502 \u2502 Service \u2502 \u2502 Service \u2502 \u2502 Service \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 API Design \u00b6 RESTful Endpoints \u00b6 Health Check \u00b6 1 2 3 4 5 6 7 8 9 10 // GET /api/health app . get ( '/api/health' , ( req , res ) => { res . json ({ status : 'OK' , timestamp : new Date (). toISOString (), version : '1.0.0' , uptime : process.uptime (), memory : process.memoryUsage (), }); }); Chat Routes \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // routes/chat.ts import express from 'express' ; import { v4 as uuidv4 } from 'uuid' ; import { storage } from '../storage/memoryStorage' ; import { Message , Conversation , ChatRequest , ChatResponse } from '../types' ; const router = express . Router (); // POST /api/chat - Send message (non-streaming) router . post ( '/' , async ( req , res ) => { try { const { message , conversationId } : ChatRequest = req . body ; // Validate input if ( ! message || message . trim () === '' ) { return res . status ( 400 ). json ({ message : 'Message is required' , code : 'INVALID_REQUEST' , }); } // Create or get conversation let conversation : Conversation ; if ( conversationId ) { conversation = await storage . getConversation ( conversationId ); if ( ! conversation ) { return res . status ( 404 ). json ({ message : 'Conversation not found' , code : 'CONVERSATION_NOT_FOUND' , }); } } else { // Create new conversation conversation = { id : uuidv4 (), title : message.substring ( 0 , 50 ) + ( message . length > 50 ? '...' : '' ), messages : [], createdAt : new Date (), updatedAt : new Date (), }; await storage . createConversation ( conversation ); } // Add user message const userMessage : Message = { id : uuidv4 (), content : message , role : 'user' , timestamp : new Date (), conversationId : conversation.id , }; await storage . addMessage ( conversation . id , userMessage ); // Generate AI response (placeholder) const aiResponse : Message = { id : uuidv4 (), content : 'This is a placeholder response. OpenAI integration needed.' , role : 'assistant' , timestamp : new Date (), conversationId : conversation.id , }; await storage . addMessage ( conversation . id , aiResponse ); // Get updated conversation const updatedConversation = await storage . getConversation ( conversation . id ); const response : ChatResponse = { message : aiResponse , conversation : updatedConversation ! , }; res . json ( response ); } catch ( error ) { console . error ( 'Chat error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); export default router ; Conversation Routes \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 // routes/conversations.ts import express from 'express' ; import { storage } from '../storage/memoryStorage' ; const router = express . Router (); // GET /api/conversations - Get all conversations router . get ( '/' , async ( req , res ) => { try { const conversations = await storage . getConversations (); res . json ( conversations ); } catch ( error ) { console . error ( 'Get conversations error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); // GET /api/conversations/:id - Get specific conversation router . get ( '/:id' , async ( req , res ) => { try { const { id } = req . params ; const conversation = await storage . getConversation ( id ); if ( ! conversation ) { return res . status ( 404 ). json ({ message : 'Conversation not found' , code : 'CONVERSATION_NOT_FOUND' , }); } res . json ( conversation ); } catch ( error ) { console . error ( 'Get conversation error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); // DELETE /api/conversations/:id - Delete conversation router . delete ( '/:id' , async ( req , res ) => { try { const { id } = req . params ; const success = await storage . deleteConversation ( id ); if ( ! success ) { return res . status ( 404 ). json ({ message : 'Conversation not found' , code : 'CONVERSATION_NOT_FOUND' , }); } res . json ({ message : 'Conversation deleted successfully' }); } catch ( error ) { console . error ( 'Delete conversation error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); export default router ; WebSocket Implementation \u00b6 Socket.io Event Handlers \u00bsocket/socketHandlers.ts import { Server , Socket } from 'socket.io' ; import { v4 as uuidv4 } from 'uuid' ; import OpenAI from 'openai' ; import { storage } from '../storage/memoryStorage' ; import { Message , Conversation , StreamChatRequest , StreamChunk } from '../types' ; let openai : OpenAI | null = null ; // Initialize OpenAI if API key is available if ( process . env . OPENAI_API_KEY ) { openai = new OpenAI ({ apiKey : process.env.OPENAI_API_KEY , }); } export const setupSocketHandlers = ( io : Server ) => { io . on ( 'connection' , ( socket : Socket ) => { console . log ( 'Client connected:' , socket . id ); // Handle conversation joining socket . on ( 'join_conversation' , ( data : { conversationId : string }) => { const { conversationId } = data ; socket . join ( conversationId ); console . log ( `Socket ${ socket . id } joined conversation ${ conversationId } ` ); }); // Handle conversation leaving socket . on ( 'leave_conversation' , ( data : { conversationId : string }) => { const { conversationId } = data ; socket . leave ( conversationId ); console . log ( `Socket ${ socket . id } left conversation ${ conversationId } ` ); }); // Handle streaming chat socket . on ( 'stream_chat' , async ( data : StreamChatRequest ) => { try { const { message , conversationId } = data ; console . log ( '\ud83d\udd04 Received stream_chat request:' , { message , conversationId }); // Validate input if ( ! message || message . trim () === '' ) { socket . emit ( 'error' , { message : 'Message is required' }); return ; } // Get or create conversation let conversation = await storage . getConversation ( conversationId ); if ( ! conversation ) { conversation = { id : conversationId , title : message.substring ( 0 , 50 ) + ( message . length > 50 ? '...' : '' ), messages : [], createdAt : new Date (), updatedAt : new Date (), }; await storage . createConversation ( conversation ); } // Join conversation room socket . join ( conversationId ); // Add user message const userMessage : Message = { id : uuidv4 (), content : message , role : 'user' , timestamp : new Date (), conversationId , }; await storage . addMessage ( conversationId , userMessage ); // Create AI response message const aiMessage : Message = { id : uuidv4 (), content : '' , role : 'assistant' , timestamp : new Date (), conversationId , }; await storage . addMessage ( conversationId , aiMessage ); // Emit stream start io . to ( conversationId ). emit ( 'stream_start' , { messageId : aiMessage.id , conversationId , }); // Handle OpenAI streaming or fallback if ( openai ) { console . log ( '\ud83e\udd16 Starting OpenAI streaming request...' ); try { const stream = await openai . chat . completions . create ({ model : 'gpt-4' , messages : [ { role : 'system' , content : 'You are a helpful assistant.' }, { role : 'user' , content : message }, ], stream : true , }); console . log ( '\u2705 OpenAI stream created successfully' ); let accumulatedContent = '' ; let chunkCount = 0 ; for await ( const chunk of stream ) { const deltaContent = chunk . choices [ 0 ] ? . delta ? . content || '' ; if ( deltaContent ) { accumulatedContent += deltaContent ; chunkCount ++ ; console . log ( `\ud83d\udce1 Sending chunk ${ chunkCount } : \" ${ deltaContent } ...\"` ); // Emit chunk to all clients in conversation io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : accumulatedContent , isComplete : false , }); } } // Update message in storage await storage . updateMessage ( conversationId , aiMessage . id , { content : accumulatedContent , }); // Emit final chunk io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : accumulatedContent , isComplete : true , }); console . log ( `\ud83c\udfc1 OpenAI streaming completed. Total chunks: ${ chunkCount } , Full content length: ${ accumulatedContent . length } ` , ); } catch ( openaiError ) { console . error ( 'OpenAI streaming error:' , openaiError ); // Fallback to simple response const fallbackContent = 'I apologize, but I encountered an error while processing your request. Please try again.' ; await storage . updateMessage ( conversationId , aiMessage . id , { content : fallbackContent , }); io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : fallbackContent , isComplete : true , }); } } else { // Demo mode without OpenAI const demoResponse = 'This is a demo response. To enable AI responses, add your OpenAI API key to the environment variables.' ; await storage . updateMessage ( conversationId , aiMessage . id , { content : demoResponse , }); io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : demoResponse , isComplete : true , }); } // Emit stream complete io . to ( conversationId ). emit ( 'stream_complete' , { messageId : aiMessage.id , conversationId , }); } catch ( error ) { console . error ( 'Stream chat error:' , error ); socket . emit ( 'error' , { message : 'Internal server error' }); } }); // Handle disconnect socket . on ( 'disconnect' , () => { console . log ( 'Client disconnected:' , socket . id ); }); }); }; Data Storage \u00b6 In-Memory Storage Implementation \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // storage/memoryStorage.ts import { Conversation , Message } from '../types' ; export interface StorageService { getConversations () : Promise < Conversation [] > ; getConversation ( id : string ) : Promise < Conversation | null > ; createConversation ( conversation : Conversation ) : Promise < Conversation > ; updateConversation ( id : string , updates : Partial < Conversation > ) : Promise < Conversation | null > ; deleteConversation ( id : string ) : Promise < boolean > ; addMessage ( conversationId : string , message : Message ) : Promise < Message > ; updateMessage ( conversationId : string , messageId : string , updates : Partial < Message > ) : Promise < Message | null > ; } class MemoryStorage implements StorageService { private conversations : Map < string , Conversation > = new Map (); async getConversations () : Promise < Conversation [] > { return Array . from ( this . conversations . values ()). sort (( a , b ) => b . updatedAt . getTime () - a . updatedAt . getTime ()); } async getConversation ( id : string ) : Promise < Conversation | null > { return this . conversations . get ( id ) || null ; } async createConversation ( conversation : Conversation ) : Promise < Conversation > { this . conversations . set ( conversation . id , conversation ); return conversation ; } async updateConversation ( id : string , updates : Partial < Conversation > ) : Promise < Conversation | null > { const conversation = this . conversations . get ( id ); if ( ! conversation ) return null ; const updated = { ... conversation , ... updates , updatedAt : new Date () }; this . conversations . set ( id , updated ); return updated ; } async deleteConversation ( id : string ) : Promise < boolean > { return this . conversations . delete ( id ); } async addMessage ( conversationId : string , message : Message ) : Promise < Message > { const conversation = this . conversations . get ( conversationId ); if ( ! conversation ) { throw new Error ( 'Conversation not found' ); } conversation . messages . push ( message ); conversation . updatedAt = new Date (); return message ; } async updateMessage ( conversationId : string , messageId : string , updates : Partial < Message > ) : Promise < Message | null > { const conversation = this . conversations . get ( conversationId ); if ( ! conversation ) return null ; const messageIndex = conversation . messages . findIndex ( m => m . id === messageId ); if ( messageIndex === - 1 ) return null ; const updated = { ... conversation . messages [ messageIndex ], ... updates }; conversation . messages [ messageIndex ] = updated ; conversation . updatedAt = new Date (); return updated ; } } export const storage = new MemoryStorage (); OpenAI Integration \u00b6 Streaming Response Implementation \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // Example OpenAI streaming integration import OpenAI from 'openai' ; const openai = new OpenAI ({ apiKey : process.env.OPENAI_API_KEY , }); export const streamChatCompletion = async ( messages : OpenAI.Chat.Completions.ChatCompletionMessage [], onChunk : ( content : string ) => void , onComplete : ( fullContent : string ) => void , ) => { try { const stream = await openai . chat . completions . create ({ model : 'gpt-4' , messages , stream : true , temperature : 0.7 , max_tokens : 2000 , }); let accumulatedContent = '' ; for await ( const chunk of stream ) { const deltaContent = chunk . choices [ 0 ] ? . delta ? . content || '' ; if ( deltaContent ) { accumulatedContent += deltaContent ; onChunk ( accumulatedContent ); } } onComplete ( accumulatedContent ); } catch ( error ) { console . error ( 'OpenAI streaming error:' , error ); throw error ; } }; Error Handling \u00b6 Centralized Error Handling \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // middleware/errorHandler.ts import { Request , Response , NextFunction } from 'express' ; export interface AppError extends Error { statusCode : number ; code : string ; isOperational : boolean ; } export const createError = ( message : string , statusCode : number , code : string ) : AppError => { const error = new Error ( message ) as AppError ; error . statusCode = statusCode ; error . code = code ; error . isOperational = true ; return error ; }; export const errorHandler = ( error : AppError , req : Request , res : Response , next",
      "title": "Backend"
    },
    {
      "location": "architecture/components/backend/#backend-guide",
      "text": "This document provides comprehensive information about the backend architecture, APIs, and development practices for the AI Chat Application.",
      "title": "Backend Guide"
    },
    {
      "location": "architecture/components/backend/#table-of-contents",
      "text": "Backend Guide Table of Contents Overview Technology Stack Core Technologies Supporting Libraries Development Tools Project Structure Server Architecture Main Server Configuration Application Architecture API Design RESTful Endpoints Health Check Chat Routes Conversation Routes WebSocket Implementation Socket.io Event Handlers Data Storage In-Memory Storage Implementation OpenAI Integration Streaming Response Implementation Error Handling Centralized Error Handling",
      "title": "Table of Contents"
    },
    {
      "location": "architecture/components/backend/#overview",
      "text": "The backend is built with Node.js, Express, and TypeScript, providing a robust API server with real-time WebSocket capabilities. It integrates with OpenAI's API for AI responses and includes comprehensive error handling, logging, and streaming support.",
      "title": "Overview"
    },
    { "location": "architecture/components/backend/#technology-stack", "text": "", "title": "Technology Stack" },
    {
      "location": "architecture/components/backend/#core-technologies",
      "text": "Node.js - JavaScript runtime environment Express 5 - Web application framework TypeScript - Type safety and better developer experience Socket.io - Real-time bidirectional event-based communication",
      "title": "Core Technologies"
    },
    {
      "location": "architecture/components/backend/#supporting-libraries",
      "text": "OpenAI SDK - OpenAI API integration UUID - Unique identifier generation CORS - Cross-origin resource sharing Helmet - Security middleware Morgan - HTTP request logger",
      "title": "Supporting Libraries"
    },
    {
      "location": "architecture/components/backend/#development-tools",
      "text": "Nodemon - Development server auto-reload TSC - TypeScript compiler ESLint - Code linting Prettier - Code formatting",
      "title": "Development Tools"
    },
    {
      "location": "architecture/components/backend/#project-structure",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 backend/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 routes/ # API route handlers \u2502 \u2502 \u251c\u2500\u2500 chat.ts # Chat API endpoints \u2502 \u2502 \u2514\u2500\u2500 conversations.ts # Conversation management \u2502 \u251c\u2500\u2500 socket/ # WebSocket handlers \u2502 \u2502 \u2514\u2500\u2500 socketHandlers.ts # Socket.io event handlers \u2502 \u251c\u2500\u2500 storage/ # Data storage layer \u2502 \u2502 \u2514\u2500\u2500 memoryStorage.ts # In-memory storage implementation \u2502 \u251c\u2500\u2500 types.ts # TypeScript type definitions \u2502 \u2514\u2500\u2500 index.ts # Main server file \u251c\u2500\u2500 package.json # Dependencies and scripts \u251c\u2500\u2500 tsconfig.json # TypeScript configuration \u251c\u2500\u2500 .env # Environment variables \u251c\u2500\u2500 .env.example # Environment template \u2514\u2500\u2500 .gitignore # Git ignore rules",
      "title": "Project Structure"
    },
    { "location": "architecture/components/backend/#server-architecture", "text": "", "title": "Server Architecture" },
    {
      "location": "architecture/components/backend/#main-server-configuration",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // src/index.ts import express from 'express' ; import { createServer } from 'http' ; import { Server } from 'socket.io' ; import cors from 'cors' ; import { setupSocketHandlers } from './socket/socketHandlers' ; import chatRoutes from './routes/chat' ; import conversationRoutes from './routes/conversations' ; const app = express (); const server = createServer ( app ); const io = new Server ( server , { cors : { origin : process.env.FRONTEND_URL || 'http://localhost:8081' , methods : [ 'GET' , 'POST' ], }, }); // Middleware app . use ( cors ({ origin : process.env.FRONTEND_URL || 'http://localhost:8081' , }), ); app . use ( express . json ()); // Routes app . use ( '/api/chat' , chatRoutes ); app . use ( '/api/conversations' , conversationRoutes ); // Health check app . get ( '/api/health' , ( req , res ) => { res . json ({ status : 'OK' , timestamp : new Date (). toISOString (), version : '1.0.0' , }); }); // Socket.io setup setupSocketHandlers ( io ); const PORT = process . env . PORT || 5001 ; server . listen ( PORT , () => { console . log ( `\ud83d\ude80 Server running on port ${ PORT } ` ); console . log ( `\ud83d\udce1 WebSocket server ready` ); });",
      "title": "Main Server Configuration"
    },
    {
      "location": "architecture/components/backend/#application-architecture",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Express Server \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 CORS \u2502 \u2502 JSON \u2502 \u2502 Security \u2502 \u2502 \u2502 \u2502 Middleware \u2502 \u2502 Middleware \u2502 \u2502 Middleware \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Chat \u2502 \u2502Conversation \u2502 \u2502 Health \u2502 \u2502 \u2502 \u2502 Routes \u2502 \u2502 Routes \u2502 \u2502 Routes \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Socket.io Server \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Connection \u2502 \u2502 Room \u2502 \u2502 Event \u2502 \u2502 \u2502 \u2502 Handling \u2502 \u2502 Management \u2502 \u2502 Broadcasting\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 Service Layer \u2502 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Storage \u2502 \u2502 OpenAI \u2502 \u2502 Validation \u2502 \u2502 \u2502 \u2502 Service \u2502 \u2502 Service \u2502 \u2502 Service \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518",
      "title": "Application Architecture"
    },
    { "location": "architecture/components/backend/#api-design", "text": "", "title": "API Design" },
    { "location": "architecture/components/backend/#restful-endpoints", "text": "", "title": "RESTful Endpoints" },
    {
      "location": "architecture/components/backend/#health-check",
      "text": "1 2 3 4 5 6 7 8 9 10 // GET /api/health app . get ( '/api/health' , ( req , res ) => { res . json ({ status : 'OK' , timestamp : new Date (). toISOString (), version : '1.0.0' , uptime : process.uptime (), memory : process.memoryUsage (), }); });",
      "title": "Health Check"
    },
    {
      "location": "architecture/components/backend/#chat-routes",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 // routes/chat.ts import express from 'express' ; import { v4 as uuidv4 } from 'uuid' ; import { storage } from '../storage/memoryStorage' ; import { Message , Conversation , ChatRequest , ChatResponse } from '../types' ; const router = express . Router (); // POST /api/chat - Send message (non-streaming) router . post ( '/' , async ( req , res ) => { try { const { message , conversationId } : ChatRequest = req . body ; // Validate input if ( ! message || message . trim () === '' ) { return res . status ( 400 ). json ({ message : 'Message is required' , code : 'INVALID_REQUEST' , }); } // Create or get conversation let conversation : Conversation ; if ( conversationId ) { conversation = await storage . getConversation ( conversationId ); if ( ! conversation ) { return res . status ( 404 ). json ({ message : 'Conversation not found' , code : 'CONVERSATION_NOT_FOUND' , }); } } else { // Create new conversation conversation = { id : uuidv4 (), title : message.substring ( 0 , 50 ) + ( message . length > 50 ? '...' : '' ), messages : [], createdAt : new Date (), updatedAt : new Date (), }; await storage . createConversation ( conversation ); } // Add user message const userMessage : Message = { id : uuidv4 (), content : message , role : 'user' , timestamp : new Date (), conversationId : conversation.id , }; await storage . addMessage ( conversation . id , userMessage ); // Generate AI response (placeholder) const aiResponse : Message = { id : uuidv4 (), content : 'This is a placeholder response. OpenAI integration needed.' , role : 'assistant' , timestamp : new Date (), conversationId : conversation.id , }; await storage . addMessage ( conversation . id , aiResponse ); // Get updated conversation const updatedConversation = await storage . getConversation ( conversation . id ); const response : ChatResponse = { message : aiResponse , conversation : updatedConversation ! , }; res . json ( response ); } catch ( error ) { console . error ( 'Chat error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); export default router ;",
      "title": "Chat Routes"
    },
    {
      "location": "architecture/components/backend/#conversation-routes",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 // routes/conversations.ts import express from 'express' ; import { storage } from '../storage/memoryStorage' ; const router = express . Router (); // GET /api/conversations - Get all conversations router . get ( '/' , async ( req , res ) => { try { const conversations = await storage . getConversations (); res . json ( conversations ); } catch ( error ) { console . error ( 'Get conversations error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); // GET /api/conversations/:id - Get specific conversation router . get ( '/:id' , async ( req , res ) => { try { const { id } = req . params ; const conversation = await storage . getConversation ( id ); if ( ! conversation ) { return res . status ( 404 ). json ({ message : 'Conversation not found' , code : 'CONVERSATION_NOT_FOUND' , }); } res . json ( conversation ); } catch ( error ) { console . error ( 'Get conversation error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); // DELETE /api/conversations/:id - Delete conversation router . delete ( '/:id' , async ( req , res ) => { try { const { id } = req . params ; const success = await storage . deleteConversation ( id ); if ( ! success ) { return res . status ( 404 ). json ({ message : 'Conversation not found' , code : 'CONVERSATION_NOT_FOUND' , }); } res . json ({ message : 'Conversation deleted successfully' }); } catch ( error ) { console . error ( 'Delete conversation error:' , error ); res . status ( 500 ). json ({ message : 'Internal server error' , code : 'INTERNAL_ERROR' , }); } }); export default router ;",
      "title": "Conversation Routes"
    },
    {
      "location": "architecture/components/backend/#websocket-implementation",
      "text": "",
      "title": "WebSocket Implementation"
    },
    {
      "location": "architecture/components/backend/#socketio-event-handlers",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 // socket/socketHandlers.ts import { Server , Socket } from 'socket.io' ; import { v4 as uuidv4 } from 'uuid' ; import OpenAI from 'openai' ; import { storage } from '../storage/memoryStorage' ; import { Message , Conversation , StreamChatRequest , StreamChunk } from '../types' ; let openai : OpenAI | null = null ; // Initialize OpenAI if API key is available if ( process . env . OPENAI_API_KEY ) { openai = new OpenAI ({ apiKey : process.env.OPENAI_API_KEY , }); } export const setupSocketHandlers = ( io : Server ) => { io . on ( 'connection' , ( socket : Socket ) => { console . log ( 'Client connected:' , socket . id ); // Handle conversation joining socket . on ( 'join_conversation' , ( data : { conversationId : string }) => { const { conversationId } = data ; socket . join ( conversationId ); console . log ( `Socket ${ socket . id } joined conversation ${ conversationId } ` ); }); // Handle conversation leaving socket . on ( 'leave_conversation' , ( data : { conversationId : string }) => { const { conversationId } = data ; socket . leave ( conversationId ); console . log ( `Socket ${ socket . id } left conversation ${ conversationId } ` ); }); // Handle streaming chat socket . on ( 'stream_chat' , async ( data : StreamChatRequest ) => { try { const { message , conversationId } = data ; console . log ( '\ud83d\udd04 Received stream_chat request:' , { message , conversationId }); // Validate input if ( ! message || message . trim () === '' ) { socket . emit ( 'error' , { message : 'Message is required' }); return ; } // Get or create conversation let conversation = await storage . getConversation ( conversationId ); if ( ! conversation ) { conversation = { id : conversationId , title : message.substring ( 0 , 50 ) + ( message . length > 50 ? '...' : '' ), messages : [], createdAt : new Date (), updatedAt : new Date (), }; await storage . createConversation ( conversation ); } // Join conversation room socket . join ( conversationId ); // Add user message const userMessage : Message = { id : uuidv4 (), content : message , role : 'user' , timestamp : new Date (), conversationId , }; await storage . addMessage ( conversationId , userMessage ); // Create AI response message const aiMessage : Message = { id : uuidv4 (), content : '' , role : 'assistant' , timestamp : new Date (), conversationId , }; await storage . addMessage ( conversationId , aiMessage ); // Emit stream start io . to ( conversationId ). emit ( 'stream_start' , { messageId : aiMessage.id , conversationId , }); // Handle OpenAI streaming or fallback if ( openai ) { console . log ( '\ud83e\udd16 Starting OpenAI streaming request...' ); try { const stream = await openai . chat . completions . create ({ model : 'gpt-4' , messages : [ { role : 'system' , content : 'You are a helpful assistant.' }, { role : 'user' , content : message }, ], stream : true , }); console . log ( '\u2705 OpenAI stream created successfully' ); let accumulatedContent = '' ; let chunkCount = 0 ; for await ( const chunk of stream ) { const deltaContent = chunk . choices [ 0 ] ? . delta ? . content || '' ; if ( deltaContent ) { accumulatedContent += deltaContent ; chunkCount ++ ; console . log ( `\ud83d\udce1 Sending chunk ${ chunkCount } : \" ${ deltaContent } ...\"` ); // Emit chunk to all clients in conversation io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : accumulatedContent , isComplete : false , }); } } // Update message in storage await storage . updateMessage ( conversationId , aiMessage . id , { content : accumulatedContent , }); // Emit final chunk io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : accumulatedContent , isComplete : true , }); console . log ( `\ud83c\udfc1 OpenAI streaming completed. Total chunks: ${ chunkCount } , Full content length: ${ accumulatedContent . length } ` , ); } catch ( openaiError ) { console . error ( 'OpenAI streaming error:' , openaiError ); // Fallback to simple response const fallbackContent = 'I apologize, but I encountered an error while processing your request. Please try again.' ; await storage . updateMessage ( conversationId , aiMessage . id , { content : fallbackContent , }); io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : fallbackContent , isComplete : true , }); } } else { // Demo mode without OpenAI const demoResponse = 'This is a demo response. To enable AI responses, add your OpenAI API key to the environment variables.' ; await storage . updateMessage ( conversationId , aiMessage . id , { content : demoResponse , }); io . to ( conversationId ). emit ( 'stream_chunk' , { messageId : aiMessage.id , content : demoResponse , isComplete : true , }); } // Emit stream complete io . to ( conversationId ). emit ( 'stream_complete' , { messageId : aiMessage.id , conversationId , }); } catch ( error ) { console . error ( 'Stream chat error:' , error ); socket . emit ( 'error' , { message : 'Internal server error' }); } }); // Handle disconnect socket . on ( 'disconnect' , () => { console . log ( 'Client disconnected:' , socket . id ); }); }); };",
      "title": "Socket.io Event Handlers"
    },
    { "location": "architecture/components/backend/#data-storage", "text": "", "title": "Data Storage" },
    {
      "location": "architecture/components/backend/#in-memory-storage-implementation",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 // storage/memoryStorage.ts import { Conversation , Message } from '../types' ; export interface StorageService { getConversations () : Promise < Conversation [] > ; getConversation ( id : string ) : Promise < Conversation | null > ; createConversation ( conversation : Conversation ) : Promise < Conversation > ; updateConversation ( id : string , updates : Partial < Conversation > ) : Promise < Conversation | null > ; deleteConversation ( id : string ) : Promise < boolean > ; addMessage ( conversationId : string , message : Message ) : Promise < Message > ; updateMessage ( conversationId : string , messageId : string , updates : Partial < Message > ) : Promise < Message | null > ; } class MemoryStorage implements StorageService { private conversations : Map < string , Conversation > = new Map (); async getConversations () : Promise < Conversation [] > { return Array . from ( this . conversations . values ()). sort (( a , b ) => b . updatedAt . getTime () - a . updatedAt . getTime ()); } async getConversation ( id : string ) : Promise < Conversation | null > { return this . conversations . get ( id ) || null ; } async createConversation ( conversation : Conversation ) : Promise < Conversation > { this . conversations . set ( conversation . id , conversation ); return conversation ; } async updateConversation ( id : string , updates : Partial < Conversation > ) : Promise < Conversation | null > { const conversation = this . conversations . get ( id ); if ( ! conversation ) return null ; const updated = { ... conversation , ... updates , updatedAt : new Date () }; this . conversations . set ( id , updated ); return updated ; } async deleteConversation ( id : string ) : Promise < boolean > { return this . conversations . delete ( id ); } async addMessage ( conversationId : string , message : Message ) : Promise < Message > { const conversation = this . conversations . get ( conversationId ); if ( ! conversation ) { throw new Error ( 'Conversation not found' ); } conversation . messages . push ( message ); conversation . updatedAt = new Date (); return message ; } async updateMessage ( conversationId : string , messageId : string , updates : Partial < Message > ) : Promise < Message | null > { const conversation = this . conversations . get ( conversationId ); if ( ! conversation ) return null ; const messageIndex = conversation . messages . findIndex ( m => m . id === messageId ); if ( messageIndex === - 1 ) return null ; const updated = { ... conversation . messages [ messageIndex ], ... updates }; conversation . messages [ messageIndex ] = updated ; conversation . updatedAt = new Date (); return updated ; } } export const storage = new MemoryStorage ();",
      "title": "In-Memory Storage Implementation"
    },
    { "location": "architecture/components/backend/#openai-integration", "text": "", "title": "OpenAI Integration" },
    {
      "location": "architecture/components/backend/#streaming-response-implementation",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 // Example OpenAI streaming integration import OpenAI from 'openai' ; const openai = new OpenAI ({ apiKey : process.env.OPENAI_API_KEY , }); export const streamChatCompletion = async ( messages : OpenAI.Chat.Completions.ChatCompletionMessage [], onChunk : ( content : string ) => void , onComplete : ( fullContent : string ) => void , ) => { try { const stream = await openai . chat . completions . create ({ model : 'gpt-4' , messages , stream : true , temperature : 0.7 , max_tokens : 2000 , }); let accumulatedContent = '' ; for await ( const chunk of stream ) { const deltaContent = chunk . choices [ 0 ] ? . delta ? . content || '' ; if ( deltaContent ) { accumulatedContent += deltaContent ; onChunk ( accumulatedContent ); } } onComplete ( accumulatedContent ); } catch ( error ) { console . error ( 'OpenAI streaming error:' , error ); throw error ; } };",
      "title": "Streaming Response Implementation"
    },
    { "location": "architecture/components/backend/#error-handling", "text": "", "title": "Error Handling" },
    {
      "location": "architecture/components/backend/#centralized-error-handling",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // middleware/errorHandler.ts import { Request , Response , NextFunction } from 'express' ; export interface AppError extends Error { statusCode : number ; code : string ; isOperational : boolean ; } export const createError = ( message : string , statusCode : number , code : string ) : AppError => { const error = new Error ( message ) as AppError ; error . statusCode = statusCode ; error . code = code ; error . isOperational = true ; return error ; }; export const errorHandler = ( error : AppError , req : Request , res : Response , next",
      "title": "Centralized Error Handling"
    },
    {
      "location": "architecture/components/frontend/",
      "text": "Frontend Guide - Mobile Application \u00b6 This document provides comprehensive information about the mobile application architecture, components, and development practices for the AI Chat Application built with React Native and Expo. Table of Contents \u00b6 Overview Technology Stack Project Structure Component Architecture Navigation State Management Styling and Theming Real-time Communication API Integration TypeScript Usage Development Workflow Performance Optimization Testing Overview \u00b6 The mobile application is built with React Native and Expo, providing a native mobile experience for iOS and Android platforms. It features real-time messaging, AI response validation dashboard, and intelligent agent interactions with cross-platform compatibility. Technology Stack \u00b6 Core Technologies \u00b6 React Native - Native mobile development framework Expo - Development platform and toolchain TypeScript - Type safety and better developer experience Expo Router - File-based routing system React Native Paper - Material Design components Socket.io Client - Real-time WebSocket communication Supporting Libraries \u00b6 React Native Markdown Display - Markdown rendering React Native Gesture Handler - Native gesture support React Native Reanimated - Advanced animations React Native Safe Area Context - Safe area handling Expo Vector Icons - Icon library Project Structure \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 frontend/ \u251c\u2500\u2500 app/ # Expo Router app directory \u2502 \u251c\u2500\u2500 (tabs)/ # Tab navigation group \u2502 \u2502 \u251c\u2500\u2500 _layout.tsx # Tab layout \u2502 \u2502 \u251c\u2500\u2500 index.tsx # Chat tab \u2502 \u2502 \u2514\u2500\u2500 explore.tsx # Dashboard tab \u2502 \u251c\u2500\u2500 _layout.tsx # Root layout \u2502 \u2514\u2500\u2500 +not-found.tsx # 404 page \u251c\u2500\u2500 components/ # React Native components \u2502 \u251c\u2500\u2500 AgentStatusBar.tsx # Agent status display \u2502 \u251c\u2500\u2500 ChatScreen.tsx # Main chat interface \u2502 \u251c\u2500\u2500 MessageInput.tsx # Message input component \u2502 \u251c\u2500\u2500 ValidationDashboard.tsx # AI validation metrics \u2502 \u2514\u2500\u2500 ui/ # UI components \u2502 \u251c\u2500\u2500 IconSymbol.tsx \u2502 \u2514\u2500\u2500 TabBarBackground.tsx \u251c\u2500\u2500 services/ # API and external services \u2502 \u2514\u2500\u2500 socketService.ts # WebSocket client \u251c\u2500\u2500 types/ # TypeScript type definitions \u2502 \u2514\u2500\u2500 index.ts # Shared types \u251c\u2500\u2500 constants/ # App constants \u2502 \u2514\u2500\u2500 Colors.ts # Color scheme \u251c\u2500\u2500 hooks/ # Custom hooks \u2502 \u251c\u2500\u2500 useColorScheme.ts # Theme detection \u2502 \u2514\u2500\u2500 useThemeColor.ts # Color theming \u251c\u2500\u2500 assets/ # Static assets \u2502 \u251c\u2500\u2500 images/ # Image files \u2502 \u2514\u2500\u2500 fonts/ # Custom fonts \u251c\u2500\u2500 package.json # Dependencies and scripts \u251c\u2500\u2500 tsconfig.json # TypeScript configuration \u251c\u2500\u2500 app.json # Expo app configuration \u2514\u2500\u2500 App.tsx # Application root Component Architecture \u00b6 Component Hierarchy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 App \u251c\u2500\u2500 RootLayout \u2514\u2500\u2500 TabLayout \u251c\u2500\u2500 ChatTab (index.tsx) \u2502 \u2514\u2500\u2500 ChatScreen \u2502 \u251c\u2500\u2500 AgentStatusBar \u2502 \u251c\u2500\u2500 MessageList \u2502 \u2502 \u2514\u2500\u2500 MessageBubble \u2502 \u2514\u2500\u2500 MessageInput \u2514\u2500\u2500 DashboardTab (explore.tsx) \u2514\u2500\u2500 ValidationDashboard \u251c\u2500\u2500 MetricsCards \u251c\u2500\u2500 QualityChart \u2514\u2500\u2500 ResponseList Core Components \u00b6 1. ChatScreen.tsx \u00b6 Main chat interface component with full mobile functionality. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import React , { useState , useEffect } from 'react' ; import { View , ScrollView , KeyboardAvoidingView , Platform } from 'react-native' ; import { Text , Surface } from 'react-native-paper' ; import { socketService } from '../services/socketService' ; import MessageInput from './MessageInput' ; import AgentStatusBar from './AgentStatusBar' ; export default function ChatScreen () { const [ messages , setMessages ] = useState < Message [] > ([]); const [ isConnected , setIsConnected ] = useState ( false ); const [ activeAgent , setActiveAgent ] = useState < string > ( 'general' ); useEffect (() => { socketService . connect (); socketService . on ( 'connect' , () => setIsConnected ( true )); socketService . on ( 'disconnect' , () => setIsConnected ( false )); socketService . on ( 'message' , handleNewMessage ); socketService . on ( 'agent_selection' , handleAgentSelection ); return () => { socketService . disconnect (); }; }, []); return ( < KeyboardAvoidingView style = {{ flex : 1 }} behavior = { Platform . OS === 'ios' ? 'padding' : 'height' } > < AgentStatusBar activeAgent = { activeAgent } isConnected = { isConnected } /> < ScrollView style = {{ flex : 1 }} > { messages . map (( message ) => ( < MessageBubble key = { message . id } message = { message } /> ))} < /ScrollView> < MessageInput onSendMessage = { handleSendMessage } disabled = { ! isConnected } /> < /KeyboardAvoidingView> ); } 2. ValidationDashboard.tsx \u00b6 Real-time AI response validation and metrics display. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import React , { useState , useEffect } from 'react' ; import { ScrollView , RefreshControl } from 'react-native' ; import { Card , Title , Paragraph , ProgressBar } from 'react-native-paper' ; import { socketService } from '../services/socketService' ; export default function ValidationDashboard () { const [ metrics , setMetrics ] = useState < ValidationMetrics | null > ( null ); const [ refreshing , setRefreshing ] = useState ( false ); const onRefresh = useCallback ( async () => { setRefreshing ( true ); await fetchMetrics (); setRefreshing ( false ); }, []); return ( < ScrollView refreshControl = { < RefreshControl refreshing = { refreshing } onRefresh = { onRefresh } /> } > < Card style = {{ margin : 16 }} > < Card . Content > < Title > Response Quality < /Title> < Paragraph > Average quality score < /Paragraph> < ProgressBar progress = { metrics ? . averageQuality || 0 } style = {{ marginTop : 8 }} /> < /Card.Content> < /Card> < Card style = {{ margin : 16 }} > < Card . Content > < Title > Agent Performance < /Title> { metrics ? . agentStats . map (( agent ) => ( < View key = { agent . type } > < Paragraph > { agent . type } : { agent . responseCount } < /Paragraph> < /View> ))} < /Card.Content> < /Card> < /ScrollView> ); } 3. MessageInput.tsx \u00b6 Native mobile message input with enhanced UX. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 import React , { useState } from 'react' ; import { View , TextInput , TouchableOpacity } from 'react-native' ; import { IconButton , useTheme } from 'react-native-paper' ; import { Haptics } from 'expo-haptics' ; interface MessageInputProps { onSendMessage : ( message : string ) => void ; disabled? : boolean ; } export default function MessageInput ({ onSendMessage , disabled } : MessageInputProps ) { const [ message , setMessage ] = useState ( '' ); const theme = useTheme (); const handleSend = () => { if ( message . trim ()) { Haptics . impactAsync ( Haptics . ImpactFeedbackStyle . Light ); onSendMessage ( message . trim ()); setMessage ( '' ); } }; return ( < View style = {{ flexDirection : 'row' , padding : 16 , backgroundColor : theme.colors.surface , alignItems : 'flex-end' , }} > < TextInput style = {{ flex : 1 , borderWidth : 1 , borderColor : theme.colors.outline , borderRadius : 20 , paddingHorizontal : 16 , paddingVertical : 12 , maxHeight : 100 , backgroundColor : theme.colors.background , }} value = { message } onChangeText = { setMessage } placeholder = \"Type a message...\" multiline editable = { ! disabled } onSubmitEditing = { handleSend } blurOnSubmit = { false } /> < IconButton icon = \"send\" onPress = { handleSend } disabled = { disabled || ! message . trim ()} style = {{ marginLeft : 8 }} /> < /View> ); } Navigation \u00b6 Expo Router File-based Routing \u00b6 The app uses Expo Router with file-based routing: 1 2 3 4 5 6 7 8 9 10 11 // app/_layout.tsx - Root layout import { Stack } from 'expo-router' ; export default function RootLayout () { return ( < Stack > < Stack . Screen name = \"(tabs)\" options = {{ headerShown : false }} /> < Stack . Screen name = \"+not-found\" /> < /Stack> ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // app/(tabs)/_layout.tsx - Tab navigation import { Tabs } from 'expo-router' ; import { TabBarIcon } from '@/components/navigation/TabBarIcon' ; export default function TabLayout () { return ( < Tabs screenOptions = {{ tabBarActiveTintColor : Colors.light.tint , headerShown : false , }} > < Tabs . Screen name = \"index\" options = {{ title : 'Chat' , tabBarIcon : ({ color , focused }) => ( < TabBarIcon name = { focused ? 'chatbubble' : 'chatbubble-outline' } color = { color } /> ), }} /> < Tabs . Screen name = \"explore\" options = {{ title : 'Dashboard' , tabBarIcon : ({ color , focused }) => ( < TabBarIcon name = { focused ? 'analytics' : 'analytics-outline' } color = { color } /> ), }} /> < /Tabs> ); } State Management \u00b6 React Native State with Hooks \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // Custom hooks for state management export function useSocket () { const [ isConnected , setIsConnected ] = useState ( false ); const [ messages , setMessages ] = useState < Message [] > ([]); const [ activeAgent , setActiveAgent ] = useState < AgentType > ( 'general' ); useEffect (() => { socketService . connect (); const handleConnect = () => setIsConnected ( true ); const handleDisconnect = () => setIsConnected ( false ); const handleMessage = ( message : Message ) => { setMessages ( prev => [... prev , message ]); }; const handleAgentSelection = ( agent : AgentType ) => { setActiveAgent ( agent ); }; socketService . on ( 'connect' , handleConnect ); socketService . on ( 'disconnect' , handleDisconnect ); socketService . on ( 'message' , handleMessage ); socketService . on ( 'agent_selection' , handleAgentSelection ); return () => { socketService . off ( 'connect' , handleConnect ); socketService . off ( 'disconnect' , handleDisconnect ); socketService . off ( 'message' , handleMessage ); socketService . off ( 'agent_selection' , handleAgentSelection ); }; }, []); return { isConnected , messages , activeAgent , sendMessage : socketService.sendMessage , }; } Styling and Theming \u00b6 React Native Paper Theming \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // constants/Colors.ts export const Colors = { light : { text : '#11181C' , background : '#fff' , tint : '#0a7ea4' , icon : '#687076' , tabIconDefault : '#687076' , tabIconSelected : '#0a7ea4' , }, dark : { text : '#ECEDEE' , background : '#151718' , tint : '#fff' , icon : '#9BA1A6' , tabIconDefault : '#9BA1A6' , tabIconSelected : '#fff' , }, }; // Theme provider setup import { MD3LightTheme , MD3DarkTheme } from 'react-native-paper' ; export const lightTheme = { ... MD3LightTheme , colors : { ... MD3LightTheme . colors , primary : Colors.light.tint , background : Colors.light.background , surface : '#f8f9fa' , }, }; export const darkTheme = { ... MD3DarkTheme , colors : { ... MD3DarkTheme . colors , primary : Colors.dark.tint , background : Colors.dark.background , surface : '#1e1e1e' , }, }; Custom Hook for Theme \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // hooks/useThemeColor.ts import { useColorScheme } from './useColorScheme' ; import { Colors } from '@/constants/Colors' ; export function useThemeColor ( props : { light? : string ; dark? : string }, colorName : keyof typeof Colors . light & keyof typeof Colors . dark , ) { const theme = useColorScheme () ?? 'light' ; const colorFromProps = props [ theme ]; if ( colorFromProps ) { return colorFromProps ; } else { return Colors [ theme ][ colorName ]; } } Real-time Communication \u00b6 Socket.io Service for Mobile \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // services/socketService.ts import io , { Socket } from 'socket.io-client' ; import { Message , AgentType , ValidationResult } from '../types' ; class SocketService { private socket : Socket | null = null ; private isConnected = false ; connect () { this . socket = io ( process . env . EXPO_PUBLIC_API_URL || 'http://localhost:5001' , { transports : [ 'websocket' ], timeout : 20000 , }); this . socket . on ( 'connect' , () => { this . isConnected = true ; console . log ( 'Connected to server' ); }); this . socket . on ( 'disconnect' , () => { this . isConnected = false ; console . log ( 'Disconnected from server' ); }); this . socket . on ( 'connect_error' , error => { console . error ( 'Connection error:' , error ); }); } disconnect () { if ( this . socket ) { this . socket . disconnect (); this . socket = null ; this . isConnected = false ; } } sendMessage ( message : string , conversationId? : string ) { if ( this . socket && this . isConnected ) { this . socket . emit ( 'stream_chat' , { message , conversationId }); } } on ( event : string , callback : Function ) { this . socket ? . on ( event , callback ); } off ( event : string , callback? : Function ) { this . socket ? . off ( event , callback ); } // Mobile-specific methods onStreamChunk ( callback : ( chunk : { messageId : string ; content : string }) => void ) { this . socket ? . on ( 'stream_chunk' , callback ); } onValidationResult ( callback : ( result : ValidationResult ) => void ) { this . socket ? . on ( 'validation_result' , callback ); } onAgentSelection ( callback : ( agent : AgentType ) => void ) { this . socket ? . on ( 'agent_selection' , callback ); } } export const socketService = new SocketService (); API Integration \u00b6 Mobile-optimized HTTP Client \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // services/api.ts (mobile-specific) import Constants from 'expo-constants' ; const API_URL = process . env . EXPO_PUBLIC_API_URL || 'http://localhost:5001' ; class ApiService { private async request < T > ( endpoint : string , options : RequestInit = {}) : Promise < T > { const url = ` ${ API_URL }${ endpoint } ` ; const response = await fetch ( url , { ... options , headers : { 'Content-Type' : 'application/json' , ... options . headers , }, }); if ( ! response . ok ) { throw new Error ( `HTTP error! status: ${ response . status } ` ); } return response . json (); } async getValidationMetrics () { return this . request < ValidationMetrics > ( '/api/validation/metrics' ); } async getConversationHistory () { return this . request < Message [] > ( '/api/conversations' ); } async submitFeedback ( messageId : string , rating : number , comment? : string ) { return this . request ( '/api/feedback' , { method : 'POST' , body : JSON.stringify ({ messageId , rating , comment }), }); } } export const apiService = new ApiService (); TypeScript Usage \u00b6 Mobile-specific Type Definitions \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // types/index.ts export interface Message { id : string ; content : string ; role : 'user' | 'assistant' ; timestamp : Date ; conversationId : string ; agentType? : AgentType ; validationScore? : number ; } export interface ValidationMetrics { averageQuality : number ; totalMessages : number ; agentStats : AgentStats []; responseTimeAvg : number ; satisfactionScore : number ; } export interface AgentStats { type : AgentType ; responseCount : number ; averageQuality : number ; averageResponseTime : number ; } export type AgentType = 'general' | 'technical' | 'joke' | 'trivia' | 'gif' | 'hold_agent' ; // Navigation types for Expo Router export type RootTabParamList = { index : undefined ; explore : undefined ; }; // Component prop types export interface ChatScreenProps { conversationId? : string ; } export interface ValidationDashboardProps { refreshInterval? : number ; } Development Workflow \u00b6 Available Scripts \u00b6 1 2 3 4 5 6 7 8 9 10 { \"scripts\" : { \"start\" : \"expo start\" , \"android\" : \"expo start --android\" , \"ios\" : \"expo start --ios\" , \"web\" : \"expo start --web\" , \"lint\" : \"expo lint\" , \"reset-project\" : \"node ./scripts/reset-project.js\" } } Environment Configuration \u00b6 1 2 3 4 5 # .env (development) EXPO_PUBLIC_API_URL = http://localhost:5001 # .env.production EXPO_PUBLIC_API_URL = https://your-production-api.com Development Tools \u00b6 Expo CLI - Development server and tools Expo Go - Mobile app for testing React Native Debugger - Debugging tool Flipper - Advanced debugging EAS Build - Cloud build service Performance Optimization \u00b6 Mobile-specific Optimizations \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Lazy loading for heavy components const ValidationDashboard = React . lazy (() => import ( '../components/ValidationDashboard' )); // Memoization for expensive operations const MessageList = React . memo (({ messages }) => { return ( < FlatList data = { messages } renderItem = {({ item }) => < MessageBubble message = { item } /> } keyExtractor = {( item ) => item . id } getItemLayout = {( data , index ) => ({ length : ITEM_HEIGHT , offset : ITEM_HEIGHT * index , index , })} removeClippedSubviews = { true } maxToRenderPerBatch = { 10 } windowSize = { 10 } /> ); }); // Image optimization import { Image } from 'expo-image' ; const OptimizedImage = ({ source , ... props }) => ( < Image source = { source } contentFit = \"cover\" transition = { 200 } {... props } /> ); Testing \u00b6 Mobile Testing Strategy \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // __tests__/ChatScreen.test.tsx import React from 'react' ; import { render , fireEvent , waitFor } from '@testing-library/react-native' ; import ChatScreen from '../components/ChatScreen' ; import { socketService } from '../services/socketService' ; // Mock socket service jest . mock ( '../services/socketService' ); describe ( 'ChatScreen' , () => { it ( 'renders correctly' , () => { const { getByPlaceholderText } = render ( < ChatScreen /> ); expect ( getByPlaceholderText ( 'Type a message...' )). toBeTruthy (); }); it ( 'sends message when button is pressed' , async () => { const { getByPlaceholderText , getByRole } = render ( < ChatScreen /> ); const input = getByPlaceholderText ( 'Type a message...' ); const sendButton = getByRole ( 'button' ); fireEvent . changeText ( input , 'Hello' ); fireEvent . press ( sendButton ); await waitFor (() => { expect ( socketService . sendMessage ). toHaveBeenCalledWith ( 'Hello' , undefined ); }); }); }); Testing Tools \u00b6 1 2 3 4 5 6 7 8 { \"devDependencies\" : { \"@testing-library/react-native\" : \"^12.0.0\" , \"@testing-library/jest-native\" : \"^5.0.0\" , \"jest\" : \"^29.0.0\" , \"jest-expo\" : \"^51.0.0\" } } This mobile frontend guide provides comprehensive documentation for the React Native/Expo application, covering all aspects of mobile development, from component architecture to testing strategies.",
      "title": "Frontend"
    },
    {
      "location": "architecture/components/frontend/#frontend-guide-mobile-application",
      "text": "This document provides comprehensive information about the mobile application architecture, components, and development practices for the AI Chat Application built with React Native and Expo.",
      "title": "Frontend Guide - Mobile Application"
    },
    {
      "location": "architecture/components/frontend/#table-of-contents",
      "text": "Overview Technology Stack Project Structure Component Architecture Navigation State Management Styling and Theming Real-time Communication API Integration TypeScript Usage Development Workflow Performance Optimization Testing",
      "title": "Table of Contents"
    },
    {
      "location": "architecture/components/frontend/#overview",
      "text": "The mobile application is built with React Native and Expo, providing a native mobile experience for iOS and Android platforms. It features real-time messaging, AI response validation dashboard, and intelligent agent interactions with cross-platform compatibility.",
      "title": "Overview"
    },
    { "location": "architecture/components/frontend/#technology-stack", "text": "", "title": "Technology Stack" },
    {
      "location": "architecture/components/frontend/#core-technologies",
      "text": "React Native - Native mobile development framework Expo - Development platform and toolchain TypeScript - Type safety and better developer experience Expo Router - File-based routing system React Native Paper - Material Design components Socket.io Client - Real-time WebSocket communication",
      "title": "Core Technologies"
    },
    {
      "location": "architecture/components/frontend/#supporting-libraries",
      "text": "React Native Markdown Display - Markdown rendering React Native Gesture Handler - Native gesture support React Native Reanimated - Advanced animations React Native Safe Area Context - Safe area handling Expo Vector Icons - Icon library",
      "title": "Supporting Libraries"
    },
    {
      "location": "architecture/components/frontend/#project-structure",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 frontend/ \u251c\u2500\u2500 app/ # Expo Router app directory \u2502 \u251c\u2500\u2500 (tabs)/ # Tab navigation group \u2502 \u2502 \u251c\u2500\u2500 _layout.tsx # Tab layout \u2502 \u2502 \u251c\u2500\u2500 index.tsx # Chat tab \u2502 \u2502 \u2514\u2500\u2500 explore.tsx # Dashboard tab \u2502 \u251c\u2500\u2500 _layout.tsx # Root layout \u2502 \u2514\u2500\u2500 +not-found.tsx # 404 page \u251c\u2500\u2500 components/ # React Native components \u2502 \u251c\u2500\u2500 AgentStatusBar.tsx # Agent status display \u2502 \u251c\u2500\u2500 ChatScreen.tsx # Main chat interface \u2502 \u251c\u2500\u2500 MessageInput.tsx # Message input component \u2502 \u251c\u2500\u2500 ValidationDashboard.tsx # AI validation metrics \u2502 \u2514\u2500\u2500 ui/ # UI components \u2502 \u251c\u2500\u2500 IconSymbol.tsx \u2502 \u2514\u2500\u2500 TabBarBackground.tsx \u251c\u2500\u2500 services/ # API and external services \u2502 \u2514\u2500\u2500 socketService.ts # WebSocket client \u251c\u2500\u2500 types/ # TypeScript type definitions \u2502 \u2514\u2500\u2500 index.ts # Shared types \u251c\u2500\u2500 constants/ # App constants \u2502 \u2514\u2500\u2500 Colors.ts # Color scheme \u251c\u2500\u2500 hooks/ # Custom hooks \u2502 \u251c\u2500\u2500 useColorScheme.ts # Theme detection \u2502 \u2514\u2500\u2500 useThemeColor.ts # Color theming \u251c\u2500\u2500 assets/ # Static assets \u2502 \u251c\u2500\u2500 images/ # Image files \u2502 \u2514\u2500\u2500 fonts/ # Custom fonts \u251c\u2500\u2500 package.json # Dependencies and scripts \u251c\u2500\u2500 tsconfig.json # TypeScript configuration \u251c\u2500\u2500 app.json # Expo app configuration \u2514\u2500\u2500 App.tsx # Application root",
      "title": "Project Structure"
    },
    {
      "location": "architecture/components/frontend/#component-architecture",
      "text": "",
      "title": "Component Architecture"
    },
    {
      "location": "architecture/components/frontend/#component-hierarchy",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 App \u251c\u2500\u2500 RootLayout \u2514\u2500\u2500 TabLayout \u251c\u2500\u2500 ChatTab (index.tsx) \u2502 \u2514\u2500\u2500 ChatScreen \u2502 \u251c\u2500\u2500 AgentStatusBar \u2502 \u251c\u2500\u2500 MessageList \u2502 \u2502 \u2514\u2500\u2500 MessageBubble \u2502 \u2514\u2500\u2500 MessageInput \u2514\u2500\u2500 DashboardTab (explore.tsx) \u2514\u2500\u2500 ValidationDashboard \u251c\u2500\u2500 MetricsCards \u251c\u2500\u2500 QualityChart \u2514\u2500\u2500 ResponseList",
      "title": "Component Hierarchy"
    },
    { "location": "architecture/components/frontend/#core-components", "text": "", "title": "Core Components" },
    {
      "location": "architecture/components/frontend/#1-chatscreentsx",
      "text": "Main chat interface component with full mobile functionality. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 import React , { useState , useEffect } from 'react' ; import { View , ScrollView , KeyboardAvoidingView , Platform } from 'react-native' ; import { Text , Surface } from 'react-native-paper' ; import { socketService } from '../services/socketService' ; import MessageInput from './MessageInput' ; import AgentStatusBar from './AgentStatusBar' ; export default function ChatScreen () { const [ messages , setMessages ] = useState < Message [] > ([]); const [ isConnected , setIsConnected ] = useState ( false ); const [ activeAgent , setActiveAgent ] = useState < string > ( 'general' ); useEffect (() => { socketService . connect (); socketService . on ( 'connect' , () => setIsConnected ( true )); socketService . on ( 'disconnect' , () => setIsConnected ( false )); socketService . on ( 'message' , handleNewMessage ); socketService . on ( 'agent_selection' , handleAgentSelection ); return () => { socketService . disconnect (); }; }, []); return ( < KeyboardAvoidingView style = {{ flex : 1 }} behavior = { Platform . OS === 'ios' ? 'padding' : 'height' } > < AgentStatusBar activeAgent = { activeAgent } isConnected = { isConnected } /> < ScrollView style = {{ flex : 1 }} > { messages . map (( message ) => ( < MessageBubble key = { message . id } message = { message } /> ))} < /ScrollView> < MessageInput onSendMessage = { handleSendMessage } disabled = { ! isConnected } /> < /KeyboardAvoidingView> ); }",
      "title": "1. ChatScreen.tsx"
    },
    {
      "location": "architecture/components/frontend/#2-validationdashboardtsx",
      "text": "Real-time AI response validation and metrics display. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 import React , { useState , useEffect } from 'react' ; import { ScrollView , RefreshControl } from 'react-native' ; import { Card , Title , Paragraph , ProgressBar } from 'react-native-paper' ; import { socketService } from '../services/socketService' ; export default function ValidationDashboard () { const [ metrics , setMetrics ] = useState < ValidationMetrics | null > ( null ); const [ refreshing , setRefreshing ] = useState ( false ); const onRefresh = useCallback ( async () => { setRefreshing ( true ); await fetchMetrics (); setRefreshing ( false ); }, []); return ( < ScrollView refreshControl = { < RefreshControl refreshing = { refreshing } onRefresh = { onRefresh } /> } > < Card style = {{ margin : 16 }} > < Card . Content > < Title > Response Quality < /Title> < Paragraph > Average quality score < /Paragraph> < ProgressBar progress = { metrics ? . averageQuality || 0 } style = {{ marginTop : 8 }} /> < /Card.Content> < /Card> < Card style = {{ margin : 16 }} > < Card . Content > < Title > Agent Performance < /Title> { metrics ? . agentStats . map (( agent ) => ( < View key = { agent . type } > < Paragraph > { agent . type } : { agent . responseCount } < /Paragraph> < /View> ))} < /Card.Content> < /Card> < /ScrollView> ); }",
      "title": "2. ValidationDashboard.tsx"
    },
    {
      "location": "architecture/components/frontend/#3-messageinputtsx",
      "text": "Native mobile message input with enhanced UX. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 import React , { useState } from 'react' ; import { View , TextInput , TouchableOpacity } from 'react-native' ; import { IconButton , useTheme } from 'react-native-paper' ; import { Haptics } from 'expo-haptics' ; interface MessageInputProps { onSendMessage : ( message : string ) => void ; disabled? : boolean ; } export default function MessageInput ({ onSendMessage , disabled } : MessageInputProps ) { const [ message , setMessage ] = useState ( '' ); const theme = useTheme (); const handleSend = () => { if ( message . trim ()) { Haptics . impactAsync ( Haptics . ImpactFeedbackStyle . Light ); onSendMessage ( message . trim ()); setMessage ( '' ); } }; return ( < View style = {{ flexDirection : 'row' , padding : 16 , backgroundColor : theme.colors.surface , alignItems : 'flex-end' , }} > < TextInput style = {{ flex : 1 , borderWidth : 1 , borderColor : theme.colors.outline , borderRadius : 20 , paddingHorizontal : 16 , paddingVertical : 12 , maxHeight : 100 , backgroundColor : theme.colors.background , }} value = { message } onChangeText = { setMessage } placeholder = \"Type a message...\" multiline editable = { ! disabled } onSubmitEditing = { handleSend } blurOnSubmit = { false } /> < IconButton icon = \"send\" onPress = { handleSend } disabled = { disabled || ! message . trim ()} style = {{ marginLeft : 8 }} /> < /View> ); }",
      "title": "3. MessageInput.tsx"
    },
    { "location": "architecture/components/frontend/#navigation", "text": "", "title": "Navigation" },
    {
      "location": "architecture/components/frontend/#expo-router-file-based-routing",
      "text": "The app uses Expo Router with file-based routing: 1 2 3 4 5 6 7 8 9 10 11 // app/_layout.tsx - Root layout import { Stack } from 'expo-router' ; export default function RootLayout () { return ( < Stack > < Stack . Screen name = \"(tabs)\" options = {{ headerShown : false }} /> < Stack . Screen name = \"+not-found\" /> < /Stack> ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // app/(tabs)/_layout.tsx - Tab navigation import { Tabs } from 'expo-router' ; import { TabBarIcon } from '@/components/navigation/TabBarIcon' ; export default function TabLayout () { return ( < Tabs screenOptions = {{ tabBarActiveTintColor : Colors.light.tint , headerShown : false , }} > < Tabs . Screen name = \"index\" options = {{ title : 'Chat' , tabBarIcon : ({ color , focused }) => ( < TabBarIcon name = { focused ? 'chatbubble' : 'chatbubble-outline' } color = { color } /> ), }} /> < Tabs . Screen name = \"explore\" options = {{ title : 'Dashboard' , tabBarIcon : ({ color , focused }) => ( < TabBarIcon name = { focused ? 'analytics' : 'analytics-outline' } color = { color } /> ), }} /> < /Tabs> ); }",
      "title": "Expo Router File-based Routing"
    },
    { "location": "architecture/components/frontend/#state-management", "text": "", "title": "State Management" },
    {
      "location": "architecture/components/frontend/#react-native-state-with-hooks",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 // Custom hooks for state management export function useSocket () { const [ isConnected , setIsConnected ] = useState ( false ); const [ messages , setMessages ] = useState < Message [] > ([]); const [ activeAgent , setActiveAgent ] = useState < AgentType > ( 'general' ); useEffect (() => { socketService . connect (); const handleConnect = () => setIsConnected ( true ); const handleDisconnect = () => setIsConnected ( false ); const handleMessage = ( message : Message ) => { setMessages ( prev => [... prev , message ]); }; const handleAgentSelection = ( agent : AgentType ) => { setActiveAgent ( agent ); }; socketService . on ( 'connect' , handleConnect ); socketService . on ( 'disconnect' , handleDisconnect ); socketService . on ( 'message' , handleMessage ); socketService . on ( 'agent_selection' , handleAgentSelection ); return () => { socketService . off ( 'connect' , handleConnect ); socketService . off ( 'disconnect' , handleDisconnect ); socketService . off ( 'message' , handleMessage ); socketService . off ( 'agent_selection' , handleAgentSelection ); }; }, []); return { isConnected , messages , activeAgent , sendMessage : socketService.sendMessage , }; }",
      "title": "React Native State with Hooks"
    },
    { "location": "architecture/components/frontend/#styling-and-theming", "text": "", "title": "Styling and Theming" },
    {
      "location": "architecture/components/frontend/#react-native-paper-theming",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // constants/Colors.ts export const Colors = { light : { text : '#11181C' , background : '#fff' , tint : '#0a7ea4' , icon : '#687076' , tabIconDefault : '#687076' , tabIconSelected : '#0a7ea4' , }, dark : { text : '#ECEDEE' , background : '#151718' , tint : '#fff' , icon : '#9BA1A6' , tabIconDefault : '#9BA1A6' , tabIconSelected : '#fff' , }, }; // Theme provider setup import { MD3LightTheme , MD3DarkTheme } from 'react-native-paper' ; export const lightTheme = { ... MD3LightTheme , colors : { ... MD3LightTheme . colors , primary : Colors.light.tint , background : Colors.light.background , surface : '#f8f9fa' , }, }; export const darkTheme = { ... MD3DarkTheme , colors : { ... MD3DarkTheme . colors , primary : Colors.dark.tint , background : Colors.dark.background , surface : '#1e1e1e' , }, };",
      "title": "React Native Paper Theming"
    },
    {
      "location": "architecture/components/frontend/#custom-hook-for-theme",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // hooks/useThemeColor.ts import { useColorScheme } from './useColorScheme' ; import { Colors } from '@/constants/Colors' ; export function useThemeColor ( props : { light? : string ; dark? : string }, colorName : keyof typeof Colors . light & keyof typeof Colors . dark , ) { const theme = useColorScheme () ?? 'light' ; const colorFromProps = props [ theme ]; if ( colorFromProps ) { return colorFromProps ; } else { return Colors [ theme ][ colorName ]; } }",
      "title": "Custom Hook for Theme"
    },
    {
      "location": "architecture/components/frontend/#real-time-communication",
      "text": "",
      "title": "Real-time Communication"
    },
    {
      "location": "architecture/components/frontend/#socketio-service-for-mobile",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 // services/socketService.ts import io , { Socket } from 'socket.io-client' ; import { Message , AgentType , ValidationResult } from '../types' ; class SocketService { private socket : Socket | null = null ; private isConnected = false ; connect () { this . socket = io ( process . env . EXPO_PUBLIC_API_URL || 'http://localhost:5001' , { transports : [ 'websocket' ], timeout : 20000 , }); this . socket . on ( 'connect' , () => { this . isConnected = true ; console . log ( 'Connected to server' ); }); this . socket . on ( 'disconnect' , () => { this . isConnected = false ; console . log ( 'Disconnected from server' ); }); this . socket . on ( 'connect_error' , error => { console . error ( 'Connection error:' , error ); }); } disconnect () { if ( this . socket ) { this . socket . disconnect (); this . socket = null ; this . isConnected = false ; } } sendMessage ( message : string , conversationId? : string ) { if ( this . socket && this . isConnected ) { this . socket . emit ( 'stream_chat' , { message , conversationId }); } } on ( event : string , callback : Function ) { this . socket ? . on ( event , callback ); } off ( event : string , callback? : Function ) { this . socket ? . off ( event , callback ); } // Mobile-specific methods onStreamChunk ( callback : ( chunk : { messageId : string ; content : string }) => void ) { this . socket ? . on ( 'stream_chunk' , callback ); } onValidationResult ( callback : ( result : ValidationResult ) => void ) { this . socket ? . on ( 'validation_result' , callback ); } onAgentSelection ( callback : ( agent : AgentType ) => void ) { this . socket ? . on ( 'agent_selection' , callback ); } } export const socketService = new SocketService ();",
      "title": "Socket.io Service for Mobile"
    },
    { "location": "architecture/components/frontend/#api-integration", "text": "", "title": "API Integration" },
    {
      "location": "architecture/components/frontend/#mobile-optimized-http-client",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 // services/api.ts (mobile-specific) import Constants from 'expo-constants' ; const API_URL = process . env . EXPO_PUBLIC_API_URL || 'http://localhost:5001' ; class ApiService { private async request < T > ( endpoint : string , options : RequestInit = {}) : Promise < T > { const url = ` ${ API_URL }${ endpoint } ` ; const response = await fetch ( url , { ... options , headers : { 'Content-Type' : 'application/json' , ... options . headers , }, }); if ( ! response . ok ) { throw new Error ( `HTTP error! status: ${ response . status } ` ); } return response . json (); } async getValidationMetrics () { return this . request < ValidationMetrics > ( '/api/validation/metrics' ); } async getConversationHistory () { return this . request < Message [] > ( '/api/conversations' ); } async submitFeedback ( messageId : string , rating : number , comment? : string ) { return this . request ( '/api/feedback' , { method : 'POST' , body : JSON.stringify ({ messageId , rating , comment }), }); } } export const apiService = new ApiService ();",
      "title": "Mobile-optimized HTTP Client"
    },
    { "location": "architecture/components/frontend/#typescript-usage", "text": "", "title": "TypeScript Usage" },
    {
      "location": "architecture/components/frontend/#mobile-specific-type-definitions",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 // types/index.ts export interface Message { id : string ; content : string ; role : 'user' | 'assistant' ; timestamp : Date ; conversationId : string ; agentType? : AgentType ; validationScore? : number ; } export interface ValidationMetrics { averageQuality : number ; totalMessages : number ; agentStats : AgentStats []; responseTimeAvg : number ; satisfactionScore : number ; } export interface AgentStats { type : AgentType ; responseCount : number ; averageQuality : number ; averageResponseTime : number ; } export type AgentType = 'general' | 'technical' | 'joke' | 'trivia' | 'gif' | 'hold_agent' ; // Navigation types for Expo Router export type RootTabParamList = { index : undefined ; explore : undefined ; }; // Component prop types export interface ChatScreenProps { conversationId? : string ; } export interface ValidationDashboardProps { refreshInterval? : number ; }",
      "title": "Mobile-specific Type Definitions"
    },
    {
      "location": "architecture/components/frontend/#development-workflow",
      "text": "",
      "title": "Development Workflow"
    },
    {
      "location": "architecture/components/frontend/#available-scripts",
      "text": "1 2 3 4 5 6 7 8 9 10 { \"scripts\" : { \"start\" : \"expo start\" , \"android\" : \"expo start --android\" , \"ios\" : \"expo start --ios\" , \"web\" : \"expo start --web\" , \"lint\" : \"expo lint\" , \"reset-project\" : \"node ./scripts/reset-project.js\" } }",
      "title": "Available Scripts"
    },
    {
      "location": "architecture/components/frontend/#environment-configuration",
      "text": "1 2 3 4 5 # .env (development) EXPO_PUBLIC_API_URL = http://localhost:5001 # .env.production EXPO_PUBLIC_API_URL = https://your-production-api.com",
      "title": "Environment Configuration"
    },
    {
      "location": "architecture/components/frontend/#development-tools",
      "text": "Expo CLI - Development server and tools Expo Go - Mobile app for testing React Native Debugger - Debugging tool Flipper - Advanced debugging EAS Build - Cloud build service",
      "title": "Development Tools"
    },
    {
      "location": "architecture/components/frontend/#performance-optimization",
      "text": "",
      "title": "Performance Optimization"
    },
    {
      "location": "architecture/components/frontend/#mobile-specific-optimizations",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 // Lazy loading for heavy components const ValidationDashboard = React . lazy (() => import ( '../components/ValidationDashboard' )); // Memoization for expensive operations const MessageList = React . memo (({ messages }) => { return ( < FlatList data = { messages } renderItem = {({ item }) => < MessageBubble message = { item } /> } keyExtractor = {( item ) => item . id } getItemLayout = {( data , index ) => ({ length : ITEM_HEIGHT , offset : ITEM_HEIGHT * index , index , })} removeClippedSubviews = { true } maxToRenderPerBatch = { 10 } windowSize = { 10 } /> ); }); // Image optimization import { Image } from 'expo-image' ; const OptimizedImage = ({ source , ... props }) => ( < Image source = { source } contentFit = \"cover\" transition = { 200 } {... props } /> );",
      "title": "Mobile-specific Optimizations"
    },
    { "location": "architecture/components/frontend/#testing", "text": "", "title": "Testing" },
    {
      "location": "architecture/components/frontend/#mobile-testing-strategy",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // __tests__/ChatScreen.test.tsx import React from 'react' ; import { render , fireEvent , waitFor } from '@testing-library/react-native' ; import ChatScreen from '../components/ChatScreen' ; import { socketService } from '../services/socketService' ; // Mock socket service jest . mock ( '../services/socketService' ); describe ( 'ChatScreen' , () => { it ( 'renders correctly' , () => { const { getByPlaceholderText } = render ( < ChatScreen /> ); expect ( getByPlaceholderText ( 'Type a message...' )). toBeTruthy (); }); it ( 'sends message when button is pressed' , async () => { const { getByPlaceholderText , getByRole } = render ( < ChatScreen /> ); const input = getByPlaceholderText ( 'Type a message...' ); const sendButton = getByRole ( 'button' ); fireEvent . changeText ( input , 'Hello' ); fireEvent . press ( sendButton ); await waitFor (() => { expect ( socketService . sendMessage ). toHaveBeenCalledWith ( 'Hello' , undefined ); }); }); });",
      "title": "Mobile Testing Strategy"
    },
    {
      "location": "architecture/components/frontend/#testing-tools",
      "text": "1 2 3 4 5 6 7 8 { \"devDependencies\" : { \"@testing-library/react-native\" : \"^12.0.0\" , \"@testing-library/jest-native\" : \"^5.0.0\" , \"jest\" : \"^29.0.0\" , \"jest-expo\" : \"^51.0.0\" } } This mobile frontend guide provides comprehensive documentation for the React Native/Expo application, covering all aspects of mobile development, from component architecture to testing strategies.",
      "title": "Testing Tools"
    },
    {
      "location": "architecture/components/message-queue/",
      "text": "Message Queue System \u00b6 A flexible and scalable message queue system for the backend that supports both local testing (in-memory) and distributed deployments (Redis). Overview \u00b6 The message queue system provides: Flexible Backend : Switch between in-memory (local testing) and Redis (distributed) providers Priority Queuing : Messages processed by priority (1-10, higher = more important) Delayed Messages : Schedule messages for future processing Retry Logic : Automatic retry with exponential backoff Dead Letter Queue : Handle permanently failed messages Real-time Stats : Monitor queue performance and health Type Safety : Full TypeScript support with typed payloads Quick Start \u00b6 Environment Configuration \u00b6 Set the message queue provider in your .env file: 1 2 3 4 5 6 # Use in-memory provider (default - good for local testing) MESSAGE_QUEUE_PROVIDER = memory # Use Redis provider (for distributed systems) MESSAGE_QUEUE_PROVIDER = redis REDIS_URL = redis://localhost:6379 Basic Usage \u00b6 The system is automatically initialized when the server starts. You can interact with it through: Programmatically - Using the QueueService in your code REST API - Via HTTP endpoints for monitoring and testing Socket Events - Automatic processing of queued messages API Endpoints \u00b6 Health & Monitoring \u00b6 1 2 3 4 5 6 7 8 9 # Check queue health GET /api/queue/health # Get queue statistics GET /api/queue/stats GET /api/queue/stats?queueName = chat_messages # Get queue size GET /api/queue/size/chat_messages Message Operations \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Enqueue a chat message POST /api/queue/enqueue/chat { \"userId\" : \"user123\" , \"conversationId\" : \"conv456\" , \"message\" : \"Hello world!\" , \"priority\" : 7 } # Enqueue a proactive action POST /api/queue/enqueue/proactive { \"actionType\" : \"greeting\" , \"agentType\" : \"general\" , \"message\" : \"Welcome!\" , \"userId\" : \"user123\" , \"conversationId\" : \"conv456\" , \"timing\" : \"immediate\" , \"priority\" : 8 } # Demonstrate queue features POST /api/queue/demo { \"userId\" : \"user123\" , \"conversationId\" : \"conv456\" } Management Operations \u00b6 1 2 # Purge a queue (remove all messages) DELETE /api/queue/purge/chat_messages Queue Types \u00b6 The system supports these pre-defined queues: chat_messages - User chat messages awaiting processing agent_responses - AI agent responses ready to send proactive_actions - Proactive actions triggered by goal-seeking stream_chunks - Real-time streaming message chunks status_updates - System status and agent state updates validation_requests - Message validation requests goal_seeking_updates - Goal-seeking system state changes conversation_events - Conversation lifecycle events Message Priority System \u00b6 Messages are processed by priority (1-10): Priority 10 : Critical system messages Priority 9 : High-priority proactive actions Priority 8 : Stream chunks (real-time feel) Priority 7 : Proactive actions Priority 6 : Agent responses Priority 5 : Normal chat messages (default) Priority 1-4 : Low priority background tasks Programmatic Usage \u00b6 Using QueueService \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { getQueueService } from '../messageQueue/queueService' ; // Get the queue service instance const queueService = getQueueService (); // Enqueue a chat message const messageId = await queueService . enqueueChatMessage ( 'user123' , // userId 'conv456' , // conversationId 'Hello!' , // message undefined , // forceAgent (optional) 7 , // priority (optional) ); // Enqueue a delayed proactive action const actionId = await queueService . enqueueProactiveAction ( 'reminder' , // actionType 'general' , // agentType \"Don't forget!\" , // message 'user123' , // userId 'conv456' , // conversationId 'delayed' , // timing 5000 , // delayMs (5 seconds) 8 , // priority ); // Check queue stats const stats = await queueService . getQueueStats (); console . log ( `Total messages processed: ${ stats . totalMessages } ` ); Creating Custom Queue Messages \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { createMessageQueue , QUEUE_NAMES } from '../messageQueue/messageQueue' ; const queue = createMessageQueue (); // Create a custom message const customMessage = queue . createMessage ( 'custom_event' , { eventType : 'user_login' , userId : 'user123' , timestamp : new Date (), }, { priority : 6 , maxRetries : 5 , userId : 'user123' , }, ); // Enqueue the message await queue . enqueue ( 'custom_queue' , customMessage ); Provider Comparison \u00b6 In-Memory Provider \u00b6 Best for : Local development, testing, single-instance deployments Pros : No external dependencies, fast, simple setup Cons : Messages lost on restart, no persistence, single-instance only Redis Provider \u00b6 Best for : Production, distributed systems, high availability Pros : Persistent, scalable, supports multiple instances Cons : Requires Redis server, additional complexity Configuration Examples \u00b6 Local Development Setup \u00b6 1 2 # .env file MESSAGE_QUEUE_PROVIDER = memory Production Redis Setup \u00b6 1 2 3 4 5 6 7 8 9 # .env file MESSAGE_QUEUE_PROVIDER = redis REDIS_URL = redis://your-redis-server:6379 # For Redis with auth REDIS_URL = redis://:password@your-redis-server:6379 # For Redis Cluster REDIS_URL = redis://node1:6379,redis://node2:6379,redis://node3:6379 Docker Compose Example \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 version : '3.8' services : app : build : . environment : - MESSAGE_QUEUE_PROVIDER=redis - REDIS_URL=redis://redis:6379 depends_on : - redis redis : image : redis:7-alpine ports : - '6379:6379' volumes : - redis_data:/data volumes : redis_data : Monitoring & Observability \u00b6 Health Checks \u00b6 1 2 3 4 5 6 7 8 9 # Basic health check curl http://localhost:5001/api/queue/health # Response { \"healthy\" : true, \"provider\" : \"memory\" , \"timestamp\" : \"2025-01-06T20:10:00.000Z\" } Queue Statistics \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Get all queue stats curl http://localhost:5001/api/queue/stats # Response { \"totalMessages\" : 150 , \"pendingMessages\" : 5 , \"processingMessages\" : 2 , \"completedMessages\" : 140 , \"failedMessages\" : 3 , \"avgProcessingTime\" : 45 .2, \"queues\" : [ \"chat_messages\" , \"agent_responses\" , \"proactive_actions\" ] , \"provider\" : \"memory\" , \"healthy\" : true } Real-time Socket Events \u00b6 The system emits processed messages via Socket.IO: 1 2 3 4 5 6 7 8 9 10 11 12 // Frontend - Listen for processed queue events socket . on ( 'queue_processed_chat' , data => { console . log ( 'Chat message processed:' , data ); }); socket . on ( 'queue_processed_agent_response' , data => { console . log ( 'Agent response processed:' , data ); }); socket . on ( 'queue_processed_proactive_action' , data => { console . log ( 'Proactive action processed:' , data ); }); Error Handling \u00b6 Retry Logic \u00b6 Messages automatically retry with exponential backoff: Attempt 1 : Immediate Attempt 2 : 1 second delay Attempt 3 : 2 second delay Attempt 4 : 4 second delay (capped at 30 seconds) Dead Letter Queue \u00b6 Failed messages emit a deadLetter event: 1 2 3 4 5 6 7 queueService . messageQueue . on ( 'deadLetter' , ({ queueName , message , error }) => { console . error ( `Dead letter in ${ queueName } :` , message . id , error ); // Send to monitoring system // Log to file // Send alert }); Testing \u00b6 Unit Tests \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { createInMemoryQueue } from '../messageQueue/messageQueue' ; describe ( 'Message Queue' , () => { test ( 'should process messages by priority' , async () => { const queue = createInMemoryQueue (); await queue . connect (); // Test priority ordering const highPriorityMsg = queue . createMessage ( 'test' , { data : 'high' }, { priority : 9 }); const lowPriorityMsg = queue . createMessage ( 'test' , { data : 'low' }, { priority : 3 }); await queue . enqueue ( 'test_queue' , lowPriorityMsg ); await queue . enqueue ( 'test_queue' , highPriorityMsg ); const firstMsg = await queue . dequeue ( 'test_queue' ); expect ( firstMsg ? . payload . data ). toBe ( 'high' ); }); }); Integration Tests \u00b6 1 2 3 4 5 6 7 # Test the REST API curl -X POST http://localhost:5001/api/queue/demo \\ -H \"Content-Type: application/json\" \\ -d '{\"userId\": \"test\", \"conversationId\": \"test\"}' # Check the results curl http://localhost:5001/api/queue/stats Best Practices \u00b6 Queue Design \u00b6 Use appropriate priorities (don't overuse high priority) Keep message payloads small and focused Use delayed messages for scheduled actions Set appropriate retry limits Error Handling \u00b6 Always handle dead letter queue events Log queue statistics regularly Monitor queue sizes to prevent backlog Set up alerts for queue health Performance \u00b6 Use Redis for high-throughput scenarios Monitor average processing times Scale consumers horizontally when needed Use message batching for bulk operations Security \u00b6 Validate message payloads Sanitize user data before queueing Use authentication for queue management endpoints Monitor for message queue flooding Troubleshooting \u00b6 Common Issues \u00b6 Queue not processing messages: Check if queue service is initialized Verify subscribers are set up Check for errors in message handlers High memory usage with in-memory provider: Check queue sizes with /api/queue/stats Purge unnecessary queues Consider switching to Redis Redis connection issues: Verify Redis server is running Check REDIS_URL configuration Ensure network connectivity Messages failing repeatedly: Check dead letter queue events Verify message handler logic Review retry configuration Debugging Commands \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 # Check queue health curl http://localhost:5001/api/queue/health # View queue statistics curl http://localhost:5001/api/queue/stats # Check specific queue size curl http://localhost:5001/api/queue/size/chat_messages # Test with demo messages curl -X POST http://localhost:5001/api/queue/demo \\ -H \"Content-Type: application/json\" \\ -d '{\"userId\": \"debug\", \"conversationId\": \"debug\"}' Future Enhancements \u00b6 Planned features: AWS SQS provider Message encryption Queue persistence for in-memory provider Message deduplication Priority queue partitioning Advanced routing rules Graphical queue monitoring dashboard",
      "title": "Message Queue"
    },
    {
      "location": "architecture/components/message-queue/#message-queue-system",
      "text": "A flexible and scalable message queue system for the backend that supports both local testing (in-memory) and distributed deployments (Redis).",
      "title": "Message Queue System"
    },
    {
      "location": "architecture/components/message-queue/#overview",
      "text": "The message queue system provides: Flexible Backend : Switch between in-memory (local testing) and Redis (distributed) providers Priority Queuing : Messages processed by priority (1-10, higher = more important) Delayed Messages : Schedule messages for future processing Retry Logic : Automatic retry with exponential backoff Dead Letter Queue : Handle permanently failed messages Real-time Stats : Monitor queue performance and health Type Safety : Full TypeScript support with typed payloads",
      "title": "Overview"
    },
    { "location": "architecture/components/message-queue/#quick-start", "text": "", "title": "Quick Start" },
    {
      "location": "architecture/components/message-queue/#environment-configuration",
      "text": "Set the message queue provider in your .env file: 1 2 3 4 5 6 # Use in-memory provider (default - good for local testing) MESSAGE_QUEUE_PROVIDER = memory # Use Redis provider (for distributed systems) MESSAGE_QUEUE_PROVIDER = redis REDIS_URL = redis://localhost:6379",
      "title": "Environment Configuration"
    },
    {
      "location": "architecture/components/message-queue/#basic-usage",
      "text": "The system is automatically initialized when the server starts. You can interact with it through: Programmatically - Using the QueueService in your code REST API - Via HTTP endpoints for monitoring and testing Socket Events - Automatic processing of queued messages",
      "title": "Basic Usage"
    },
    { "location": "architecture/components/message-queue/#api-endpoints", "text": "", "title": "API Endpoints" },
    {
      "location": "architecture/components/message-queue/#health-monitoring",
      "text": "1 2 3 4 5 6 7 8 9 # Check queue health GET /api/queue/health # Get queue statistics GET /api/queue/stats GET /api/queue/stats?queueName = chat_messages # Get queue size GET /api/queue/size/chat_messages",
      "title": "Health &amp; Monitoring"
    },
    {
      "location": "architecture/components/message-queue/#message-operations",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 # Enqueue a chat message POST /api/queue/enqueue/chat { \"userId\" : \"user123\" , \"conversationId\" : \"conv456\" , \"message\" : \"Hello world!\" , \"priority\" : 7 } # Enqueue a proactive action POST /api/queue/enqueue/proactive { \"actionType\" : \"greeting\" , \"agentType\" : \"general\" , \"message\" : \"Welcome!\" , \"userId\" : \"user123\" , \"conversationId\" : \"conv456\" , \"timing\" : \"immediate\" , \"priority\" : 8 } # Demonstrate queue features POST /api/queue/demo { \"userId\" : \"user123\" , \"conversationId\" : \"conv456\" }",
      "title": "Message Operations"
    },
    {
      "location": "architecture/components/message-queue/#management-operations",
      "text": "1 2 # Purge a queue (remove all messages) DELETE /api/queue/purge/chat_messages",
      "title": "Management Operations"
    },
    {
      "location": "architecture/components/message-queue/#queue-types",
      "text": "The system supports these pre-defined queues: chat_messages - User chat messages awaiting processing agent_responses - AI agent responses ready to send proactive_actions - Proactive actions triggered by goal-seeking stream_chunks - Real-time streaming message chunks status_updates - System status and agent state updates validation_requests - Message validation requests goal_seeking_updates - Goal-seeking system state changes conversation_events - Conversation lifecycle events",
      "title": "Queue Types"
    },
    {
      "location": "architecture/components/message-queue/#message-priority-system",
      "text": "Messages are processed by priority (1-10): Priority 10 : Critical system messages Priority 9 : High-priority proactive actions Priority 8 : Stream chunks (real-time feel) Priority 7 : Proactive actions Priority 6 : Agent responses Priority 5 : Normal chat messages (default) Priority 1-4 : Low priority background tasks",
      "title": "Message Priority System"
    },
    {
      "location": "architecture/components/message-queue/#programmatic-usage",
      "text": "",
      "title": "Programmatic Usage"
    },
    {
      "location": "architecture/components/message-queue/#using-queueservice",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import { getQueueService } from '../messageQueue/queueService' ; // Get the queue service instance const queueService = getQueueService (); // Enqueue a chat message const messageId = await queueService . enqueueChatMessage ( 'user123' , // userId 'conv456' , // conversationId 'Hello!' , // message undefined , // forceAgent (optional) 7 , // priority (optional) ); // Enqueue a delayed proactive action const actionId = await queueService . enqueueProactiveAction ( 'reminder' , // actionType 'general' , // agentType \"Don't forget!\" , // message 'user123' , // userId 'conv456' , // conversationId 'delayed' , // timing 5000 , // delayMs (5 seconds) 8 , // priority ); // Check queue stats const stats = await queueService . getQueueStats (); console . log ( `Total messages processed: ${ stats . totalMessages } ` );",
      "title": "Using QueueService"
    },
    {
      "location": "architecture/components/message-queue/#creating-custom-queue-messages",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { createMessageQueue , QUEUE_NAMES } from '../messageQueue/messageQueue' ; const queue = createMessageQueue (); // Create a custom message const customMessage = queue . createMessage ( 'custom_event' , { eventType : 'user_login' , userId : 'user123' , timestamp : new Date (), }, { priority : 6 , maxRetries : 5 , userId : 'user123' , }, ); // Enqueue the message await queue . enqueue ( 'custom_queue' , customMessage );",
      "title": "Creating Custom Queue Messages"
    },
    {
      "location": "architecture/components/message-queue/#provider-comparison",
      "text": "",
      "title": "Provider Comparison"
    },
    {
      "location": "architecture/components/message-queue/#in-memory-provider",
      "text": "Best for : Local development, testing, single-instance deployments Pros : No external dependencies, fast, simple setup Cons : Messages lost on restart, no persistence, single-instance only",
      "title": "In-Memory Provider"
    },
    {
      "location": "architecture/components/message-queue/#redis-provider",
      "text": "Best for : Production, distributed systems, high availability Pros : Persistent, scalable, supports multiple instances Cons : Requires Redis server, additional complexity",
      "title": "Redis Provider"
    },
    {
      "location": "architecture/components/message-queue/#configuration-examples",
      "text": "",
      "title": "Configuration Examples"
    },
    {
      "location": "architecture/components/message-queue/#local-development-setup",
      "text": "1 2 # .env file MESSAGE_QUEUE_PROVIDER = memory",
      "title": "Local Development Setup"
    },
    {
      "location": "architecture/components/message-queue/#production-redis-setup",
      "text": "1 2 3 4 5 6 7 8 9 # .env file MESSAGE_QUEUE_PROVIDER = redis REDIS_URL = redis://your-redis-server:6379 # For Redis with auth REDIS_URL = redis://:password@your-redis-server:6379 # For Redis Cluster REDIS_URL = redis://node1:6379,redis://node2:6379,redis://node3:6379",
      "title": "Production Redis Setup"
    },
    {
      "location": "architecture/components/message-queue/#docker-compose-example",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 version : '3.8' services : app : build : . environment : - MESSAGE_QUEUE_PROVIDER=redis - REDIS_URL=redis://redis:6379 depends_on : - redis redis : image : redis:7-alpine ports : - '6379:6379' volumes : - redis_data:/data volumes : redis_data :",
      "title": "Docker Compose Example"
    },
    {
      "location": "architecture/components/message-queue/#monitoring-observability",
      "text": "",
      "title": "Monitoring &amp; Observability"
    },
    {
      "location": "architecture/components/message-queue/#health-checks",
      "text": "1 2 3 4 5 6 7 8 9 # Basic health check curl http://localhost:5001/api/queue/health # Response { \"healthy\" : true, \"provider\" : \"memory\" , \"timestamp\" : \"2025-01-06T20:10:00.000Z\" }",
      "title": "Health Checks"
    },
    {
      "location": "architecture/components/message-queue/#queue-statistics",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # Get all queue stats curl http://localhost:5001/api/queue/stats # Response { \"totalMessages\" : 150 , \"pendingMessages\" : 5 , \"processingMessages\" : 2 , \"completedMessages\" : 140 , \"failedMessages\" : 3 , \"avgProcessingTime\" : 45 .2, \"queues\" : [ \"chat_messages\" , \"agent_responses\" , \"proactive_actions\" ] , \"provider\" : \"memory\" , \"healthy\" : true }",
      "title": "Queue Statistics"
    },
    {
      "location": "architecture/components/message-queue/#real-time-socket-events",
      "text": "The system emits processed messages via Socket.IO: 1 2 3 4 5 6 7 8 9 10 11 12 // Frontend - Listen for processed queue events socket . on ( 'queue_processed_chat' , data => { console . log ( 'Chat message processed:' , data ); }); socket . on ( 'queue_processed_agent_response' , data => { console . log ( 'Agent response processed:' , data ); }); socket . on ( 'queue_processed_proactive_action' , data => { console . log ( 'Proactive action processed:' , data ); });",
      "title": "Real-time Socket Events"
    },
    { "location": "architecture/components/message-queue/#error-handling", "text": "", "title": "Error Handling" },
    {
      "location": "architecture/components/message-queue/#retry-logic",
      "text": "Messages automatically retry with exponential backoff: Attempt 1 : Immediate Attempt 2 : 1 second delay Attempt 3 : 2 second delay Attempt 4 : 4 second delay (capped at 30 seconds)",
      "title": "Retry Logic"
    },
    {
      "location": "architecture/components/message-queue/#dead-letter-queue",
      "text": "Failed messages emit a deadLetter event: 1 2 3 4 5 6 7 queueService . messageQueue . on ( 'deadLetter' , ({ queueName , message , error }) => { console . error ( `Dead letter in ${ queueName } :` , message . id , error ); // Send to monitoring system // Log to file // Send alert });",
      "title": "Dead Letter Queue"
    },
    { "location": "architecture/components/message-queue/#testing", "text": "", "title": "Testing" },
    {
      "location": "architecture/components/message-queue/#unit-tests",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import { createInMemoryQueue } from '../messageQueue/messageQueue' ; describe ( 'Message Queue' , () => { test ( 'should process messages by priority' , async () => { const queue = createInMemoryQueue (); await queue . connect (); // Test priority ordering const highPriorityMsg = queue . createMessage ( 'test' , { data : 'high' }, { priority : 9 }); const lowPriorityMsg = queue . createMessage ( 'test' , { data : 'low' }, { priority : 3 }); await queue . enqueue ( 'test_queue' , lowPriorityMsg ); await queue . enqueue ( 'test_queue' , highPriorityMsg ); const firstMsg = await queue . dequeue ( 'test_queue' ); expect ( firstMsg ? . payload . data ). toBe ( 'high' ); }); });",
      "title": "Unit Tests"
    },
    {
      "location": "architecture/components/message-queue/#integration-tests",
      "text": "1 2 3 4 5 6 7 # Test the REST API curl -X POST http://localhost:5001/api/queue/demo \\ -H \"Content-Type: application/json\" \\ -d '{\"userId\": \"test\", \"conversationId\": \"test\"}' # Check the results curl http://localhost:5001/api/queue/stats",
      "title": "Integration Tests"
    },
    { "location": "architecture/components/message-queue/#best-practices", "text": "", "title": "Best Practices" },
    {
      "location": "architecture/components/message-queue/#queue-design",
      "text": "Use appropriate priorities (don't overuse high priority) Keep message payloads small and focused Use delayed messages for scheduled actions Set appropriate retry limits",
      "title": "Queue Design"
    },
    {
      "location": "architecture/components/message-queue/#error-handling_1",
      "text": "Always handle dead letter queue events Log queue statistics regularly Monitor queue sizes to prevent backlog Set up alerts for queue health",
      "title": "Error Handling"
    },
    {
      "location": "architecture/components/message-queue/#performance",
      "text": "Use Redis for high-throughput scenarios Monitor average processing times Scale consumers horizontally when needed Use message batching for bulk operations",
      "title": "Performance"
    },
    {
      "location": "architecture/components/message-queue/#security",
      "text": "Validate message payloads Sanitize user data before queueing Use authentication for queue management endpoints Monitor for message queue flooding",
      "title": "Security"
    },
    { "location": "architecture/components/message-queue/#troubleshooting", "text": "", "title": "Troubleshooting" },
    {
      "location": "architecture/components/message-queue/#common-issues",
      "text": "Queue not processing messages: Check if queue service is initialized Verify subscribers are set up Check for errors in message handlers High memory usage with in-memory provider: Check queue sizes with /api/queue/stats Purge unnecessary queues Consider switching to Redis Redis connection issues: Verify Redis server is running Check REDIS_URL configuration Ensure network connectivity Messages failing repeatedly: Check dead letter queue events Verify message handler logic Review retry configuration",
      "title": "Common Issues"
    },
    {
      "location": "architecture/components/message-queue/#debugging-commands",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 # Check queue health curl http://localhost:5001/api/queue/health # View queue statistics curl http://localhost:5001/api/queue/stats # Check specific queue size curl http://localhost:5001/api/queue/size/chat_messages # Test with demo messages curl -X POST http://localhost:5001/api/queue/demo \\ -H \"Content-Type: application/json\" \\ -d '{\"userId\": \"debug\", \"conversationId\": \"debug\"}'",
      "title": "Debugging Commands"
    },
    {
      "location": "architecture/components/message-queue/#future-enhancements",
      "text": "Planned features: AWS SQS provider Message encryption Queue persistence for in-memory provider Message deduplication Priority queue partitioning Advanced routing rules Graphical queue monitoring dashboard",
      "title": "Future Enhancements"
    },
    {
      "location": "architecture/components/rag-system/",
      "text": "RAG (Retrieval-Augmented Generation) System Documentation \u00b6 Overview \u00b6 The RAG system provides curated, high-quality content for entertainment agents, ensuring consistent and reliable responses even in demo mode without OpenAI API keys. This system combines intelligent content retrieval with quality-rated entertainment content. Architecture \u00b6 Core Components \u00b6 RAGService - Main service class managing content database and search ContentItem - Individual content pieces (jokes, trivia, GIFs) SearchQuery - Query interface for content retrieval SearchResult - Scored search results with relevance metrics Content Database \u00b6 Current Content Statistics \u00b6 10 Premium Jokes (Dad jokes, tech humor, story jokes) 10 Fascinating Trivia Facts (Science, animals, space, history) 10 Curated GIFs (Reactions, emotions, celebrations) Quality Ratings : All content rated 4-5 stars 15+ Categories for organized content discovery 100+ Search Tags for intelligent content matching Content Structure \u00b6 1 2 3 4 5 6 7 8 9 interface ContentItem { id : string ; // Unique identifier type : 'joke' | 'trivia' | 'gif' ; // Content type content : string ; // Main content (joke text, fact, GIF URL) category? : string ; // Content category tags : string []; // Searchable tags rating? : number ; // Quality rating (1-5) metadata? : any ; // Additional data (alt text, descriptions) } Content Categories \u00b6 Jokes \u00b6 dad_joke - Classic dad humor and puns tech_joke - Programming and technology humor story_joke - Narrative-style jokes Trivia \u00b6 animals - Animal facts and biology space - Astronomy and space exploration science - Scientific discoveries and phenomena history - Historical facts and events food - Food science and culinary facts human_body - Human biology and health mathematics - Mathematical concepts and paradoxes GIFs \u00b6 funny - General humor and comedy cute - Adorable and heartwarming content excited - Celebration and joy reactions surprised - Shock and amazement reactions applause - Approval and congratulations party - Celebration and festive content thumbs_up - Positive approval facepalm - Disappointment reactions shrug - Confusion and uncertainty mind_blown - Astonishment reactions API Reference \u00b6 RAGService Methods \u00b6 search(query: SearchQuery): SearchResult[] \u00b6 Searches for content based on query parameters. Parameters: 1 2 3 4 5 6 7 interface SearchQuery { text : string ; // Search text type ?: 'joke' | 'trivia' | 'gif' ; // Content type filter category? : string ; // Category filter tags? : string []; // Tag filters limit? : number ; // Result limit (default: 10) } Returns: Array of SearchResult objects with relevance scores. searchForAgent(agentType: AgentType, query: string, fallbackToRandom?: boolean): ContentItem | null \u00b6 Simplified search for specific agent types. Parameters: agentType - Agent requesting content ('joke', 'trivia', 'gif') query - User's message for context fallbackToRandom - Whether to return random content if no matches (default: true) getRandomContent(type: 'joke' | 'trivia' | 'gif', category?: string): ContentItem | null \u00b6 Retrieves random content of specified type. addContent(item: ContentItem): void \u00b6 Dynamically adds new content to the database. getStats(): { [type: string]: number } \u00b6 Returns content statistics by type. getTopRated(type?: string, limit?: number): ContentItem[] \u00b6 Gets highest-rated content, optionally filtered by type. Search Algorithm \u00b6 The RAG system uses intelligent relevance scoring: Exact Phrase Match (0.8 points) - Direct content matches Tag Matching (0.3 points per tag) - Contextual tag alignment Category Matching (0.2 points) - Category relevance Content Keywords (0.1 points per word) - General content relevance Quality Boost (up to 0.1 points) - Based on content rating Minimum Threshold: 0.1 relevance score required for results. Integration with Agents \u00b6 Entertainment Agent Integration \u00b6 Each entertainment agent uses RAG for consistent content delivery: 1 2 3 4 5 6 7 8 // Example: Joke Master using RAG const ragContent = ragService . searchForAgent ( 'joke' , userMessage , true ); if ( ragContent ) { return ` ${ ragContent . content } \ud83d\ude04 \ud83c\udfad *Learning from your reaction...* \ud83d\udcda *From curated joke collection*` ; } Demo Mode Enhancement \u00b6 RAG provides reliable content when OpenAI API is unavailable: Consistent Quality - Pre-curated, rated content No API Dependencies - Works offline Contextual Relevance - Smart search matches user intent Professional Experience - Enterprise-grade content delivery Content Management \u00b6 Adding New Content \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // Add a new joke ragService . addContent ({ id : 'joke_011' , type : 'joke' , content : \"Why don't programmers like nature? It has too many bugs!\" , category : 'tech_joke' , tags : [ 'programming' , 'tech' , 'bugs' , 'nature' , 'pun' ], rating : 4 , }); // Add a new trivia fact ragService . addContent ({ id : 'trivia_011' , type : 'trivia' , content : 'Did you know that butterflies taste with their feet? They have chemoreceptors on their feet that help them identify suitable host plants!' , category : 'animals' , tags : [ 'butterflies' , 'insects' , 'taste' , 'biology' , 'nature' ], rating : 5 , }); // Add a new GIF ragService . addContent ({ id : 'gif_011' , type : 'gif' , content : 'https://media.giphy.com/media/example123/giphy.gif' , category : 'celebration' , tags : [ 'celebrate' , 'happy' , 'success' , 'achievement' , 'joy' ], rating : 4 , metadata : { description : 'Victory celebration dance' , alt : 'Person celebrating with victory dance' , }, }); Content Guidelines \u00b6 Quality Standards \u00b6 Rating 4-5 : Only high-quality, tested content Family Friendly : All content appropriate for general audiences Engaging : Content should entertain and delight users Accurate : Trivia facts must be factually correct Accessible : GIFs should include alt text and descriptions Tag Strategy \u00b6 Descriptive Tags : Clear, searchable keywords Multiple Contexts : Include various relevant tags Consistent Naming : Use standardized tag formats Semantic Grouping : Related concepts should share tags Performance Monitoring \u00b6 Available Metrics \u00b6 1 2 3 4 5 6 7 8 9 // Get content statistics const stats = ragService . getStats (); // Returns: { joke: 10, trivia: 10, gif: 10 } // Get top-rated content const topJokes = ragService . getTopRated ( 'joke' , 5 ); // Search performance logging // Automatically logs search queries and result counts Usage Analytics \u00b6 The system automatically logs: Search queries and result counts Content relevance scores Agent usage patterns Content performance metrics Best Practices \u00b6 For Developers \u00b6 Always Provide Fallback : Use fallbackToRandom: true for agent searches Cache Frequently Used Content : Store popular items for quick access Monitor Search Performance : Review logs for optimization opportunities Test Content Quality : Validate new content before adding Update Regularly : Keep content fresh and relevant For Content Creators \u00b6 Write Clear Content : Ensure jokes/facts are easy to understand Use Descriptive Tags : Include all relevant keywords Rate Honestly : Use 1-5 scale based on entertainment value Test with Users : Validate content with target audience Include Metadata : Provide context and accessibility information Troubleshooting \u00b6 Common Issues \u00b6 No Search Results: Check minimum relevance threshold (0.1) Verify tag spelling and categories Use broader search terms Poor Content Relevance: Review and improve tag assignments Add more contextual tags Consider content categorization Performance Issues: Monitor database size (current: 30 items) Consider search result limits Review complex query patterns Debug Mode \u00b6 Enable detailed logging: 1 2 // Search logs include query details and result counts // Check console for: \"\ud83d\udd0d RAG Search: 'query' found X results\" Future Enhancements \u00b6 Planned Features \u00b6 Vector Embeddings - Semantic search capabilities Machine Learning - Personalized content recommendations Content Analytics - Detailed usage and performance metrics Dynamic Learning - Content rating based on user reactions External Integration - API connections to content services Advanced Filtering - Complex query capabilities Content Validation - Automated quality checking A/B Testing - Content performance comparison Scalability Considerations \u00b6 Database Growth : Current in-memory storage suitable up to ~1000 items Search Performance : O(n) search acceptable for current scale Content Expansion : Easy addition of new content types Multi-language Support : Framework ready for localization Contributing \u00b6 Adding Content Types \u00b6 Update ContentItem type definition Add new categories and tags Update search algorithms if needed Add validation rules Update documentation Content Submission Process \u00b6 Create content following quality guidelines Add appropriate tags and ratings Test with multiple search queries Submit for review and validation Add to production database This RAG system provides a robust foundation for reliable, high-quality entertainment content that enhances the customer service experience while maintaining professional standards.",
      "title": "RAG System"
    },
    {
      "location": "architecture/components/rag-system/#rag-retrieval-augmented-generation-system-documentation",
      "text": "",
      "title": "RAG (Retrieval-Augmented Generation) System Documentation"
    },
    {
      "location": "architecture/components/rag-system/#overview",
      "text": "The RAG system provides curated, high-quality content for entertainment agents, ensuring consistent and reliable responses even in demo mode without OpenAI API keys. This system combines intelligent content retrieval with quality-rated entertainment content.",
      "title": "Overview"
    },
    { "location": "architecture/components/rag-system/#architecture", "text": "", "title": "Architecture" },
    {
      "location": "architecture/components/rag-system/#core-components",
      "text": "RAGService - Main service class managing content database and search ContentItem - Individual content pieces (jokes, trivia, GIFs) SearchQuery - Query interface for content retrieval SearchResult - Scored search results with relevance metrics",
      "title": "Core Components"
    },
    { "location": "architecture/components/rag-system/#content-database", "text": "", "title": "Content Database" },
    {
      "location": "architecture/components/rag-system/#current-content-statistics",
      "text": "10 Premium Jokes (Dad jokes, tech humor, story jokes) 10 Fascinating Trivia Facts (Science, animals, space, history) 10 Curated GIFs (Reactions, emotions, celebrations) Quality Ratings : All content rated 4-5 stars 15+ Categories for organized content discovery 100+ Search Tags for intelligent content matching",
      "title": "Current Content Statistics"
    },
    {
      "location": "architecture/components/rag-system/#content-structure",
      "text": "1 2 3 4 5 6 7 8 9 interface ContentItem { id : string ; // Unique identifier type : 'joke' | 'trivia' | 'gif' ; // Content type content : string ; // Main content (joke text, fact, GIF URL) category? : string ; // Content category tags : string []; // Searchable tags rating? : number ; // Quality rating (1-5) metadata? : any ; // Additional data (alt text, descriptions) }",
      "title": "Content Structure"
    },
    { "location": "architecture/components/rag-system/#content-categories", "text": "", "title": "Content Categories" },
    {
      "location": "architecture/components/rag-system/#jokes",
      "text": "dad_joke - Classic dad humor and puns tech_joke - Programming and technology humor story_joke - Narrative-style jokes",
      "title": "Jokes"
    },
    {
      "location": "architecture/components/rag-system/#trivia",
      "text": "animals - Animal facts and biology space - Astronomy and space exploration science - Scientific discoveries and phenomena history - Historical facts and events food - Food science and culinary facts human_body - Human biology and health mathematics - Mathematical concepts and paradoxes",
      "title": "Trivia"
    },
    {
      "location": "architecture/components/rag-system/#gifs",
      "text": "funny - General humor and comedy cute - Adorable and heartwarming content excited - Celebration and joy reactions surprised - Shock and amazement reactions applause - Approval and congratulations party - Celebration and festive content thumbs_up - Positive approval facepalm - Disappointment reactions shrug - Confusion and uncertainty mind_blown - Astonishment reactions",
      "title": "GIFs"
    },
    { "location": "architecture/components/rag-system/#api-reference", "text": "", "title": "API Reference" },
    { "location": "architecture/components/rag-system/#ragservice-methods", "text": "", "title": "RAGService Methods" },
    {
      "location": "architecture/components/rag-system/#searchquery-searchquery-searchresult",
      "text": "Searches for content based on query parameters. Parameters: 1 2 3 4 5 6 7 interface SearchQuery { text : string ; // Search text type ?: 'joke' | 'trivia' | 'gif' ; // Content type filter category? : string ; // Category filter tags? : string []; // Tag filters limit? : number ; // Result limit (default: 10) } Returns: Array of SearchResult objects with relevance scores.",
      "title": "search(query: SearchQuery): SearchResult[]"
    },
    {
      "location": "architecture/components/rag-system/#searchforagentagenttype-agenttype-query-string-fallbacktorandom-boolean-contentitem-null",
      "text": "Simplified search for specific agent types. Parameters: agentType - Agent requesting content ('joke', 'trivia', 'gif') query - User's message for context fallbackToRandom - Whether to return random content if no matches (default: true)",
      "title": "searchForAgent(agentType: AgentType, query: string, fallbackToRandom?: boolean): ContentItem | null"
    },
    {
      "location": "architecture/components/rag-system/#getrandomcontenttype-joke-trivia-gif-category-string-contentitem-null",
      "text": "Retrieves random content of specified type.",
      "title": "getRandomContent(type: 'joke' | 'trivia' | 'gif', category?: string): ContentItem | null"
    },
    {
      "location": "architecture/components/rag-system/#addcontentitem-contentitem-void",
      "text": "Dynamically adds new content to the database.",
      "title": "addContent(item: ContentItem): void"
    },
    {
      "location": "architecture/components/rag-system/#getstats-type-string-number",
      "text": "Returns content statistics by type.",
      "title": "getStats(): { [type: string]: number }"
    },
    {
      "location": "architecture/components/rag-system/#gettopratedtype-string-limit-number-contentitem",
      "text": "Gets highest-rated content, optionally filtered by type.",
      "title": "getTopRated(type?: string, limit?: number): ContentItem[]"
    },
    {
      "location": "architecture/components/rag-system/#search-algorithm",
      "text": "The RAG system uses intelligent relevance scoring: Exact Phrase Match (0.8 points) - Direct content matches Tag Matching (0.3 points per tag) - Contextual tag alignment Category Matching (0.2 points) - Category relevance Content Keywords (0.1 points per word) - General content relevance Quality Boost (up to 0.1 points) - Based on content rating Minimum Threshold: 0.1 relevance score required for results.",
      "title": "Search Algorithm"
    },
    {
      "location": "architecture/components/rag-system/#integration-with-agents",
      "text": "",
      "title": "Integration with Agents"
    },
    {
      "location": "architecture/components/rag-system/#entertainment-agent-integration",
      "text": "Each entertainment agent uses RAG for consistent content delivery: 1 2 3 4 5 6 7 8 // Example: Joke Master using RAG const ragContent = ragService . searchForAgent ( 'joke' , userMessage , true ); if ( ragContent ) { return ` ${ ragContent . content } \ud83d\ude04 \ud83c\udfad *Learning from your reaction...* \ud83d\udcda *From curated joke collection*` ; }",
      "title": "Entertainment Agent Integration"
    },
    {
      "location": "architecture/components/rag-system/#demo-mode-enhancement",
      "text": "RAG provides reliable content when OpenAI API is unavailable: Consistent Quality - Pre-curated, rated content No API Dependencies - Works offline Contextual Relevance - Smart search matches user intent Professional Experience - Enterprise-grade content delivery",
      "title": "Demo Mode Enhancement"
    },
    { "location": "architecture/components/rag-system/#content-management", "text": "", "title": "Content Management" },
    {
      "location": "architecture/components/rag-system/#adding-new-content",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 // Add a new joke ragService . addContent ({ id : 'joke_011' , type : 'joke' , content : \"Why don't programmers like nature? It has too many bugs!\" , category : 'tech_joke' , tags : [ 'programming' , 'tech' , 'bugs' , 'nature' , 'pun' ], rating : 4 , }); // Add a new trivia fact ragService . addContent ({ id : 'trivia_011' , type : 'trivia' , content : 'Did you know that butterflies taste with their feet? They have chemoreceptors on their feet that help them identify suitable host plants!' , category : 'animals' , tags : [ 'butterflies' , 'insects' , 'taste' , 'biology' , 'nature' ], rating : 5 , }); // Add a new GIF ragService . addContent ({ id : 'gif_011' , type : 'gif' , content : 'https://media.giphy.com/media/example123/giphy.gif' , category : 'celebration' , tags : [ 'celebrate' , 'happy' , 'success' , 'achievement' , 'joy' ], rating : 4 , metadata : { description : 'Victory celebration dance' , alt : 'Person celebrating with victory dance' , }, });",
      "title": "Adding New Content"
    },
    { "location": "architecture/components/rag-system/#content-guidelines", "text": "", "title": "Content Guidelines" },
    {
      "location": "architecture/components/rag-system/#quality-standards",
      "text": "Rating 4-5 : Only high-quality, tested content Family Friendly : All content appropriate for general audiences Engaging : Content should entertain and delight users Accurate : Trivia facts must be factually correct Accessible : GIFs should include alt text and descriptions",
      "title": "Quality Standards"
    },
    {
      "location": "architecture/components/rag-system/#tag-strategy",
      "text": "Descriptive Tags : Clear, searchable keywords Multiple Contexts : Include various relevant tags Consistent Naming : Use standardized tag formats Semantic Grouping : Related concepts should share tags",
      "title": "Tag Strategy"
    },
    {
      "location": "architecture/components/rag-system/#performance-monitoring",
      "text": "",
      "title": "Performance Monitoring"
    },
    {
      "location": "architecture/components/rag-system/#available-metrics",
      "text": "1 2 3 4 5 6 7 8 9 // Get content statistics const stats = ragService . getStats (); // Returns: { joke: 10, trivia: 10, gif: 10 } // Get top-rated content const topJokes = ragService . getTopRated ( 'joke' , 5 ); // Search performance logging // Automatically logs search queries and result counts",
      "title": "Available Metrics"
    },
    {
      "location": "architecture/components/rag-system/#usage-analytics",
      "text": "The system automatically logs: Search queries and result counts Content relevance scores Agent usage patterns Content performance metrics",
      "title": "Usage Analytics"
    },
    { "location": "architecture/components/rag-system/#best-practices", "text": "", "title": "Best Practices" },
    {
      "location": "architecture/components/rag-system/#for-developers",
      "text": "Always Provide Fallback : Use fallbackToRandom: true for agent searches Cache Frequently Used Content : Store popular items for quick access Monitor Search Performance : Review logs for optimization opportunities Test Content Quality : Validate new content before adding Update Regularly : Keep content fresh and relevant",
      "title": "For Developers"
    },
    {
      "location": "architecture/components/rag-system/#for-content-creators",
      "text": "Write Clear Content : Ensure jokes/facts are easy to understand Use Descriptive Tags : Include all relevant keywords Rate Honestly : Use 1-5 scale based on entertainment value Test with Users : Validate content with target audience Include Metadata : Provide context and accessibility information",
      "title": "For Content Creators"
    },
    { "location": "architecture/components/rag-system/#troubleshooting", "text": "", "title": "Troubleshooting" },
    {
      "location": "architecture/components/rag-system/#common-issues",
      "text": "No Search Results: Check minimum relevance threshold (0.1) Verify tag spelling and categories Use broader search terms Poor Content Relevance: Review and improve tag assignments Add more contextual tags Consider content categorization Performance Issues: Monitor database size (current: 30 items) Consider search result limits Review complex query patterns",
      "title": "Common Issues"
    },
    {
      "location": "architecture/components/rag-system/#debug-mode",
      "text": "Enable detailed logging: 1 2 // Search logs include query details and result counts // Check console for: \"\ud83d\udd0d RAG Search: 'query' found X results\"",
      "title": "Debug Mode"
    },
    {
      "location": "architecture/components/rag-system/#future-enhancements",
      "text": "",
      "title": "Future Enhancements"
    },
    {
      "location": "architecture/components/rag-system/#planned-features",
      "text": "Vector Embeddings - Semantic search capabilities Machine Learning - Personalized content recommendations Content Analytics - Detailed usage and performance metrics Dynamic Learning - Content rating based on user reactions External Integration - API connections to content services Advanced Filtering - Complex query capabilities Content Validation - Automated quality checking A/B Testing - Content performance comparison",
      "title": "Planned Features"
    },
    {
      "location": "architecture/components/rag-system/#scalability-considerations",
      "text": "Database Growth : Current in-memory storage suitable up to ~1000 items Search Performance : O(n) search acceptable for current scale Content Expansion : Easy addition of new content types Multi-language Support : Framework ready for localization",
      "title": "Scalability Considerations"
    },
    { "location": "architecture/components/rag-system/#contributing", "text": "", "title": "Contributing" },
    {
      "location": "architecture/components/rag-system/#adding-content-types",
      "text": "Update ContentItem type definition Add new categories and tags Update search algorithms if needed Add validation rules Update documentation",
      "title": "Adding Content Types"
    },
    {
      "location": "architecture/components/rag-system/#content-submission-process",
      "text": "Create content following quality guidelines Add appropriate tags and ratings Test with multiple search queries Submit for review and validation Add to production database This RAG system provides a robust foundation for reliable, high-quality entertainment content that enhances the customer service experience while maintaining professional standards.",
      "title": "Content Submission Process"
    },
    {
      "location": "architecture/components/validation-system/",
      "text": "AI Response Validation System \u00b6 Overview \u00b6 The AI Response Validation System provides comprehensive quality assurance for all AI-generated responses in the chat application. It validates responses for content quality, technical accuracy, appropriateness, and coherence while maintaining detailed logs for monitoring and improvement. Architecture \u00b6 Core Components \u00b6 ResponseValidator ( backend/src/validation/responseValidator.ts ) Main validation engine Calculates quality metrics and scores Identifies and categorizes issues Maintains validation logs Validation API ( backend/src/routes/validation.ts ) RESTful endpoints for accessing validation data Statistics, logs, and filtering capabilities Real-time monitoring support Integration Points Agent Service: Validates all AI responses Socket Handlers: Validates proactive messages Goal-Seeking System: Validates entertainment content Validation Metrics \u00b6 Quality Scoring (0-1 scale) \u00b6 Readability Score (20% weight) Sentence structure analysis Word complexity assessment Flesch Reading Ease calculation Technical Accuracy (20% weight) Appropriate use of technical terms Agent specialization compliance Context-appropriate responses Appropriateness Score (30% weight) Professional tone assessment Inappropriate language detection Customer service standards Coherence Score (30% weight) Logical flow analysis Sentence completeness Contradiction detection Issue Detection \u00b6 Issues are categorized by type and severity: Issue Types \u00b6 Content : Empty responses, repetitive content Technical : Incorrect technical advice, agent mismatch Appropriateness : Unprofessional language, tone issues Length : Too short/long for agent type Coherence : Incomplete sentences, logical errors Severity Levels \u00b6 High : Critical issues requiring immediate attention Medium : Important issues affecting quality Low : Minor issues for optimization Validation Process \u00b6 Response Validation Flow \u00b6 Input Processing Agent type identification User message analysis Response content extraction Metric Calculation Individual metric scoring Weighted overall score Issue identification Quality Assessment Pass/fail determination (\u22650.7 score) High-severity issue detection Recommendation generation Logging & Storage Validation result storage Console logging for monitoring Statistics aggregation Integration Points \u00b6 Agent Service Integration \u00b6 1 2 3 4 5 6 7 8 9 // Validates all AI responses const validationResult = responseValidator . validateResponse ( agentType , userMessage , aiResponse , conversationId , userId , false , // Regular response ); Proactive Message Validation \u00b6 1 2 3 4 5 6 7 8 9 // Validates proactive entertainment messages const validationResult = responseValidator . validateResponse ( proactiveResponse . agentUsed , action . message , proactiveResponse . content , conversationId , userId , true , // Proactive message ); API Endpoints \u00b6 Validation Statistics \u00b6 1 GET /api/validation/stats Returns overall validation statistics including: Total validations Average quality score Validation pass rate Issue breakdown by type/severity Validation Logs \u00b6 1 GET /api/validation/logs?limit=50&offset=0 Returns paginated validation logs with: Validation results Agent performance data Issue details Timestamps Agent-Specific Logs \u00b6 1 GET /api/validation/logs/:agentType Returns validation logs filtered by agent type. Failed Validations \u00b6 1 GET /api/validation/failed Returns only failed validations for issue investigation. Validation Summary \u00b6 1 GET /api/validation/summary Returns validation summary grouped by agent type with: Performance metrics per agent Issue patterns Quality trends Clear Logs (Debug) \u00b6 1 POST /api/validation/clear Clears validation logs for testing purposes. Agent-Specific Validation \u00b6 Expected Response Lengths \u00b6 Dad Joke : 20-200 characters Trivia : 50-300 characters Technical : 100-1000 characters General : 30-500 characters GIF : 10-100 characters Agent Specialization Checks \u00b6 Technical agents: Can provide technical solutions Non-technical agents: Should redirect technical queries Entertainment agents: Should maintain appropriate tone Monitoring & Alerting \u00b6 Console Logging \u00b6 1 2 3 \ud83d\udd0d Validation Result [dad_joke] Score: 0.85, Valid: true \u26a0\ufe0f Validation issues for technical response: [medium: Response too short] \u274c High severity validation issues detected for general response Real-time Monitoring \u00b6 Validation success rates Response quality trends Issue pattern detection Agent performance comparison Quality Assurance Features \u00b6 Automatic Issue Detection \u00b6 Inappropriate language scanning Technical accuracy verification Response length validation Coherence analysis Quality Scoring \u00b6 Weighted metric calculation Pass/fail thresholds Continuous improvement tracking Performance Analytics \u00b6 Agent-specific performance Issue trend analysis Quality improvement metrics Implementation Benefits \u00b6 Quality Assurance \u00b6 Consistent response quality Automated issue detection Performance monitoring Continuous improvement Debugging & Development \u00b6 Response quality insights Agent performance analysis Issue pattern identification System optimization data Customer Experience \u00b6 Higher quality responses Reduced inappropriate content Better agent specialization Improved user satisfaction Configuration \u00b6 Validation Thresholds \u00b6 Pass Score : \u22650.7 (70%) High Severity : Automatic failure Log Retention : 1000 most recent validations Agent Settings \u00b6 Customizable length expectations Agent-specific validation rules Technical accuracy requirements Future Enhancements \u00b6 Advanced Features \u00b6 Machine learning-based quality prediction User satisfaction correlation Response improvement suggestions Automated agent retraining triggers Integration Improvements \u00b6 Real-time dashboards Alert notifications Performance reporting Quality trend analysis Usage Examples \u00b6 Basic Validation Check \u00b6 1 2 3 4 5 6 7 8 9 10 11 const result = responseValidator . validateResponse ( 'technical' , 'How do I fix this JavaScript error?' , 'You can fix this by checking the console...' , 'conv_123' , 'user_456' , ); if ( ! result . isValid ) { console . log ( 'Issues:' , result . issues ); } Getting Validation Statistics \u00b6 1 2 3 const stats = responseValidator . getValidationStats (); console . log ( `Average score: ${ stats . averageScore } ` ); console . log ( `Pass rate: ${ stats . validationRate * 100 } %` ); Accessing Validation Logs \u00b6 1 2 const logs = responseValidator . getValidationLogs (); const recentFailures = logs . filter ( log => ! log . validationResult . isValid ); The validation system provides comprehensive quality assurance for the AI chat application, ensuring high-quality responses while providing detailed monitoring and improvement capabilities.",
      "title": "Validation System"
    },
    {
      "location": "architecture/components/validation-system/#ai-response-validation-system",
      "text": "",
      "title": "AI Response Validation System"
    },
    {
      "location": "architecture/components/validation-system/#overview",
      "text": "The AI Response Validation System provides comprehensive quality assurance for all AI-generated responses in the chat application. It validates responses for content quality, technical accuracy, appropriateness, and coherence while maintaining detailed logs for monitoring and improvement.",
      "title": "Overview"
    },
    { "location": "architecture/components/validation-system/#architecture", "text": "", "title": "Architecture" },
    {
      "location": "architecture/components/validation-system/#core-components",
      "text": "ResponseValidator ( backend/src/validation/responseValidator.ts ) Main validation engine Calculates quality metrics and scores Identifies and categorizes issues Maintains validation logs Validation API ( backend/src/routes/validation.ts ) RESTful endpoints for accessing validation data Statistics, logs, and filtering capabilities Real-time monitoring support Integration Points Agent Service: Validates all AI responses Socket Handlers: Validates proactive messages Goal-Seeking System: Validates entertainment content",
      "title": "Core Components"
    },
    {
      "location": "architecture/components/validation-system/#validation-metrics",
      "text": "",
      "title": "Validation Metrics"
    },
    {
      "location": "architecture/components/validation-system/#quality-scoring-0-1-scale",
      "text": "Readability Score (20% weight) Sentence structure analysis Word complexity assessment Flesch Reading Ease calculation Technical Accuracy (20% weight) Appropriate use of technical terms Agent specialization compliance Context-appropriate responses Appropriateness Score (30% weight) Professional tone assessment Inappropriate language detection Customer service standards Coherence Score (30% weight) Logical flow analysis Sentence completeness Contradiction detection",
      "title": "Quality Scoring (0-1 scale)"
    },
    {
      "location": "architecture/components/validation-system/#issue-detection",
      "text": "Issues are categorized by type and severity:",
      "title": "Issue Detection"
    },
    {
      "location": "architecture/components/validation-system/#issue-types",
      "text": "Content : Empty responses, repetitive content Technical : Incorrect technical advice, agent mismatch Appropriateness : Unprofessional language, tone issues Length : Too short/long for agent type Coherence : Incomplete sentences, logical errors",
      "title": "Issue Types"
    },
    {
      "location": "architecture/components/validation-system/#severity-levels",
      "text": "High : Critical issues requiring immediate attention Medium : Important issues affecting quality Low : Minor issues for optimization",
      "title": "Severity Levels"
    },
    {
      "location": "architecture/components/validation-system/#validation-process",
      "text": "",
      "title": "Validation Process"
    },
    {
      "location": "architecture/components/validation-system/#response-validation-flow",
      "text": "Input Processing Agent type identification User message analysis Response content extraction Metric Calculation Individual metric scoring Weighted overall score Issue identification Quality Assessment Pass/fail determination (\u22650.7 score) High-severity issue detection Recommendation generation Logging & Storage Validation result storage Console logging for monitoring Statistics aggregation",
      "title": "Response Validation Flow"
    },
    {
      "location": "architecture/components/validation-system/#integration-points",
      "text": "",
      "title": "Integration Points"
    },
    {
      "location": "architecture/components/validation-system/#agent-service-integration",
      "text": "1 2 3 4 5 6 7 8 9 // Validates all AI responses const validationResult = responseValidator . validateResponse ( agentType , userMessage , aiResponse , conversationId , userId , false , // Regular response );",
      "title": "Agent Service Integration"
    },
    {
      "location": "architecture/components/validation-system/#proactive-message-validation",
      "text": "1 2 3 4 5 6 7 8 9 // Validates proactive entertainment messages const validationResult = responseValidator . validateResponse ( proactiveResponse . agentUsed , action . message , proactiveResponse . content , conversationId , userId , true , // Proactive message );",
      "title": "Proactive Message Validation"
    },
    { "location": "architecture/components/validation-system/#api-endpoints", "text": "", "title": "API Endpoints" },
    {
      "location": "architecture/components/validation-system/#validation-statistics",
      "text": "1 GET /api/validation/stats Returns overall validation statistics including: Total validations Average quality score Validation pass rate Issue breakdown by type/severity",
      "title": "Validation Statistics"
    },
    {
      "location": "architecture/components/validation-system/#validation-logs",
      "text": "1 GET /api/validation/logs?limit=50&offset=0 Returns paginated validation logs with: Validation results Agent performance data Issue details Timestamps",
      "title": "Validation Logs"
    },
    {
      "location": "architecture/components/validation-system/#agent-specific-logs",
      "text": "1 GET /api/validation/logs/:agentType Returns validation logs filtered by agent type.",
      "title": "Agent-Specific Logs"
    },
    {
      "location": "architecture/components/validation-system/#failed-validations",
      "text": "1 GET /api/validation/failed Returns only failed validations for issue investigation.",
      "title": "Failed Validations"
    },
    {
      "location": "architecture/components/validation-system/#validation-summary",
      "text": "1 GET /api/validation/summary Returns validation summary grouped by agent type with: Performance metrics per agent Issue patterns Quality trends",
      "title": "Validation Summary"
    },
    {
      "location": "architecture/components/validation-system/#clear-logs-debug",
      "text": "1 POST /api/validation/clear Clears validation logs for testing purposes.",
      "title": "Clear Logs (Debug)"
    },
    {
      "location": "architecture/components/validation-system/#agent-specific-validation",
      "text": "",
      "title": "Agent-Specific Validation"
    },
    {
      "location": "architecture/components/validation-system/#expected-response-lengths",
      "text": "Dad Joke : 20-200 characters Trivia : 50-300 characters Technical : 100-1000 characters General : 30-500 characters GIF : 10-100 characters",
      "title": "Expected Response Lengths"
    },
    {
      "location": "architecture/components/validation-system/#agent-specialization-checks",
      "text": "Technical agents: Can provide technical solutions Non-technical agents: Should redirect technical queries Entertainment agents: Should maintain appropriate tone",
      "title": "Agent Specialization Checks"
    },
    {
      "location": "architecture/components/validation-system/#monitoring-alerting",
      "text": "",
      "title": "Monitoring &amp; Alerting"
    },
    {
      "location": "architecture/components/validation-system/#console-logging",
      "text": "1 2 3 \ud83d\udd0d Validation Result [dad_joke] Score: 0.85, Valid: true \u26a0\ufe0f Validation issues for technical response: [medium: Response too short] \u274c High severity validation issues detected for general response",
      "title": "Console Logging"
    },
    {
      "location": "architecture/components/validation-system/#real-time-monitoring",
      "text": "Validation success rates Response quality trends Issue pattern detection Agent performance comparison",
      "title": "Real-time Monitoring"
    },
    {
      "location": "architecture/components/validation-system/#quality-assurance-features",
      "text": "",
      "title": "Quality Assurance Features"
    },
    {
      "location": "architecture/components/validation-system/#automatic-issue-detection",
      "text": "Inappropriate language scanning Technical accuracy verification Response length validation Coherence analysis",
      "title": "Automatic Issue Detection"
    },
    {
      "location": "architecture/components/validation-system/#quality-scoring",
      "text": "Weighted metric calculation Pass/fail thresholds Continuous improvement tracking",
      "title": "Quality Scoring"
    },
    {
      "location": "architecture/components/validation-system/#performance-analytics",
      "text": "Agent-specific performance Issue trend analysis Quality improvement metrics",
      "title": "Performance Analytics"
    },
    {
      "location": "architecture/components/validation-system/#implementation-benefits",
      "text": "",
      "title": "Implementation Benefits"
    },
    {
      "location": "architecture/components/validation-system/#quality-assurance",
      "text": "Consistent response quality Automated issue detection Performance monitoring Continuous improvement",
      "title": "Quality Assurance"
    },
    {
      "location": "architecture/components/validation-system/#debugging-development",
      "text": "Response quality insights Agent performance analysis Issue pattern identification System optimization data",
      "title": "Debugging &amp; Development"
    },
    {
      "location": "architecture/components/validation-system/#customer-experience",
      "text": "Higher quality responses Reduced inappropriate content Better agent specialization Improved user satisfaction",
      "title": "Customer Experience"
    },
    { "location": "architecture/components/validation-system/#configuration", "text": "", "title": "Configuration" },
    {
      "location": "architecture/components/validation-system/#validation-thresholds",
      "text": "Pass Score : \u22650.7 (70%) High Severity : Automatic failure Log Retention : 1000 most recent validations",
      "title": "Validation Thresholds"
    },
    {
      "location": "architecture/components/validation-system/#agent-settings",
      "text": "Customizable length expectations Agent-specific validation rules Technical accuracy requirements",
      "title": "Agent Settings"
    },
    {
      "location": "architecture/components/validation-system/#future-enhancements",
      "text": "",
      "title": "Future Enhancements"
    },
    {
      "location": "architecture/components/validation-system/#advanced-features",
      "text": "Machine learning-based quality prediction User satisfaction correlation Response improvement suggestions Automated agent retraining triggers",
      "title": "Advanced Features"
    },
    {
      "location": "architecture/components/validation-system/#integration-improvements",
      "text": "Real-time dashboards Alert notifications Performance reporting Quality trend analysis",
      "title": "Integration Improvements"
    },
    { "location": "architecture/components/validation-system/#usage-examples", "text": "", "title": "Usage Examples" },
    {
      "location": "architecture/components/validation-system/#basic-validation-check",
      "text": "1 2 3 4 5 6 7 8 9 10 11 const result = responseValidator . validateResponse ( 'technical' , 'How do I fix this JavaScript error?' , 'You can fix this by checking the console...' , 'conv_123' , 'user_456' , ); if ( ! result . isValid ) { console . log ( 'Issues:' , result . issues ); }",
      "title": "Basic Validation Check"
    },
    {
      "location": "architecture/components/validation-system/#getting-validation-statistics",
      "text": "1 2 3 const stats = responseValidator . getValidationStats (); console . log ( `Average score: ${ stats . averageScore } ` ); console . log ( `Pass rate: ${ stats . validationRate * 100 } %` );",
      "title": "Getting Validation Statistics"
    },
    {
      "location": "architecture/components/validation-system/#accessing-validation-logs",
      "text": "1 2 const logs = responseValidator . getValidationLogs (); const recentFailures = logs . filter ( log => ! log . validationResult . isValid ); The validation system provides comprehensive quality assurance for the AI chat application, ensuring high-quality responses while providing detailed monitoring and improvement capabilities.",
      "title": "Accessing Validation Logs"
    },
    {
      "location": "architecture/components/_sources/agents/",
      "text": "Agentic Backend System \u00b6 Overview \u00b6 The backend now features an intelligent agentic system that automatically routes user messages to specialized AI agents based on the content and context of their requests. Architecture \u00b6 Agent Types \u00b6 The system includes two specialized agents: Technical Agent ( \u2699\ufe0f Technical Agent ) Specializes in programming, software development, debugging, and technical questions Uses lower temperature (0.3) for more precise, factual responses Handles: code writing, debugging, technical documentation, system administration, databases, APIs, frameworks, etc. General Agent ( \ud83d\udcac General Agent ) Handles casual conversation, general questions, creative tasks, and everyday assistance Uses higher temperature (0.7) for more creative, conversational responses Handles: general knowledge, advice, creative writing, entertainment, non-technical topics Components \u00b6 Message Classification ( backend/src/agents/classifier.ts ) \u00b6 Uses OpenAI API to intelligently classify incoming messages Falls back to keyword-based classification when API is unavailable Returns confidence scores for classification accuracy Analyzes message content to determine appropriate agent type Agent Configuration ( backend/src/agents/config.ts ) \u00b6 Defines agent personalities, system prompts, and parameters Configures model settings (temperature, max tokens, etc.) Contains specialized prompts for each agent type Agent Service ( backend/src/agents/agentService.ts ) \u00b6 Main orchestrator that processes messages through the appropriate agent Handles conversation history and context Supports forced agent selection for specific use cases Provides demo responses when API key is not available API Updates \u00b6 Enhanced Types \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 interface Message { id : string ; content : string ; role : 'user' | 'assistant' ; timestamp : Date ; conversationId : string ; agentUsed ?: 'technical' | 'general' ; // New confidence? : number ; // New } interface ChatRequest { message : string ; conversationId? : string ; stream? : boolean ; forceAgent ?: 'technical' | 'general' ; // New } interface ChatResponse { message : Message ; conversation : Conversation ; agentUsed : 'technical' | 'general' ; // New confidence : number ; // New } New Endpoints \u00b6 GET /api/chat/agents - Returns available agents and their descriptions Frontend Integration \u00b6 Message Display \u00b6 Messages now show which agent responded with visual indicators Confidence scores are displayed for transparency Different styling for technical vs general agent responses Agent Selection \u00b6 Users can optionally force a specific agent for their query Automatic classification happens by default Visual feedback shows which agent is being used Usage Examples \u00b6 Technical Questions \u00b6 1 2 3 Input: \"How do I fix this React component error?\" \u2192 Routes to Technical Agent (\u2699\ufe0f) \u2192 Provides code examples and debugging steps General Questions \u00b6 1 2 3 Input: \"What's a good recipe for dinner?\" \u2192 Routes to General Agent (\ud83d\udcac) \u2192 Provides friendly, conversational cooking advice Classification Examples \u00b6 Technical Keywords Detected: code, programming, debug, error, bug, api, database javascript, python, react, node, css, html function, variable, array, object, class, method framework, library, algorithm, deployment, git docker, kubernetes, aws, testing, ci/cd General Topics: Casual conversation, creative writing, general knowledge Advice, recommendations, entertainment Non-technical questions and everyday assistance Benefits \u00b6 Specialized Responses : Each agent is optimized for its domain Improved Accuracy : Technical questions get technical responses Better User Experience : Appropriate tone and style for each query type Transparency : Users see which agent responded and confidence levels Flexibility : Support for forced agent selection when needed Demo Mode \u00b6 When no OpenAI API key is provided, the system operates in demo mode: Still classifies messages using keyword matching Provides simulated responses showing agent functionality Maintains all UI features and agent selection Single-Agent Control System \u00b6 The system now implements single-agent control to ensure only one agent is active and talking at a time per user: How It Works \u00b6 Agent Activity Tracking : Each user has their active agent tracked with timestamps Proactive Action Filtering : Only one proactive action is executed at a time Action Queuing : Additional proactive actions are queued when an agent is already active Sequential Processing : Queued actions are processed after the current action completes Benefits \u00b6 Prevents Agent Conflicts : No multiple agents responding simultaneously Maintains Conversation Flow : Ensures coherent, single-threaded conversations Reduces Confusion : Users receive responses from one agent at a time Preserves Context : Maintains conversation context without interruption Implementation Details \u00b6 30-Second Activity Window : Agents are considered active for 30 seconds after their last response Priority-Based Selection : Higher priority actions (technical > entertainment > engagement) are processed first Automatic Queuing : Conflicting actions are automatically queued for later processing Error Handling : Graceful handling of agent conflicts with automatic retry Logging \u00b6 The system provides detailed logging for debugging: \ud83c\udfaf - Goal-seeking system actions \ud83d\udeab - Agent conflicts and filtering \u23f3 - Queued actions \u2705 - Successfully completed actions Future Enhancements \u00b6 Additional specialized agents (e.g., creative writing, data analysis) Dynamic agent selection based on conversation context Agent performance metrics and optimization Multi-agent collaboration for complex queries Enhanced priority-based action scheduling",
      "title": "Agentic Backend System"
    },
    {
      "location": "architecture/components/_sources/agents/#agentic-backend-system",
      "text": "",
      "title": "Agentic Backend System"
    },
    {
      "location": "architecture/components/_sources/agents/#overview",
      "text": "The backend now features an intelligent agentic system that automatically routes user messages to specialized AI agents based on the content and context of their requests.",
      "title": "Overview"
    },
    { "location": "architecture/components/_sources/agents/#architecture", "text": "", "title": "Architecture" },
    {
      "location": "architecture/components/_sources/agents/#agent-types",
      "text": "The system includes two specialized agents: Technical Agent ( \u2699\ufe0f Technical Agent ) Specializes in programming, software development, debugging, and technical questions Uses lower temperature (0.3) for more precise, factual responses Handles: code writing, debugging, technical documentation, system administration, databases, APIs, frameworks, etc. General Agent ( \ud83d\udcac General Agent ) Handles casual conversation, general questions, creative tasks, and everyday assistance Uses higher temperature (0.7) for more creative, conversational responses Handles: general knowledge, advice, creative writing, entertainment, non-technical topics",
      "title": "Agent Types"
    },
    { "location": "architecture/components/_sources/agents/#components", "text": "", "title": "Components" },
    {
      "location": "architecture/components/_sources/agents/#message-classification-backendsrcagentsclassifierts",
      "text": "Uses OpenAI API to intelligently classify incoming messages Falls back to keyword-based classification when API is unavailable Returns confidence scores for classification accuracy Analyzes message content to determine appropriate agent type",
      "title": "Message Classification (backend/src/agents/classifier.ts)"
    },
    {
      "location": "architecture/components/_sources/agents/#agent-configuration-backendsrcagentsconfigts",
      "text": "Defines agent personalities, system prompts, and parameters Configures model settings (temperature, max tokens, etc.) Contains specialized prompts for each agent type",
      "title": "Agent Configuration (backend/src/agents/config.ts)"
    },
    {
      "location": "architecture/components/_sources/agents/#agent-service-backendsrcagentsagentservicets",
      "text": "Main orchestrator that processes messages through the appropriate agent Handles conversation history and context Supports forced agent selection for specific use cases Provides demo responses when API key is not available",
      "title": "Agent Service (backend/src/agents/agentService.ts)"
    },
    { "location": "architecture/components/_sources/agents/#api-updates", "text": "", "title": "API Updates" },
    {
      "location": "architecture/components/_sources/agents/#enhanced-types",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 interface Message { id : string ; content : string ; role : 'user' | 'assistant' ; timestamp : Date ; conversationId : string ; agentUsed ?: 'technical' | 'general' ; // New confidence? : number ; // New } interface ChatRequest { message : string ; conversationId? : string ; stream? : boolean ; forceAgent ?: 'technical' | 'general' ; // New } interface ChatResponse { message : Message ; conversation : Conversation ; agentUsed : 'technical' | 'general' ; // New confidence : number ; // New }",
      "title": "Enhanced Types"
    },
    {
      "location": "architecture/components/_sources/agents/#new-endpoints",
      "text": "GET /api/chat/agents - Returns available agents and their descriptions",
      "title": "New Endpoints"
    },
    {
      "location": "architecture/components/_sources/agents/#frontend-integration",
      "text": "",
      "title": "Frontend Integration"
    },
    {
      "location": "architecture/components/_sources/agents/#message-display",
      "text": "Messages now show which agent responded with visual indicators Confidence scores are displayed for transparency Different styling for technical vs general agent responses",
      "title": "Message Display"
    },
    {
      "location": "architecture/components/_sources/agents/#agent-selection",
      "text": "Users can optionally force a specific agent for their query Automatic classification happens by default Visual feedback shows which agent is being used",
      "title": "Agent Selection"
    },
    { "location": "architecture/components/_sources/agents/#usage-examples", "text": "", "title": "Usage Examples" },
    {
      "location": "architecture/components/_sources/agents/#technical-questions",
      "text": "1 2 3 Input: \"How do I fix this React component error?\" \u2192 Routes to Technical Agent (\u2699\ufe0f) \u2192 Provides code examples and debugging steps",
      "title": "Technical Questions"
    },
    {
      "location": "architecture/components/_sources/agents/#general-questions",
      "text": "1 2 3 Input: \"What's a good recipe for dinner?\" \u2192 Routes to General Agent (\ud83d\udcac) \u2192 Provides friendly, conversational cooking advice",
      "title": "General Questions"
    },
    {
      "location": "architecture/components/_sources/agents/#classification-examples",
      "text": "Technical Keywords Detected: code, programming, debug, error, bug, api, database javascript, python, react, node, css, html function, variable, array, object, class, method framework, library, algorithm, deployment, git docker, kubernetes, aws, testing, ci/cd General Topics: Casual conversation, creative writing, general knowledge Advice, recommendations, entertainment Non-technical questions and everyday assistance",
      "title": "Classification Examples"
    },
    {
      "location": "architecture/components/_sources/agents/#benefits",
      "text": "Specialized Responses : Each agent is optimized for its domain Improved Accuracy : Technical questions get technical responses Better User Experience : Appropriate tone and style for each query type Transparency : Users see which agent responded and confidence levels Flexibility : Support for forced agent selection when needed",
      "title": "Benefits"
    },
    {
      "location": "architecture/components/_sources/agents/#demo-mode",
      "text": "When no OpenAI API key is provided, the system operates in demo mode: Still classifies messages using keyword matching Provides simulated responses showing agent functionality Maintains all UI features and agent selection",
      "title": "Demo Mode"
    },
    {
      "location": "architecture/components/_sources/agents/#single-agent-control-system",
      "text": "The system now implements single-agent control to ensure only one agent is active and talking at a time per user:",
      "title": "Single-Agent Control System"
    },
    {
      "location": "architecture/components/_sources/agents/#how-it-works",
      "text": "Agent Activity Tracking : Each user has their active agent tracked with timestamps Proactive Action Filtering : Only one proactive action is executed at a time Action Queuing : Additional proactive actions are queued when an agent is already active Sequential Processing : Queued actions are processed after the current action completes",
      "title": "How It Works"
    },
    {
      "location": "architecture/components/_sources/agents/#benefits_1",
      "text": "Prevents Agent Conflicts : No multiple agents responding simultaneously Maintains Conversation Flow : Ensures coherent, single-threaded conversations Reduces Confusion : Users receive responses from one agent at a time Preserves Context : Maintains conversation context without interruption",
      "title": "Benefits"
    },
    {
      "location": "architecture/components/_sources/agents/#implementation-details",
      "text": "30-Second Activity Window : Agents are considered active for 30 seconds after their last response Priority-Based Selection : Higher priority actions (technical > entertainment > engagement) are processed first Automatic Queuing : Conflicting actions are automatically queued for later processing Error Handling : Graceful handling of agent conflicts with automatic retry",
      "title": "Implementation Details"
    },
    {
      "location": "architecture/components/_sources/agents/#logging",
      "text": "The system provides detailed logging for debugging: \ud83c\udfaf - Goal-seeking system actions \ud83d\udeab - Agent conflicts and filtering \u23f3 - Queued actions \u2705 - Successfully completed actions",
      "title": "Logging"
    },
    {
      "location": "architecture/components/_sources/agents/#future-enhancements",
      "text": "Additional specialized agents (e.g., creative writing, data analysis) Dynamic agent selection based on conversation context Agent performance metrics and optimization Multi-agent collaboration for complex queries Enhanced priority-based action scheduling",
      "title": "Future Enhancements"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/",
      "text": "Entertainment Agents Documentation \u00b6 Overview \u00b6 The Entertainment Agents system provides engaging, high-quality entertainment content for customers during hold periods or general interaction. The system includes three specialized agents powered by a curated RAG (Retrieval-Augmented Generation) database, ensuring consistent and delightful user experiences. Entertainment Agent Types \u00b6 1. Adaptive Joke Master \ud83c\udfad \u00b6 Purpose : Delivers personalized humor that adapts to user reactions and preferences. Key Features : Adaptive Learning : Learns from user reactions (laughs, groans, etc.) Quality-Curated Content : RAG database with 4-5 star rated jokes Multiple Categories : Dad jokes, tech humor, story jokes, wordplay Personalization : Tailors humor style based on user preferences Reaction Tracking : Monitors user engagement and adjusts accordingly Content Categories : dad_joke - Classic dad humor and puns tech_joke - Programming and technology humor story_joke - Narrative-style jokes with setups and punchlines Example Interaction : 1 2 3 4 5 6 7 User: \"Tell me a joke!\" Joke Master: \"Why don't scientists trust atoms? Because they make up everything! \ud83d\ude04 \ud83c\udfad *Learning from your reaction...* Want to hear another one? I'm adapting my humor based on what makes you laugh! \ud83d\udcda *From curated joke collection*\" 2. Trivia Master \ud83e\udde0 \u00b6 Purpose : Shares fascinating facts and educational content to engage and inform users. Key Features : Curated Facts Database : Quality-rated trivia across multiple subjects Educational Value : Combines entertainment with learning Diverse Topics : Science, animals, space, history, human body, mathematics Engaging Presentation : Makes complex facts accessible and interesting Follow-up Engagement : Encourages curiosity and further questions Content Categories : animals - Animal behavior, biology, and fascinating creature facts space - Astronomy, planets, and cosmic phenomena science - Scientific discoveries, physics, and natural phenomena history - Historical events, civilizations, and cultural facts food - Food science, nutrition, and culinary discoveries human_body - Biology, health, and amazing body facts mathematics - Mathematical concepts, paradoxes, and number theory Example Interaction : 1 2 3 4 5 6 7 User: \"Tell me something interesting!\" Trivia Master: \"Did you know that octopuses have three hearts and blue blood? Two hearts pump blood to the gills, while the third pumps blood to the rest of the body! \ud83d\udc19 Isn't that incredible? Want to hear another fascinating fact? \ud83d\udcda *From curated trivia collection*\" 3. GIF Master \ud83c\udfac \u00b6 Purpose : Provides visual entertainment through curated, mood-appropriate animated content. Key Features : Visual Entertainment : Animated GIFs for every mood and situation Accessibility Features : Alt text and descriptions for all content Contextual Selection : Chooses GIFs based on conversation context Quality Curation : Hand-selected, appropriate, and entertaining content Mood Enhancement : Brightens conversations with visual humor Content Categories : funny - General humor and comedy animations cute - Adorable and heartwarming content excited - Celebration and joy reactions surprised - Shock and amazement reactions applause - Approval and congratulations party - Celebration and festive content thumbs_up - Positive approval gestures facepalm - Disappointment and \"oh no\" moments shrug - Confusion and uncertainty mind_blown - Astonishment and \"wow\" reactions Example Interaction : 1 2 3 4 5 6 7 8 9 User: \"Show me a funny gif!\" GIF Master: \"Here's a perfect GIF for you! \ud83c\udfac ![Person laughing hysterically](https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif) *Funny laughing reaction* \ud83d\udcda *From curated GIF collection* - Want another one? I have GIFs for every mood and situation!\" RAG Integration \u00b6 Content Database Structure \u00b6 Each entertainment agent leverages the RAG system for consistent, high-quality content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Example content items { id : 'joke_007' , type : 'joke' , content : \"Why do programmers prefer dark mode? Because light attracts bugs!\" , category : 'tech_joke' , tags : [ 'programming' , 'tech' , 'dark mode' , 'bugs' , 'pun' ], rating : 5 }, { id : 'trivia_001' , type : 'trivia' , content : \"Did you know that octopuses have three hearts and blue blood?\" , category : 'animals' , tags : [ 'octopus' , 'hearts' , 'blood' , 'marine' , 'biology' ], rating : 5 }, { id : 'gif_001' , type : 'gif' , content : 'https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif' , category : 'funny' , tags : [ 'funny' , 'laugh' , 'comedy' , 'silly' , 'animated' ], rating : 4 , metadata : { description : 'Funny laughing reaction' , alt : 'Person laughing hysterically' } } Smart Content Selection \u00b6 The system uses intelligent search algorithms to match content to user requests: Context Analysis - Analyzes user message for intent and mood Relevance Scoring - Ranks content by relevance to user request Quality Filtering - Prioritizes highly-rated content (4-5 stars) Fallback Strategy - Provides random quality content if no perfect match Variety Ensuring - Avoids repetition through smart selection System Integration \u00b6 Agent Classification \u00b6 Entertainment agents are properly integrated into the message classification system: 1 2 3 4 5 6 7 // Classification examples \"Tell me a joke\" \u2192 joke ( confidence : 0.9 ) \"Share a fun fact\" \u2192 trivia ( confidence : 0.85 ) \"Show me a gif\" \u2192 gif ( confidence : 0.9 ) \"Make me laugh\" \u2192 joke ( confidence : 0.8 ) \"Something interesting\" \u2192 trivia ( confidence : 0.7 ) \"Funny picture\" \u2192 gif ( confidence : 0.8 ) Hold Agent Coordination \u00b6 Entertainment agents work seamlessly with the Hold Agent system: Introduction Phase - Hold Agent presents entertainment options Selection Handling - User chooses preferred entertainment type Smooth Handoff - Transition to selected entertainment agent Engagement Monitoring - Track user interaction and satisfaction Return Coordination - Handle returns to Hold Agent for updates Goal-Seeking Integration \u00b6 Entertainment agents participate in proactive customer engagement: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Example proactive entertainment actions { type : 'entertainment_offer' , agentType : 'joke' , message : 'While you wait, would you like to hear a joke?' , timing : 'immediate' , priority : 'high' }, { type : 'engagement_check' , agentType : 'trivia' , message : 'Would you like to learn something fascinating while we wait?' , timing : 'after_5min' , priority : 'medium' } User Experience Features \u00b6 Adaptive Personalization \u00b6 Joke Master Personalization : Tracks user reactions to different joke types Adjusts humor style based on positive/negative feedback Remembers preferred categories (dad jokes vs. tech humor) Learns from conversation patterns and timing Trivia Master Engagement : Monitors user interest in different topic categories Follows up with related facts based on engagement Adjusts complexity based on user responses Encourages deeper exploration of interesting topics GIF Master Context Awareness : Selects mood-appropriate content Considers conversation tone and context Provides variety while matching user preferences Includes accessibility features for all users Quality Assurance \u00b6 Content Standards : All content rated 4-5 stars for quality assurance Family-friendly and workplace-appropriate Factually accurate trivia content Tested for engagement and entertainment value Accessibility Features : Alt text for all visual content (GIFs) Clear, understandable language Inclusive humor that doesn't target groups Screen reader compatible descriptions Configuration and Customization \u00b6 Agent Personality Settings \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // Joke Master configuration { name : 'Adaptive Joke Master' , personality : 'witty, adaptive, learning-focused' , responseStyle : 'casual but professional' , followUpRate : 0.8 , // 80% chance of follow-up engagement adaptationSpeed : 'medium' // How quickly it learns preferences } // Trivia Master configuration { name : 'Trivia Master' , personality : 'knowledgeable, enthusiastic, educational' , responseStyle : 'informative but engaging' , factAccuracy : 'high' , // Requires fact verification topicDiversity : 'high' // Covers many subject areas } // GIF Master configuration { name : 'GIF Master' , personality : 'visual, expressive, mood-enhancing' , responseStyle : 'playful and supportive' , contentModeration : 'strict' , // Family-friendly only accessibilityCompliance : 'full' // Alt text required } Content Expansion \u00b6 Adding New Content : 1 2 3 4 5 6 7 8 9 10 // Example of adding seasonal content ragService . addContent ({ id : 'joke_seasonal_001' , type : 'joke' , content : \"Why don't Christmas trees ever get lost? They always know where their roots are!\" , category : 'seasonal_joke' , tags : [ 'christmas' , 'tree' , 'seasonal' , 'pun' , 'family' ], rating : 4 , metadata : { season : 'winter' , holiday : 'christmas' }, }); Content Categories Expansion : Seasonal content (holidays, weather) Industry-specific humor (healthcare, education, retail) Cultural content (different regions, languages) Trending topics (current events, viral content) Performance Monitoring \u00b6 Entertainment Metrics \u00b6 Engagement Tracking : User response rates to entertainment offers Average interaction duration with each agent type User satisfaction indicators (reactions, continued engagement) Content effectiveness (which jokes/facts get best responses) Quality Metrics : Content relevance scores for user requests Fallback usage rates (when no perfect match found) User preference learning accuracy Agent handoff success rates Analytics Dashboard Data : 1 2 3 4 5 6 7 8 9 10 { entertainmentSession : { agentType : 'joke' , contentDelivered : 5 , userEngagement : 'high' , preferredCategories : [ 'tech_joke' , 'dad_joke' ], sessionDuration : 180 , // seconds satisfactionScore : 4.2 // out of 5 } } Best Practices \u00b6 For Content Creators \u00b6 Quality First : Only include 4-5 star rated content Test with Audiences : Validate entertainment value before adding Diverse Categories : Ensure broad appeal across different interests Appropriate Content : Maintain family-friendly, professional standards Regular Updates : Keep content fresh and relevant For System Administrators \u00b6 Monitor Engagement : Track which content types perform best Update Regularly : Refresh database with new, trending content User Feedback : Analyze interaction patterns for insights Performance Optimization : Ensure fast content retrieval Accessibility Compliance : Maintain full accessibility features For Customer Service Teams \u00b6 Understand Options : Know what entertainment is available Appropriate Timing : Offer entertainment during natural pauses Respect Preferences : Don't force entertainment on uninterested users Monitor Engagement : Watch for user fatigue or disengagement Professional Balance : Maintain service standards while being entertaining Troubleshooting \u00b6 Common Issues \u00b6 Users Not Engaging with Entertainment : Review introduction messaging and offer timing Consider different entertainment types for different user personalities Ensure content quality and relevance to user interests Repetitive Content : Check variety algorithms in content selection Expand content database with more diverse options Implement better rotation logic to avoid repetition Inappropriate Content Concerns : Review content rating and approval processes Implement stricter content moderation rules Add user reporting mechanisms for problematic content Debug Information \u00b6 1 2 3 4 5 // Entertainment session debugging console . log ( `\ud83c\udfad Entertainment session: ${ agentType } for user ${ userId } ` ); console . log ( `\ud83d\udd0d Content search: \" ${ query } \" \u2192 ${ results . length } matches` ); console . log ( `\u2b50 Selected content: ${ selectedContent . id } (rating: ${ selectedContent . rating } )` ); console . log ( `\ud83d\udcca User engagement: ${ engagementLevel } ` ); Future Enhancements \u00b6 Planned Features \u00b6 AI-Generated Content : Supplement RAG database with AI-created jokes/facts User Preference Learning : Advanced ML for personalization Multi-media Support : Audio clips, interactive content Social Features : User-generated content, sharing capabilities Advanced Analytics : Detailed entertainment effectiveness metrics Real-time Trends : Integration with trending topics and viral content Integration Opportunities \u00b6 Calendar Integration : Seasonal and holiday-appropriate content Industry Customization : Specialized content for different business sectors Language Localization : Multi-language entertainment content Accessibility Enhancement : Voice-based entertainment options External API Integration : Live content from comedy/trivia services The Entertainment Agents system provides a comprehensive, professional entertainment experience that enhances customer satisfaction during service interactions while maintaining the highest standards of quality and appropriateness.",
      "title": "Entertainment Agents Documentation"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#entertainment-agents-documentation",
      "text": "",
      "title": "Entertainment Agents Documentation"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#overview",
      "text": "The Entertainment Agents system provides engaging, high-quality entertainment content for customers during hold periods or general interaction. The system includes three specialized agents powered by a curated RAG (Retrieval-Augmented Generation) database, ensuring consistent and delightful user experiences.",
      "title": "Overview"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#entertainment-agent-types",
      "text": "",
      "title": "Entertainment Agent Types"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#1-adaptive-joke-master",
      "text": "Purpose : Delivers personalized humor that adapts to user reactions and preferences. Key Features : Adaptive Learning : Learns from user reactions (laughs, groans, etc.) Quality-Curated Content : RAG database with 4-5 star rated jokes Multiple Categories : Dad jokes, tech humor, story jokes, wordplay Personalization : Tailors humor style based on user preferences Reaction Tracking : Monitors user engagement and adjusts accordingly Content Categories : dad_joke - Classic dad humor and puns tech_joke - Programming and technology humor story_joke - Narrative-style jokes with setups and punchlines Example Interaction : 1 2 3 4 5 6 7 User: \"Tell me a joke!\" Joke Master: \"Why don't scientists trust atoms? Because they make up everything! \ud83d\ude04 \ud83c\udfad *Learning from your reaction...* Want to hear another one? I'm adapting my humor based on what makes you laugh! \ud83d\udcda *From curated joke collection*\"",
      "title": "1. Adaptive Joke Master \ud83c\udfad"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#2-trivia-master",
      "text": "Purpose : Shares fascinating facts and educational content to engage and inform users. Key Features : Curated Facts Database : Quality-rated trivia across multiple subjects Educational Value : Combines entertainment with learning Diverse Topics : Science, animals, space, history, human body, mathematics Engaging Presentation : Makes complex facts accessible and interesting Follow-up Engagement : Encourages curiosity and further questions Content Categories : animals - Animal behavior, biology, and fascinating creature facts space - Astronomy, planets, and cosmic phenomena science - Scientific discoveries, physics, and natural phenomena history - Historical events, civilizations, and cultural facts food - Food science, nutrition, and culinary discoveries human_body - Biology, health, and amazing body facts mathematics - Mathematical concepts, paradoxes, and number theory Example Interaction : 1 2 3 4 5 6 7 User: \"Tell me something interesting!\" Trivia Master: \"Did you know that octopuses have three hearts and blue blood? Two hearts pump blood to the gills, while the third pumps blood to the rest of the body! \ud83d\udc19 Isn't that incredible? Want to hear another fascinating fact? \ud83d\udcda *From curated trivia collection*\"",
      "title": "2. Trivia Master \ud83e\udde0"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#3-gif-master",
      "text": "Purpose : Provides visual entertainment through curated, mood-appropriate animated content. Key Features : Visual Entertainment : Animated GIFs for every mood and situation Accessibility Features : Alt text and descriptions for all content Contextual Selection : Chooses GIFs based on conversation context Quality Curation : Hand-selected, appropriate, and entertaining content Mood Enhancement : Brightens conversations with visual humor Content Categories : funny - General humor and comedy animations cute - Adorable and heartwarming content excited - Celebration and joy reactions surprised - Shock and amazement reactions applause - Approval and congratulations party - Celebration and festive content thumbs_up - Positive approval gestures facepalm - Disappointment and \"oh no\" moments shrug - Confusion and uncertainty mind_blown - Astonishment and \"wow\" reactions Example Interaction : 1 2 3 4 5 6 7 8 9 User: \"Show me a funny gif!\" GIF Master: \"Here's a perfect GIF for you! \ud83c\udfac ![Person laughing hysterically](https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif) *Funny laughing reaction* \ud83d\udcda *From curated GIF collection* - Want another one? I have GIFs for every mood and situation!\"",
      "title": "3. GIF Master \ud83c\udfac"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#rag-integration",
      "text": "",
      "title": "RAG Integration"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#content-database-structure",
      "text": "Each entertainment agent leverages the RAG system for consistent, high-quality content: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 // Example content items { id : 'joke_007' , type : 'joke' , content : \"Why do programmers prefer dark mode? Because light attracts bugs!\" , category : 'tech_joke' , tags : [ 'programming' , 'tech' , 'dark mode' , 'bugs' , 'pun' ], rating : 5 }, { id : 'trivia_001' , type : 'trivia' , content : \"Did you know that octopuses have three hearts and blue blood?\" , category : 'animals' , tags : [ 'octopus' , 'hearts' , 'blood' , 'marine' , 'biology' ], rating : 5 }, { id : 'gif_001' , type : 'gif' , content : 'https://media.giphy.com/media/3o7abKhOpu0NwenH3O/giphy.gif' , category : 'funny' , tags : [ 'funny' , 'laugh' , 'comedy' , 'silly' , 'animated' ], rating : 4 , metadata : { description : 'Funny laughing reaction' , alt : 'Person laughing hysterically' } }",
      "title": "Content Database Structure"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#smart-content-selection",
      "text": "The system uses intelligent search algorithms to match content to user requests: Context Analysis - Analyzes user message for intent and mood Relevance Scoring - Ranks content by relevance to user request Quality Filtering - Prioritizes highly-rated content (4-5 stars) Fallback Strategy - Provides random quality content if no perfect match Variety Ensuring - Avoids repetition through smart selection",
      "title": "Smart Content Selection"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#system-integration",
      "text": "",
      "title": "System Integration"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#agent-classification",
      "text": "Entertainment agents are properly integrated into the message classification system: 1 2 3 4 5 6 7 // Classification examples \"Tell me a joke\" \u2192 joke ( confidence : 0.9 ) \"Share a fun fact\" \u2192 trivia ( confidence : 0.85 ) \"Show me a gif\" \u2192 gif ( confidence : 0.9 ) \"Make me laugh\" \u2192 joke ( confidence : 0.8 ) \"Something interesting\" \u2192 trivia ( confidence : 0.7 ) \"Funny picture\" \u2192 gif ( confidence : 0.8 )",
      "title": "Agent Classification"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#hold-agent-coordination",
      "text": "Entertainment agents work seamlessly with the Hold Agent system: Introduction Phase - Hold Agent presents entertainment options Selection Handling - User chooses preferred entertainment type Smooth Handoff - Transition to selected entertainment agent Engagement Monitoring - Track user interaction and satisfaction Return Coordination - Handle returns to Hold Agent for updates",
      "title": "Hold Agent Coordination"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#goal-seeking-integration",
      "text": "Entertainment agents participate in proactive customer engagement: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Example proactive entertainment actions { type : 'entertainment_offer' , agentType : 'joke' , message : 'While you wait, would you like to hear a joke?' , timing : 'immediate' , priority : 'high' }, { type : 'engagement_check' , agentType : 'trivia' , message : 'Would you like to learn something fascinating while we wait?' , timing : 'after_5min' , priority : 'medium' }",
      "title": "Goal-Seeking Integration"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#user-experience-features",
      "text": "",
      "title": "User Experience Features"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#adaptive-personalization",
      "text": "Joke Master Personalization : Tracks user reactions to different joke types Adjusts humor style based on positive/negative feedback Remembers preferred categories (dad jokes vs. tech humor) Learns from conversation patterns and timing Trivia Master Engagement : Monitors user interest in different topic categories Follows up with related facts based on engagement Adjusts complexity based on user responses Encourages deeper exploration of interesting topics GIF Master Context Awareness : Selects mood-appropriate content Considers conversation tone and context Provides variety while matching user preferences Includes accessibility features for all users",
      "title": "Adaptive Personalization"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#quality-assurance",
      "text": "Content Standards : All content rated 4-5 stars for quality assurance Family-friendly and workplace-appropriate Factually accurate trivia content Tested for engagement and entertainment value Accessibility Features : Alt text for all visual content (GIFs) Clear, understandable language Inclusive humor that doesn't target groups Screen reader compatible descriptions",
      "title": "Quality Assurance"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#configuration-and-customization",
      "text": "",
      "title": "Configuration and Customization"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#agent-personality-settings",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // Joke Master configuration { name : 'Adaptive Joke Master' , personality : 'witty, adaptive, learning-focused' , responseStyle : 'casual but professional' , followUpRate : 0.8 , // 80% chance of follow-up engagement adaptationSpeed : 'medium' // How quickly it learns preferences } // Trivia Master configuration { name : 'Trivia Master' , personality : 'knowledgeable, enthusiastic, educational' , responseStyle : 'informative but engaging' , factAccuracy : 'high' , // Requires fact verification topicDiversity : 'high' // Covers many subject areas } // GIF Master configuration { name : 'GIF Master' , personality : 'visual, expressive, mood-enhancing' , responseStyle : 'playful and supportive' , contentModeration : 'strict' , // Family-friendly only accessibilityCompliance : 'full' // Alt text required }",
      "title": "Agent Personality Settings"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#content-expansion",
      "text": "Adding New Content : 1 2 3 4 5 6 7 8 9 10 // Example of adding seasonal content ragService . addContent ({ id : 'joke_seasonal_001' , type : 'joke' , content : \"Why don't Christmas trees ever get lost? They always know where their roots are!\" , category : 'seasonal_joke' , tags : [ 'christmas' , 'tree' , 'seasonal' , 'pun' , 'family' ], rating : 4 , metadata : { season : 'winter' , holiday : 'christmas' }, }); Content Categories Expansion : Seasonal content (holidays, weather) Industry-specific humor (healthcare, education, retail) Cultural content (different regions, languages) Trending topics (current events, viral content)",
      "title": "Content Expansion"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#performance-monitoring",
      "text": "",
      "title": "Performance Monitoring"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#entertainment-metrics",
      "text": "Engagement Tracking : User response rates to entertainment offers Average interaction duration with each agent type User satisfaction indicators (reactions, continued engagement) Content effectiveness (which jokes/facts get best responses) Quality Metrics : Content relevance scores for user requests Fallback usage rates (when no perfect match found) User preference learning accuracy Agent handoff success rates Analytics Dashboard Data : 1 2 3 4 5 6 7 8 9 10 { entertainmentSession : { agentType : 'joke' , contentDelivered : 5 , userEngagement : 'high' , preferredCategories : [ 'tech_joke' , 'dad_joke' ], sessionDuration : 180 , // seconds satisfactionScore : 4.2 // out of 5 } }",
      "title": "Entertainment Metrics"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#best-practices",
      "text": "",
      "title": "Best Practices"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#for-content-creators",
      "text": "Quality First : Only include 4-5 star rated content Test with Audiences : Validate entertainment value before adding Diverse Categories : Ensure broad appeal across different interests Appropriate Content : Maintain family-friendly, professional standards Regular Updates : Keep content fresh and relevant",
      "title": "For Content Creators"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#for-system-administrators",
      "text": "Monitor Engagement : Track which content types perform best Update Regularly : Refresh database with new, trending content User Feedback : Analyze interaction patterns for insights Performance Optimization : Ensure fast content retrieval Accessibility Compliance : Maintain full accessibility features",
      "title": "For System Administrators"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#for-customer-service-teams",
      "text": "Understand Options : Know what entertainment is available Appropriate Timing : Offer entertainment during natural pauses Respect Preferences : Don't force entertainment on uninterested users Monitor Engagement : Watch for user fatigue or disengagement Professional Balance : Maintain service standards while being entertaining",
      "title": "For Customer Service Teams"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#troubleshooting",
      "text": "",
      "title": "Troubleshooting"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#common-issues",
      "text": "Users Not Engaging with Entertainment : Review introduction messaging and offer timing Consider different entertainment types for different user personalities Ensure content quality and relevance to user interests Repetitive Content : Check variety algorithms in content selection Expand content database with more diverse options Implement better rotation logic to avoid repetition Inappropriate Content Concerns : Review content rating and approval processes Implement stricter content moderation rules Add user reporting mechanisms for problematic content",
      "title": "Common Issues"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#debug-information",
      "text": "1 2 3 4 5 // Entertainment session debugging console . log ( `\ud83c\udfad Entertainment session: ${ agentType } for user ${ userId } ` ); console . log ( `\ud83d\udd0d Content search: \" ${ query } \" \u2192 ${ results . length } matches` ); console . log ( `\u2b50 Selected content: ${ selectedContent . id } (rating: ${ selectedContent . rating } )` ); console . log ( `\ud83d\udcca User engagement: ${ engagementLevel } ` );",
      "title": "Debug Information"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#future-enhancements",
      "text": "",
      "title": "Future Enhancements"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#planned-features",
      "text": "AI-Generated Content : Supplement RAG database with AI-created jokes/facts User Preference Learning : Advanced ML for personalization Multi-media Support : Audio clips, interactive content Social Features : User-generated content, sharing capabilities Advanced Analytics : Detailed entertainment effectiveness metrics Real-time Trends : Integration with trending topics and viral content",
      "title": "Planned Features"
    },
    {
      "location": "architecture/components/_sources/entertainment-agents/#integration-opportunities",
      "text": "Calendar Integration : Seasonal and holiday-appropriate content Industry Customization : Specialized content for different business sectors Language Localization : Multi-language entertainment content Accessibility Enhancement : Voice-based entertainment options External API Integration : Live content from comedy/trivia services The Entertainment Agents system provides a comprehensive, professional entertainment experience that enhances customer satisfaction during service interactions while maintaining the highest standards of quality and appropriateness.",
      "title": "Integration Opportunities"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/",
      "text": "Goal-Seeking System Documentation \u00b6 Overview \u00b6 The Goal-Seeking System is an intelligent, proactive chat assistant that dynamically adapts to user needs by pursuing specific goals. It's designed to entertain users while they're on hold and provide technical support when needed. Key Features \u00b6 \ud83c\udfaf Goal-Driven Behavior \u00b6 Entertainment Goals : Keeps users engaged with jokes, trivia, and conversation while waiting Technical Support Goals : Provides comprehensive technical assistance for programming and development questions Engagement Goals : Maintains active conversation and prevents user abandonment \ud83e\udde0 Intelligent Agent Selection \u00b6 Technical Agent : Specialized in programming, debugging, and technical problem-solving Dad Joke Master : Provides groan-worthy dad jokes and puns Trivia Master : Shares fascinating facts and educational content General Agent : Handles casual conversation and general assistance \ud83d\udd04 Proactive Actions \u00b6 Immediate Actions : Instant responses to user state changes Delayed Actions : Scheduled interventions (e.g., checking in after inactivity) Context-Aware : Actions based on user preferences and current situation Architecture \u00b6 Core Components \u00b6 1. GoalSeekingSystem ( goalSeekingSystem.ts ) \u00b6 The central orchestrator that manages user states and goal progression. Key Classes: GoalSeekingSystem : Main system coordinator UserState : Tracks user context and preferences Goal : Defines objectives and success criteria GoalAction : Represents proactive interventions 2. AgentService ( agentService.ts ) \u00b6 Enhanced agent service with goal-seeking integration. Key Methods: processMessageWithGoalSeeking() : Processes messages with goal awareness executeProactiveAction() : Executes system-generated actions getUserGoalState() : Retrieves user's current goal state 3. Socket Integration ( socketHandlers.ts ) \u00b6 Real-time communication with proactive message delivery. New Events: proactive_message : Delivers system-initiated messages proactive_error : Handles proactive action failures User States \u00b6 Current State Types \u00b6 on_hold : User is waiting for support waiting_for_help : User has a specific problem to solve active_conversation : User is actively engaged idle : User is present but not actively communicating Entertainment Preferences \u00b6 jokes : Prefers humor and dad jokes trivia : Enjoys facts and educational content general_chat : Likes casual conversation mixed : Rotates between different entertainment types Metrics \u00b6 Engagement Level (0-1): How actively the user is participating Satisfaction Level (0-1): User's apparent satisfaction with responses Technical Context : Extracted technical information from messages Goal Types \u00b6 1. Entertainment Goals \u00b6 Purpose : Keep users entertained while waiting Activation Triggers: User state is on_hold Engagement level < 0.6 User mentions waiting, queue, or hold Success Criteria: User responds positively to entertainment Engagement level > 0.7 User remains in conversation Example Actions: 1 2 3 4 5 6 { type : 'proactive_message' , agentType : 'dad_joke' , message : \"Time for a dad joke to brighten your wait!\" , timing : 'immediate' } 2. Technical Support Goals \u00b6 Purpose : Provide effective technical assistance Activation Triggers: User state is waiting_for_help Technical context is detected User mentions code, error, bug, programming Success Criteria: User problem is resolved Technical accuracy is maintained User satisfaction > 0.8 Example Actions: 1 2 3 4 5 6 { type : 'technical_check' , agentType : 'technical' , message : \"I'm here to help with your technical question. What specific issue can I assist you with?\" , timing : 'immediate' } 3. Engagement Goals \u00b6 Purpose : Maintain user engagement and prevent abandonment Activation Triggers: Engagement level < 0.5 Time since last interaction > 30 seconds User gives short responses Success Criteria: User continues conversation Response time < 5 minutes User asks follow-up questions Example Actions: 1 2 3 4 5 6 7 { type : 'entertainment_offer' , agentType : 'general' , message : \"Would you like me to entertain you with a joke, share some trivia, or help with a technical question?\" , timing : 'delayed' , delayMs : 30000 } Implementation Details \u00b6 Message Processing Flow \u00b6 User Message Received Initialize user in goal-seeking system Update user state based on message content Activate relevant goals Agent Selection Process message with appropriate agent Consider goal priorities and user preferences Generate response with confidence scoring Goal Progress Update Analyze user response for satisfaction indicators Update goal progress and user metrics Adjust engagement and satisfaction levels Proactive Action Generation Generate actions based on active goals Prioritize by goal importance and user needs Schedule immediate or delayed execution Proactive Action Execution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const executeProactiveAction = async ( action : GoalAction , conversation : Conversation , socket : any , io : Server ) => { // Execute action using agent service const response = await agentService . executeProactiveAction ( userId , action , conversation . messages ); // Create proactive message const proactiveMessage : Message = { // ... message properties isProactive : true , // Mark as system-initiated }; // Emit to conversation io . to ( conversationId ). emit ( 'proactive_message' , { message : proactiveMessage , actionType : action.type , agentUsed : response.agentUsed , }); }; Usage Examples \u00b6 Example 1: User Waiting for Support \u00b6 1 2 3 4 User: \"I'm waiting for support\" System: Activates entertainment goal Agent: \"I noticed you might be waiting - how about a dad joke to pass the time?\" Proactive Action: Offers entertainment options after 30 seconds Example 2: Technical Question \u00b6 1 2 3 4 User: \"I have a JavaScript error in my code\" System: Activates technical support goal Agent: \"I can help you with that JavaScript error. Can you share the error message?\" Proactive Action: Follows up if user doesn't respond within 2 minutes Example 3: Low Engagement \u00b6 1 2 3 System: Detects user giving short responses Goal: Engagement goal activates Proactive Action: \"Is there anything specific I can help you with today?\" Frontend Integration \u00b6 Visual Indicators \u00b6 Proactive Message Badge : Messages initiated by the system show a \"\ud83c\udfaf Proactive\" badge Agent Indicators : Clear visual distinction between different agent types Confidence Scoring : Shows AI confidence levels for transparency Real-time Updates \u00b6 Proactive messages appear automatically Smooth integration with existing chat flow Error handling for failed proactive actions Configuration \u00b6 Goal Templates \u00b6 Goals are defined with: type : Category of goal priority : Numerical priority (1-10) success_criteria : Array of success conditions description : Human-readable description User Cleanup \u00b6 Inactive users are automatically cleaned up after 1 hour of inactivity to prevent memory leaks. Performance Considerations \u00b6 Memory Management \u00b6 User states are stored in-memory for fast access Automatic cleanup of inactive users Goal progress tracking is lightweight Scalability \u00b6 Stateless goal execution Efficient user state updates Minimal database impact Future Enhancements \u00b6 Machine Learning Integration Learn from user preferences over time Predict optimal entertainment types Improve goal success rates Advanced Scheduling More sophisticated timing algorithms Context-aware scheduling Priority-based action queuing Analytics Dashboard Goal success metrics User satisfaction tracking Agent performance analytics Custom Goal Types User-defined goals Business-specific objectives Dynamic goal creation Testing \u00b6 Demo Script \u00b6 Run the demo to see the goal-seeking system in action: 1 2 3 4 cd backend npm run demo:goals # If script is added to package.json # OR npx ts-node src/demo/goalSeekingDemo.ts Testing Scenarios \u00b6 On-Hold Experience : User says \"I'm waiting\" Technical Support : User asks programming questions Entertainment Preferences : User requests jokes or trivia Engagement Recovery : User becomes less responsive Conclusion \u00b6 The Goal-Seeking System transforms the chat experience from reactive to proactive, ensuring users are entertained while waiting and receive comprehensive technical support when needed. By intelligently managing multiple goals and adapting to user behavior, it creates a more engaging and effective chat assistant.",
      "title": "Goal-Seeking System Documentation"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#goal-seeking-system-documentation",
      "text": "",
      "title": "Goal-Seeking System Documentation"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#overview",
      "text": "The Goal-Seeking System is an intelligent, proactive chat assistant that dynamically adapts to user needs by pursuing specific goals. It's designed to entertain users while they're on hold and provide technical support when needed.",
      "title": "Overview"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#key-features",
      "text": "",
      "title": "Key Features"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#goal-driven-behavior",
      "text": "Entertainment Goals : Keeps users engaged with jokes, trivia, and conversation while waiting Technical Support Goals : Provides comprehensive technical assistance for programming and development questions Engagement Goals : Maintains active conversation and prevents user abandonment",
      "title": "\ud83c\udfaf Goal-Driven Behavior"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#intelligent-agent-selection",
      "text": "Technical Agent : Specialized in programming, debugging, and technical problem-solving Dad Joke Master : Provides groan-worthy dad jokes and puns Trivia Master : Shares fascinating facts and educational content General Agent : Handles casual conversation and general assistance",
      "title": "\ud83e\udde0 Intelligent Agent Selection"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#proactive-actions",
      "text": "Immediate Actions : Instant responses to user state changes Delayed Actions : Scheduled interventions (e.g., checking in after inactivity) Context-Aware : Actions based on user preferences and current situation",
      "title": "\ud83d\udd04 Proactive Actions"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#architecture",
      "text": "",
      "title": "Architecture"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#core-components",
      "text": "",
      "title": "Core Components"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#1-goalseekingsystem-goalseekingsystemts",
      "text": "The central orchestrator that manages user states and goal progression. Key Classes: GoalSeekingSystem : Main system coordinator UserState : Tracks user context and preferences Goal : Defines objectives and success criteria GoalAction : Represents proactive interventions",
      "title": "1. GoalSeekingSystem (goalSeekingSystem.ts)"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#2-agentservice-agentservicets",
      "text": "Enhanced agent service with goal-seeking integration. Key Methods: processMessageWithGoalSeeking() : Processes messages with goal awareness executeProactiveAction() : Executes system-generated actions getUserGoalState() : Retrieves user's current goal state",
      "title": "2. AgentService (agentService.ts)"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#3-socket-integration-sockethandlersts",
      "text": "Real-time communication with proactive message delivery. New Events: proactive_message : Delivers system-initiated messages proactive_error : Handles proactive action failures",
      "title": "3. Socket Integration (socketHandlers.ts)"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#user-states",
      "text": "",
      "title": "User States"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#current-state-types",
      "text": "on_hold : User is waiting for support waiting_for_help : User has a specific problem to solve active_conversation : User is actively engaged idle : User is present but not actively communicating",
      "title": "Current State Types"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#entertainment-preferences",
      "text": "jokes : Prefers humor and dad jokes trivia : Enjoys facts and educational content general_chat : Likes casual conversation mixed : Rotates between different entertainment types",
      "title": "Entertainment Preferences"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#metrics",
      "text": "Engagement Level (0-1): How actively the user is participating Satisfaction Level (0-1): User's apparent satisfaction with responses Technical Context : Extracted technical information from messages",
      "title": "Metrics"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#goal-types",
      "text": "",
      "title": "Goal Types"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#1-entertainment-goals",
      "text": "Purpose : Keep users entertained while waiting Activation Triggers: User state is on_hold Engagement level < 0.6 User mentions waiting, queue, or hold Success Criteria: User responds positively to entertainment Engagement level > 0.7 User remains in conversation Example Actions: 1 2 3 4 5 6 { type : 'proactive_message' , agentType : 'dad_joke' , message : \"Time for a dad joke to brighten your wait!\" , timing : 'immediate' }",
      "title": "1. Entertainment Goals"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#2-technical-support-goals",
      "text": "Purpose : Provide effective technical assistance Activation Triggers: User state is waiting_for_help Technical context is detected User mentions code, error, bug, programming Success Criteria: User problem is resolved Technical accuracy is maintained User satisfaction > 0.8 Example Actions: 1 2 3 4 5 6 { type : 'technical_check' , agentType : 'technical' , message : \"I'm here to help with your technical question. What specific issue can I assist you with?\" , timing : 'immediate' }",
      "title": "2. Technical Support Goals"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#3-engagement-goals",
      "text": "Purpose : Maintain user engagement and prevent abandonment Activation Triggers: Engagement level < 0.5 Time since last interaction > 30 seconds User gives short responses Success Criteria: User continues conversation Response time < 5 minutes User asks follow-up questions Example Actions: 1 2 3 4 5 6 7 { type : 'entertainment_offer' , agentType : 'general' , message : \"Would you like me to entertain you with a joke, share some trivia, or help with a technical question?\" , timing : 'delayed' , delayMs : 30000 }",
      "title": "3. Engagement Goals"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#implementation-details",
      "text": "",
      "title": "Implementation Details"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#message-processing-flow",
      "text": "User Message Received Initialize user in goal-seeking system Update user state based on message content Activate relevant goals Agent Selection Process message with appropriate agent Consider goal priorities and user preferences Generate response with confidence scoring Goal Progress Update Analyze user response for satisfaction indicators Update goal progress and user metrics Adjust engagement and satisfaction levels Proactive Action Generation Generate actions based on active goals Prioritize by goal importance and user needs Schedule immediate or delayed execution",
      "title": "Message Processing Flow"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#proactive-action-execution",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 const executeProactiveAction = async ( action : GoalAction , conversation : Conversation , socket : any , io : Server ) => { // Execute action using agent service const response = await agentService . executeProactiveAction ( userId , action , conversation . messages ); // Create proactive message const proactiveMessage : Message = { // ... message properties isProactive : true , // Mark as system-initiated }; // Emit to conversation io . to ( conversationId ). emit ( 'proactive_message' , { message : proactiveMessage , actionType : action.type , agentUsed : response.agentUsed , }); };",
      "title": "Proactive Action Execution"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#usage-examples",
      "text": "",
      "title": "Usage Examples"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#example-1-user-waiting-for-support",
      "text": "1 2 3 4 User: \"I'm waiting for support\" System: Activates entertainment goal Agent: \"I noticed you might be waiting - how about a dad joke to pass the time?\" Proactive Action: Offers entertainment options after 30 seconds",
      "title": "Example 1: User Waiting for Support"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#example-2-technical-question",
      "text": "1 2 3 4 User: \"I have a JavaScript error in my code\" System: Activates technical support goal Agent: \"I can help you with that JavaScript error. Can you share the error message?\" Proactive Action: Follows up if user doesn't respond within 2 minutes",
      "title": "Example 2: Technical Question"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#example-3-low-engagement",
      "text": "1 2 3 System: Detects user giving short responses Goal: Engagement goal activates Proactive Action: \"Is there anything specific I can help you with today?\"",
      "title": "Example 3: Low Engagement"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#frontend-integration",
      "text": "",
      "title": "Frontend Integration"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#visual-indicators",
      "text": "Proactive Message Badge : Messages initiated by the system show a \"\ud83c\udfaf Proactive\" badge Agent Indicators : Clear visual distinction between different agent types Confidence Scoring : Shows AI confidence levels for transparency",
      "title": "Visual Indicators"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#real-time-updates",
      "text": "Proactive messages appear automatically Smooth integration with existing chat flow Error handling for failed proactive actions",
      "title": "Real-time Updates"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#configuration",
      "text": "",
      "title": "Configuration"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#goal-templates",
      "text": "Goals are defined with: type : Category of goal priority : Numerical priority (1-10) success_criteria : Array of success conditions description : Human-readable description",
      "title": "Goal Templates"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#user-cleanup",
      "text": "Inactive users are automatically cleaned up after 1 hour of inactivity to prevent memory leaks.",
      "title": "User Cleanup"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#performance-considerations",
      "text": "",
      "title": "Performance Considerations"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#memory-management",
      "text": "User states are stored in-memory for fast access Automatic cleanup of inactive users Goal progress tracking is lightweight",
      "title": "Memory Management"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#scalability",
      "text": "Stateless goal execution Efficient user state updates Minimal database impact",
      "title": "Scalability"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#future-enhancements",
      "text": "Machine Learning Integration Learn from user preferences over time Predict optimal entertainment types Improve goal success rates Advanced Scheduling More sophisticated timing algorithms Context-aware scheduling Priority-based action queuing Analytics Dashboard Goal success metrics User satisfaction tracking Agent performance analytics Custom Goal Types User-defined goals Business-specific objectives Dynamic goal creation",
      "title": "Future Enhancements"
    },
    { "location": "architecture/components/_sources/goal-seeking-system/#testing", "text": "", "title": "Testing" },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#demo-script",
      "text": "Run the demo to see the goal-seeking system in action: 1 2 3 4 cd backend npm run demo:goals # If script is added to package.json # OR npx ts-node src/demo/goalSeekingDemo.ts",
      "title": "Demo Script"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#testing-scenarios",
      "text": "On-Hold Experience : User says \"I'm waiting\" Technical Support : User asks programming questions Entertainment Preferences : User requests jokes or trivia Engagement Recovery : User becomes less responsive",
      "title": "Testing Scenarios"
    },
    {
      "location": "architecture/components/_sources/goal-seeking-system/#conclusion",
      "text": "The Goal-Seeking System transforms the chat experience from reactive to proactive, ensuring users are entertained while waiting and receive comprehensive technical support when needed. By intelligently managing multiple goals and adapting to user behavior, it creates a more engaging and effective chat assistant.",
      "title": "Conclusion"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/",
      "text": "Hold Agent System Documentation \u00b6 Overview \u00b6 The Hold Agent system manages customer hold experiences in the customer service demo, providing transparent wait time communication, entertainment coordination, and automated status updates. This system transforms potentially frustrating wait times into engaging, professional customer experiences. Architecture \u00b6 Core Components \u00b6 Hold Agent - Main agent managing hold experience Entertainment Coordination - Integration with Joke, Trivia, and GIF Masters Automated Updates - 10-minute interval status updates Goal-Seeking Integration - Proactive entertainment and status management Hold Agent Features \u00b6 Initial Hold Greeting \u00b6 When customers first connect, the Hold Agent provides: Transparent Wait Times - Honest estimates (15-30 minutes for demo) Professional Communication - Empathetic and understanding tone Entertainment Options - Immediate introduction to available entertainment Clear Expectations - No false promises or misleading information Example Initial Greeting: \u00b6 1 2 3 4 5 6 7 8 Welcome to our customer service! I'm here to help you get connected with the right specialist. I need to let you know that we're currently experiencing high call volume, and your estimated wait time is approximately 20-25 minutes. While you wait, I can connect you with our entertainment team to make your hold experience more enjoyable! We have: - Our Adaptive Joke Master for personalized humor - Trivia Master for fascinating facts - GIF Master for visual entertainment Would you like me to introduce you to one of them while we work on getting you connected to a specialist? Automated Status Updates \u00b6 The system provides regular updates every 10 minutes: Wait Time Updates - Current estimated time remaining Progress Communication - How long they've been waiting Entertainment Check - Asking about current entertainment experience Continued Empathy - Acknowledging the inconvenience Example 10-Minute Update: \u00b6 1 Hi there! I wanted to give you a quick update on your wait time. You've been waiting for about 10 minutes now, and we estimate another 10-15 minutes before we can connect you with a specialist. I apologize for the continued wait. Are you enjoying the entertainment? Entertainment Coordination \u00b6 The Hold Agent seamlessly coordinates with entertainment agents: Introduction Phase - Presents available entertainment options Handoff Management - Smooth transitions to selected entertainment Status Monitoring - Tracks customer engagement during entertainment Return Coordination - Manages return to hold updates when needed System Integration \u00b6 Goal-Seeking System Integration \u00b6 The Hold Agent leverages the goal-seeking system for: Hold Management Goals \u00b6 Entertainment Activation - Automatically activates entertainment options Update Scheduling - Sets up 10-minute interval updates Engagement Monitoring - Tracks customer interaction levels Transition Management - Handles handoffs to specialists Proactive Actions \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Example proactive actions generated by Hold Agent { type : 'status_update' , agentType : 'hold_agent' , message : 'Update on wait time and progress' , timing : 'scheduled' , // Every 10 minutes priority : 'medium' }, { type : 'entertainment_offer' , agentType : 'joke' , // or 'trivia', 'gif' message : 'Would you like some entertainment while you wait?' , timing : 'immediate' , priority : 'high' } Agent Classification Integration \u00b6 The Hold Agent is properly integrated into the message classification system: Classification Keywords \u00b6 \"wait time\", \"how long\", \"still waiting\" \"hold\", \"queue\", \"when will\", \"time remaining\" \"status\", \"update\", \"progress\", \"eta\" \"entertainment\", \"while I wait\", \"keep me busy\" Routing Logic \u00b6 1 2 3 4 // Messages about wait times route to Hold Agent if ( message . includes ( 'wait time' ) || message . includes ( 'how long' )) { return { agentType : 'hold_agent' , confidence : 0.9 }; } Configuration \u00b6 Hold Agent Settings \u00b6 1 2 3 4 5 6 7 8 9 // Agent configuration in config.ts { name : 'Hold Agent' , type : 'hold_agent' , systemPrompt : `You are a professional Hold Agent managing customer wait experiences...` , model : 'gpt-3.5-turbo' , temperature : 0.7 , maxTokens : 400 } Goal-Seeking Rules \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Hold-specific goals activated automatically const holdGoals = [ { id : 'entertainment_activation' , name : 'Activate Entertainment' , description : 'Offer entertainment options during hold' , triggers : [ 'user_on_hold' , 'initial_connection' ], actions : [ 'entertainment_offer' ], }, { id : 'status_updates' , name : 'Regular Status Updates' , description : 'Provide updates every 10 minutes' , triggers : [ 'hold_duration_10min' ], actions : [ 'status_update' ], }, ]; Wait Time Management \u00b6 Demo Configuration \u00b6 For demonstration purposes, the system uses realistic wait times: Initial Estimate : 20-25 minutes Update Intervals : Every 10 minutes Realistic Decreases : Wait time reduces with each update Honest Communication : No false promises or unrealistic estimates Calculation Logic \u00b6 1 2 3 4 5 6 7 8 // Example wait time calculation const calculateWaitTime = ( customerWaitDuration : number ) : string => { const baseWaitTime = 25 ; // minutes const waitedTime = Math . floor ( customerWaitDuration / 60000 ); // convert to minutes const remainingTime = Math . max ( 5 , baseWaitTime - waitedTime ); return `approximately ${ remainingTime - 2 } - ${ remainingTime } minutes` ; }; Entertainment Integration \u00b6 Available Entertainment Options \u00b6 Adaptive Joke Master Personalized humor based on reactions Multiple joke categories (dad jokes, tech humor, etc.) RAG-powered quality content Trivia Master Fascinating facts across multiple categories Science, animals, space, history topics Educational and engaging content GIF Master Visual entertainment and reactions Mood-appropriate animated content Accessibility features with alt text Coordination Workflow \u00b6 1 2 3 4 5 6 7 // Entertainment coordination flow 1. Hold Agent offers entertainment options 2. Customer selects preferred entertainment 3. Smooth handoff to selected entertainment agent 4. Entertainment agent engages customer 5. Hold Agent monitors and provides updates 6. Seamless return to Hold Agent for status updates Professional Communication Guidelines \u00b6 Tone and Style \u00b6 Empathetic : Acknowledge inconvenience and frustration Transparent : Provide honest wait time estimates Professional : Maintain business standards throughout Helpful : Actively offer solutions and entertainment Consistent : Regular updates without being pushy Key Phrases \u00b6 Initial Contact: \"I need to let you know that we're currently experiencing...\" \"Your estimated wait time is approximately...\" \"While you wait, I can connect you with...\" Status Updates: \"I wanted to give you a quick update...\" \"You've been waiting for about X minutes now...\" \"I apologize for the continued wait...\" Entertainment Offers: \"Would you like me to introduce you to...\" \"We have several entertainment options available...\" \"Let me connect you with someone who can...\" Performance Monitoring \u00b6 Metrics Tracked \u00b6 Wait Time Accuracy - How accurate initial estimates prove to be Entertainment Engagement - Percentage of customers who accept entertainment Update Frequency - Timing of automated status updates Handoff Success - Smooth transitions to specialists Customer Satisfaction - Implied through interaction patterns Analytics Integration \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 // Example metrics collection { holdSessionId : 'hold_12345' , customerId : 'user_789' , initialWaitEstimate : 25 , // minutes actualWaitTime : 22 , // minutes entertainmentAccepted : true , entertainmentType : 'joke' , updatesProvided : 3 , handoffSuccess : true , timestamp : new Date () } Best Practices \u00b6 For Customer Service Teams \u00b6 Set Realistic Expectations - Never underestimate wait times Provide Regular Updates - Keep customers informed every 10 minutes Offer Value-Added Services - Entertainment during wait times Maintain Professional Tone - Empathetic but not overly casual Track Performance - Monitor wait time accuracy and satisfaction For System Administrators \u00b6 Monitor Queue Lengths - Adjust wait time estimates based on actual queues Update Entertainment Content - Keep RAG database fresh and relevant Optimize Handoff Logic - Ensure smooth transitions between agents Review Customer Feedback - Analyze interaction patterns for improvements System Health Checks - Monitor goal-seeking system performance Troubleshooting \u00b6 Common Issues \u00b6 Customers Not Accepting Entertainment: Review entertainment introduction messaging Ensure entertainment options are clearly explained Consider entertainment preferences based on time of day Inaccurate Wait Time Estimates: Calibrate estimation algorithms with actual data Consider peak/off-peak timing patterns Implement dynamic adjustment based on queue length Missing Status Updates: Verify goal-seeking system is properly scheduling updates Check for interference from other agent activities Ensure update intervals are properly configured Debug Mode \u00b6 Enable detailed logging for hold session analysis: 1 2 3 4 5 // Console logs for hold session monitoring console . log ( `\ud83d\udd50 Hold session started for user ${ userId } , estimated wait: ${ waitTime } ` ); console . log ( `\ud83c\udfaa Entertainment offered: ${ entertainmentOptions . join ( ', ' ) } ` ); console . log ( `\ud83d\udce2 Status update ${ updateNumber } sent to user ${ userId } ` ); console . log ( `\ud83c\udfaf Goal activated: ${ goalName } for user ${ userId } ` ); Future Enhancements \u00b6 Planned Features \u00b6 Dynamic Wait Time Calculation - Real-time queue analysis Personalized Entertainment - AI-driven content selection Multi-language Support - Localized hold experiences Callback Options - \"Call me back when ready\" functionality Advanced Analytics - Detailed customer satisfaction metrics Integration with Actual Queues - Real customer service system integration Scalability Considerations \u00b6 Multi-tenant Support - Different organizations with custom wait experiences Peak Load Handling - Efficient management during high-volume periods Regional Customization - Different hold experiences by geographic region Industry Specialization - Tailored experiences for different business types Integration Examples \u00b6 Basic Hold Session \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Initialize hold session const holdSession = await agentService . initializeConversation ( userId , 'hold_agent' ); // Process initial message const response = await agentService . processMessageWithBothSystems ( userId , 'How long is the wait?' , conversationHistory , conversationId , 'hold_agent' , ); // Handle proactive actions (entertainment offers, updates) if ( response . proactiveActions ) { for ( const action of response . proactiveActions ) { await agentService . executeProactiveAction ( userId , action , conversationHistory ); } } Entertainment Handoff \u00b6 1 2 3 4 5 6 7 8 9 10 // Customer accepts entertainment offer const entertainmentResponse = await agentService . processMessageWithBothSystems ( userId , \"Yes, I'd like some jokes while I wait\" , conversationHistory , conversationId , ); // System automatically transitions to Joke Master // Hold Agent continues monitoring in background for updates This Hold Agent system provides a comprehensive solution for managing customer wait experiences, combining professional communication standards with engaging entertainment options and transparent status updates.",
      "title": "Hold Agent System Documentation"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#hold-agent-system-documentation",
      "text": "",
      "title": "Hold Agent System Documentation"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#overview",
      "text": "The Hold Agent system manages customer hold experiences in the customer service demo, providing transparent wait time communication, entertainment coordination, and automated status updates. This system transforms potentially frustrating wait times into engaging, professional customer experiences.",
      "title": "Overview"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#architecture",
      "text": "",
      "title": "Architecture"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#core-components",
      "text": "Hold Agent - Main agent managing hold experience Entertainment Coordination - Integration with Joke, Trivia, and GIF Masters Automated Updates - 10-minute interval status updates Goal-Seeking Integration - Proactive entertainment and status management",
      "title": "Core Components"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#hold-agent-features",
      "text": "",
      "title": "Hold Agent Features"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#initial-hold-greeting",
      "text": "When customers first connect, the Hold Agent provides: Transparent Wait Times - Honest estimates (15-30 minutes for demo) Professional Communication - Empathetic and understanding tone Entertainment Options - Immediate introduction to available entertainment Clear Expectations - No false promises or misleading information",
      "title": "Initial Hold Greeting"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#example-initial-greeting",
      "text": "1 2 3 4 5 6 7 8 Welcome to our customer service! I'm here to help you get connected with the right specialist. I need to let you know that we're currently experiencing high call volume, and your estimated wait time is approximately 20-25 minutes. While you wait, I can connect you with our entertainment team to make your hold experience more enjoyable! We have: - Our Adaptive Joke Master for personalized humor - Trivia Master for fascinating facts - GIF Master for visual entertainment Would you like me to introduce you to one of them while we work on getting you connected to a specialist?",
      "title": "Example Initial Greeting:"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#automated-status-updates",
      "text": "The system provides regular updates every 10 minutes: Wait Time Updates - Current estimated time remaining Progress Communication - How long they've been waiting Entertainment Check - Asking about current entertainment experience Continued Empathy - Acknowledging the inconvenience",
      "title": "Automated Status Updates"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#example-10-minute-update",
      "text": "1 Hi there! I wanted to give you a quick update on your wait time. You've been waiting for about 10 minutes now, and we estimate another 10-15 minutes before we can connect you with a specialist. I apologize for the continued wait. Are you enjoying the entertainment?",
      "title": "Example 10-Minute Update:"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#entertainment-coordination",
      "text": "The Hold Agent seamlessly coordinates with entertainment agents: Introduction Phase - Presents available entertainment options Handoff Management - Smooth transitions to selected entertainment Status Monitoring - Tracks customer engagement during entertainment Return Coordination - Manages return to hold updates when needed",
      "title": "Entertainment Coordination"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#system-integration",
      "text": "",
      "title": "System Integration"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#goal-seeking-system-integration",
      "text": "The Hold Agent leverages the goal-seeking system for:",
      "title": "Goal-Seeking System Integration"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#hold-management-goals",
      "text": "Entertainment Activation - Automatically activates entertainment options Update Scheduling - Sets up 10-minute interval updates Engagement Monitoring - Tracks customer interaction levels Transition Management - Handles handoffs to specialists",
      "title": "Hold Management Goals"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#proactive-actions",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // Example proactive actions generated by Hold Agent { type : 'status_update' , agentType : 'hold_agent' , message : 'Update on wait time and progress' , timing : 'scheduled' , // Every 10 minutes priority : 'medium' }, { type : 'entertainment_offer' , agentType : 'joke' , // or 'trivia', 'gif' message : 'Would you like some entertainment while you wait?' , timing : 'immediate' , priority : 'high' }",
      "title": "Proactive Actions"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#agent-classification-integration",
      "text": "The Hold Agent is properly integrated into the message classification system:",
      "title": "Agent Classification Integration"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#classification-keywords",
      "text": "\"wait time\", \"how long\", \"still waiting\" \"hold\", \"queue\", \"when will\", \"time remaining\" \"status\", \"update\", \"progress\", \"eta\" \"entertainment\", \"while I wait\", \"keep me busy\"",
      "title": "Classification Keywords"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#routing-logic",
      "text": "1 2 3 4 // Messages about wait times route to Hold Agent if ( message . includes ( 'wait time' ) || message . includes ( 'how long' )) { return { agentType : 'hold_agent' , confidence : 0.9 }; }",
      "title": "Routing Logic"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#configuration",
      "text": "",
      "title": "Configuration"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#hold-agent-settings",
      "text": "1 2 3 4 5 6 7 8 9 // Agent configuration in config.ts { name : 'Hold Agent' , type : 'hold_agent' , systemPrompt : `You are a professional Hold Agent managing customer wait experiences...` , model : 'gpt-3.5-turbo' , temperature : 0.7 , maxTokens : 400 }",
      "title": "Hold Agent Settings"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#goal-seeking-rules",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // Hold-specific goals activated automatically const holdGoals = [ { id : 'entertainment_activation' , name : 'Activate Entertainment' , description : 'Offer entertainment options during hold' , triggers : [ 'user_on_hold' , 'initial_connection' ], actions : [ 'entertainment_offer' ], }, { id : 'status_updates' , name : 'Regular Status Updates' , description : 'Provide updates every 10 minutes' , triggers : [ 'hold_duration_10min' ], actions : [ 'status_update' ], }, ];",
      "title": "Goal-Seeking Rules"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#wait-time-management",
      "text": "",
      "title": "Wait Time Management"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#demo-configuration",
      "text": "For demonstration purposes, the system uses realistic wait times: Initial Estimate : 20-25 minutes Update Intervals : Every 10 minutes Realistic Decreases : Wait time reduces with each update Honest Communication : No false promises or unrealistic estimates",
      "title": "Demo Configuration"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#calculation-logic",
      "text": "1 2 3 4 5 6 7 8 // Example wait time calculation const calculateWaitTime = ( customerWaitDuration : number ) : string => { const baseWaitTime = 25 ; // minutes const waitedTime = Math . floor ( customerWaitDuration / 60000 ); // convert to minutes const remainingTime = Math . max ( 5 , baseWaitTime - waitedTime ); return `approximately ${ remainingTime - 2 } - ${ remainingTime } minutes` ; };",
      "title": "Calculation Logic"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#entertainment-integration",
      "text": "",
      "title": "Entertainment Integration"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#available-entertainment-options",
      "text": "Adaptive Joke Master Personalized humor based on reactions Multiple joke categories (dad jokes, tech humor, etc.) RAG-powered quality content Trivia Master Fascinating facts across multiple categories Science, animals, space, history topics Educational and engaging content GIF Master Visual entertainment and reactions Mood-appropriate animated content Accessibility features with alt text",
      "title": "Available Entertainment Options"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#coordination-workflow",
      "text": "1 2 3 4 5 6 7 // Entertainment coordination flow 1. Hold Agent offers entertainment options 2. Customer selects preferred entertainment 3. Smooth handoff to selected entertainment agent 4. Entertainment agent engages customer 5. Hold Agent monitors and provides updates 6. Seamless return to Hold Agent for status updates",
      "title": "Coordination Workflow"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#professional-communication-guidelines",
      "text": "",
      "title": "Professional Communication Guidelines"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#tone-and-style",
      "text": "Empathetic : Acknowledge inconvenience and frustration Transparent : Provide honest wait time estimates Professional : Maintain business standards throughout Helpful : Actively offer solutions and entertainment Consistent : Regular updates without being pushy",
      "title": "Tone and Style"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#key-phrases",
      "text": "Initial Contact: \"I need to let you know that we're currently experiencing...\" \"Your estimated wait time is approximately...\" \"While you wait, I can connect you with...\" Status Updates: \"I wanted to give you a quick update...\" \"You've been waiting for about X minutes now...\" \"I apologize for the continued wait...\" Entertainment Offers: \"Would you like me to introduce you to...\" \"We have several entertainment options available...\" \"Let me connect you with someone who can...\"",
      "title": "Key Phrases"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#performance-monitoring",
      "text": "",
      "title": "Performance Monitoring"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#metrics-tracked",
      "text": "Wait Time Accuracy - How accurate initial estimates prove to be Entertainment Engagement - Percentage of customers who accept entertainment Update Frequency - Timing of automated status updates Handoff Success - Smooth transitions to specialists Customer Satisfaction - Implied through interaction patterns",
      "title": "Metrics Tracked"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#analytics-integration",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 // Example metrics collection { holdSessionId : 'hold_12345' , customerId : 'user_789' , initialWaitEstimate : 25 , // minutes actualWaitTime : 22 , // minutes entertainmentAccepted : true , entertainmentType : 'joke' , updatesProvided : 3 , handoffSuccess : true , timestamp : new Date () }",
      "title": "Analytics Integration"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#best-practices",
      "text": "",
      "title": "Best Practices"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#for-customer-service-teams",
      "text": "Set Realistic Expectations - Never underestimate wait times Provide Regular Updates - Keep customers informed every 10 minutes Offer Value-Added Services - Entertainment during wait times Maintain Professional Tone - Empathetic but not overly casual Track Performance - Monitor wait time accuracy and satisfaction",
      "title": "For Customer Service Teams"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#for-system-administrators",
      "text": "Monitor Queue Lengths - Adjust wait time estimates based on actual queues Update Entertainment Content - Keep RAG database fresh and relevant Optimize Handoff Logic - Ensure smooth transitions between agents Review Customer Feedback - Analyze interaction patterns for improvements System Health Checks - Monitor goal-seeking system performance",
      "title": "For System Administrators"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#troubleshooting",
      "text": "",
      "title": "Troubleshooting"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#common-issues",
      "text": "Customers Not Accepting Entertainment: Review entertainment introduction messaging Ensure entertainment options are clearly explained Consider entertainment preferences based on time of day Inaccurate Wait Time Estimates: Calibrate estimation algorithms with actual data Consider peak/off-peak timing patterns Implement dynamic adjustment based on queue length Missing Status Updates: Verify goal-seeking system is properly scheduling updates Check for interference from other agent activities Ensure update intervals are properly configured",
      "title": "Common Issues"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#debug-mode",
      "text": "Enable detailed logging for hold session analysis: 1 2 3 4 5 // Console logs for hold session monitoring console . log ( `\ud83d\udd50 Hold session started for user ${ userId } , estimated wait: ${ waitTime } ` ); console . log ( `\ud83c\udfaa Entertainment offered: ${ entertainmentOptions . join ( ', ' ) } ` ); console . log ( `\ud83d\udce2 Status update ${ updateNumber } sent to user ${ userId } ` ); console . log ( `\ud83c\udfaf Goal activated: ${ goalName } for user ${ userId } ` );",
      "title": "Debug Mode"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#future-enhancements",
      "text": "",
      "title": "Future Enhancements"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#planned-features",
      "text": "Dynamic Wait Time Calculation - Real-time queue analysis Personalized Entertainment - AI-driven content selection Multi-language Support - Localized hold experiences Callback Options - \"Call me back when ready\" functionality Advanced Analytics - Detailed customer satisfaction metrics Integration with Actual Queues - Real customer service system integration",
      "title": "Planned Features"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#scalability-considerations",
      "text": "Multi-tenant Support - Different organizations with custom wait experiences Peak Load Handling - Efficient management during high-volume periods Regional Customization - Different hold experiences by geographic region Industry Specialization - Tailored experiences for different business types",
      "title": "Scalability Considerations"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#integration-examples",
      "text": "",
      "title": "Integration Examples"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#basic-hold-session",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Initialize hold session const holdSession = await agentService . initializeConversation ( userId , 'hold_agent' ); // Process initial message const response = await agentService . processMessageWithBothSystems ( userId , 'How long is the wait?' , conversationHistory , conversationId , 'hold_agent' , ); // Handle proactive actions (entertainment offers, updates) if ( response . proactiveActions ) { for ( const action of response . proactiveActions ) { await agentService . executeProactiveAction ( userId , action , conversationHistory ); } }",
      "title": "Basic Hold Session"
    },
    {
      "location": "architecture/components/_sources/hold-agent-system/#entertainment-handoff",
      "text": "1 2 3 4 5 6 7 8 9 10 // Customer accepts entertainment offer const entertainmentResponse = await agentService . processMessageWithBothSystems ( userId , \"Yes, I'd like some jokes while I wait\" , conversationHistory , conversationId , ); // System automatically transitions to Joke Master // Hold Agent continues monitoring in background for updates This Hold Agent system provides a comprehensive solution for managing customer wait experiences, combining professional communication standards with engaging entertainment options and transparent status updates.",
      "title": "Entertainment Handoff"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/",
      "text": "New Entertainment Agents Summary \u00b6 Overview \u00b6 Five new entertainment agents have been added to enhance the on-hold goal seeking network, providing diverse and engaging content for users while they wait or seek entertainment. New Agent Types Added \u00b6 1. Story Teller Agent ( story_teller ) \u00b6 Purpose : Creates engaging short stories and interactive narratives Capabilities : Generates personalized stories based on user preferences Creates different genres (adventure, mystery, comedy, sci-fi, fantasy) Offers interactive story elements where users can influence the plot Adapts storytelling style to user age and interests Response Length : 200-600 characters Use Cases : Long wait times, creative entertainment, bedtime stories, educational narratives 2. Riddle Master Agent ( riddle_master ) \u00b6 Purpose : Provides brain teasers, puzzles, and mental challenges Capabilities : Offers riddles of varying difficulty levels Provides logical puzzles and word games Gives helpful hints when users are stuck Explains solutions in an educational way Tracks difficulty preferences Response Length : 50-300 characters Use Cases : Mental stimulation, educational entertainment, competitive challenges 3. Quote Master Agent ( quote_master ) \u00b6 Purpose : Shares inspirational quotes, wisdom, and meaningful sayings Capabilities : Provides context and background for famous quotes Offers quotes tailored to user's mood or situation Shares wisdom from various cultures and time periods Creates motivational content for specific situations Explains the relevance and impact of quotes Response Length : 30-250 characters Use Cases : Inspiration, motivation, educational content, philosophical discussions 4. Game Host Agent ( game_host ) \u00b6 Purpose : Facilitates interactive games, trivia, and entertainment activities Capabilities : Hosts various types of games (trivia, word games, guessing games) Adapts game difficulty to user skill level Keeps score and tracks progress Provides engaging commentary and encouragement Offers multiplayer game coordination Response Length : 40-300 characters Use Cases : Interactive entertainment, competitive activities, group engagement 5. Music Guru Agent ( music_guru ) \u00b6 Purpose : Provides music recommendations, discusses artists, and shares musical knowledge Capabilities : Recommends music based on user preferences and mood Shares interesting facts about artists and songs Discusses music history and genres Helps users discover new artists and styles Provides context about musical movements and cultural impact Response Length : 60-400 characters Use Cases : Music discovery, educational content, mood-based recommendations Integration Features \u00b6 Conversation Management \u00b6 Smart Handoffs : Agents can transition between each other based on user preferences and conversation flow Context Awareness : Each agent maintains awareness of user satisfaction and preferences Performance Tracking : System monitors which agents work best for specific users Rotation System \u00b6 Automatic Transitions : Agents rotate to keep content fresh User-Driven Selection : Users can explicitly request specific types of entertainment Adaptive Scheduling : System learns optimal timing for different agent types Goal-Seeking Network Benefits \u00b6 Personalized Entertainment : Agents learn individual user preferences over time Mood Adaptation : Content adapts to user's emotional state and energy level Engagement Optimization : System optimizes for maximum user satisfaction and engagement Wait Time Management : Different agents work better for different wait durations Technical Implementation \u00b6 Agent Transitions \u00b6 1 story_teller \u2192 riddle_master \u2192 quote_master \u2192 game_host \u2192 music_guru \u2192 story_teller Handoff Triggers \u00b6 Explicit Requests : User asks for specific type of content Performance Decline : Current agent isn't engaging the user effectively Conversation Stagnation : Fresh perspective needed Topic Mismatch : User's interests shift to different entertainment type Validation System \u00b6 Each agent has appropriate response length limits Content appropriateness checks Engagement quality metrics Technical accuracy validation for factual content Usage Examples \u00b6 Scenario 1: Long Hold Time \u00b6 Start with Story Teller for engaging narrative Transition to Game Host for interactive engagement Switch to Music Guru for mood-based entertainment End with Quote Master for inspirational content Scenario 2: Quick Entertainment \u00b6 Riddle Master provides quick mental challenge Quote Master offers brief inspiration Game Host facilitates quick trivia Scenario 3: Educational Entertainment \u00b6 Music Guru shares musical knowledge Story Teller creates educational narratives Quote Master provides historical wisdom Riddle Master offers logic puzzles Benefits for Users \u00b6 Variety : Five distinct entertainment types prevent boredom Personalization : Agents adapt to individual preferences Education : Learning opportunities embedded in entertainment Engagement : Interactive elements maintain user interest Flexibility : Content adapts to available time and user mood Benefits for System \u00b6 Higher Satisfaction : More entertainment options increase user happiness Reduced Perceived Wait Time : Engaging content makes waiting feel shorter Better Analytics : Multiple agents provide more data on user preferences Scalable Entertainment : Easy to add more specialized agents in the future Improved Retention : Users more likely to stay engaged with the system",
      "title": "New Entertainment Agents Summary"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#new-entertainment-agents-summary",
      "text": "",
      "title": "New Entertainment Agents Summary"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#overview",
      "text": "Five new entertainment agents have been added to enhance the on-hold goal seeking network, providing diverse and engaging content for users while they wait or seek entertainment.",
      "title": "Overview"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#new-agent-types-added",
      "text": "",
      "title": "New Agent Types Added"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#1-story-teller-agent-story_teller",
      "text": "Purpose : Creates engaging short stories and interactive narratives Capabilities : Generates personalized stories based on user preferences Creates different genres (adventure, mystery, comedy, sci-fi, fantasy) Offers interactive story elements where users can influence the plot Adapts storytelling style to user age and interests Response Length : 200-600 characters Use Cases : Long wait times, creative entertainment, bedtime stories, educational narratives",
      "title": "1. Story Teller Agent (story_teller)"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#2-riddle-master-agent-riddle_master",
      "text": "Purpose : Provides brain teasers, puzzles, and mental challenges Capabilities : Offers riddles of varying difficulty levels Provides logical puzzles and word games Gives helpful hints when users are stuck Explains solutions in an educational way Tracks difficulty preferences Response Length : 50-300 characters Use Cases : Mental stimulation, educational entertainment, competitive challenges",
      "title": "2. Riddle Master Agent (riddle_master)"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#3-quote-master-agent-quote_master",
      "text": "Purpose : Shares inspirational quotes, wisdom, and meaningful sayings Capabilities : Provides context and background for famous quotes Offers quotes tailored to user's mood or situation Shares wisdom from various cultures and time periods Creates motivational content for specific situations Explains the relevance and impact of quotes Response Length : 30-250 characters Use Cases : Inspiration, motivation, educational content, philosophical discussions",
      "title": "3. Quote Master Agent (quote_master)"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#4-game-host-agent-game_host",
      "text": "Purpose : Facilitates interactive games, trivia, and entertainment activities Capabilities : Hosts various types of games (trivia, word games, guessing games) Adapts game difficulty to user skill level Keeps score and tracks progress Provides engaging commentary and encouragement Offers multiplayer game coordination Response Length : 40-300 characters Use Cases : Interactive entertainment, competitive activities, group engagement",
      "title": "4. Game Host Agent (game_host)"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#5-music-guru-agent-music_guru",
      "text": "Purpose : Provides music recommendations, discusses artists, and shares musical knowledge Capabilities : Recommends music based on user preferences and mood Shares interesting facts about artists and songs Discusses music history and genres Helps users discover new artists and styles Provides context about musical movements and cultural impact Response Length : 60-400 characters Use Cases : Music discovery, educational content, mood-based recommendations",
      "title": "5. Music Guru Agent (music_guru)"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#integration-features",
      "text": "",
      "title": "Integration Features"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#conversation-management",
      "text": "Smart Handoffs : Agents can transition between each other based on user preferences and conversation flow Context Awareness : Each agent maintains awareness of user satisfaction and preferences Performance Tracking : System monitors which agents work best for specific users",
      "title": "Conversation Management"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#rotation-system",
      "text": "Automatic Transitions : Agents rotate to keep content fresh User-Driven Selection : Users can explicitly request specific types of entertainment Adaptive Scheduling : System learns optimal timing for different agent types",
      "title": "Rotation System"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#goal-seeking-network-benefits",
      "text": "Personalized Entertainment : Agents learn individual user preferences over time Mood Adaptation : Content adapts to user's emotional state and energy level Engagement Optimization : System optimizes for maximum user satisfaction and engagement Wait Time Management : Different agents work better for different wait durations",
      "title": "Goal-Seeking Network Benefits"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#technical-implementation",
      "text": "",
      "title": "Technical Implementation"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#agent-transitions",
      "text": "1 story_teller \u2192 riddle_master \u2192 quote_master \u2192 game_host \u2192 music_guru \u2192 story_teller",
      "title": "Agent Transitions"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#handoff-triggers",
      "text": "Explicit Requests : User asks for specific type of content Performance Decline : Current agent isn't engaging the user effectively Conversation Stagnation : Fresh perspective needed Topic Mismatch : User's interests shift to different entertainment type",
      "title": "Handoff Triggers"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#validation-system",
      "text": "Each agent has appropriate response length limits Content appropriateness checks Engagement quality metrics Technical accuracy validation for factual content",
      "title": "Validation System"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#usage-examples",
      "text": "",
      "title": "Usage Examples"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#scenario-1-long-hold-time",
      "text": "Start with Story Teller for engaging narrative Transition to Game Host for interactive engagement Switch to Music Guru for mood-based entertainment End with Quote Master for inspirational content",
      "title": "Scenario 1: Long Hold Time"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#scenario-2-quick-entertainment",
      "text": "Riddle Master provides quick mental challenge Quote Master offers brief inspiration Game Host facilitates quick trivia",
      "title": "Scenario 2: Quick Entertainment"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#scenario-3-educational-entertainment",
      "text": "Music Guru shares musical knowledge Story Teller creates educational narratives Quote Master provides historical wisdom Riddle Master offers logic puzzles",
      "title": "Scenario 3: Educational Entertainment"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#benefits-for-users",
      "text": "Variety : Five distinct entertainment types prevent boredom Personalization : Agents adapt to individual preferences Education : Learning opportunities embedded in entertainment Engagement : Interactive elements maintain user interest Flexibility : Content adapts to available time and user mood",
      "title": "Benefits for Users"
    },
    {
      "location": "architecture/components/_sources/new-entertainment-agents-summary/#benefits-for-system",
      "text": "Higher Satisfaction : More entertainment options increase user happiness Reduced Perceived Wait Time : Engaging content makes waiting feel shorter Better Analytics : Multiple agents provide more data on user preferences Scalable Entertainment : Easy to add more specialized agents in the future Improved Retention : Users more likely to stay engaged with the system",
      "title": "Benefits for System"
    },
    {
      "location": "examples/external-app/",
      "text": "External Example App \u00b6 Integration notes and pointers to the example React AI Chat App. Repository subtree: external/Example-React-AI-Chat-App/ See its README for setup and usage",
      "title": "External App"
    },
    {
      "location": "examples/external-app/#external-example-app",
      "text": "Integration notes and pointers to the example React AI Chat App. Repository subtree: external/Example-React-AI-Chat-App/ See its README for setup and usage",
      "title": "External Example App"
    },
    {
      "location": "getting-started/quickstart/",
      "text": "Quickstart \u00b6 10-minute TL;DR to run the demo and explore the architecture. Audience: New contributors, reviewers, and demo participants Prerequisites: Docker or Node 18+, Yarn/NPM, Git 1) Run the stack (fast path) \u00b6 Using Docker: see root docker-compose.yml Local dev: run backend and frontend independently Example: Backend: cd backend && npm install && npm run dev Frontend (Expo): cd frontend && npm install && npm start 2) Verify health \u00b6 API docs at runtime: http://localhost:3000/docs OpenAPI JSON: http://localhost:3000/docs/json Frontend dev menu: Expo Dev Tools in browser 3) Next steps \u00b6 Setup details: Setup Common issues: Troubleshooting Explore the system: System Overview",
      "title": "Quickstart"
    },
    {
      "location": "getting-started/quickstart/#quickstart",
      "text": "10-minute TL;DR to run the demo and explore the architecture. Audience: New contributors, reviewers, and demo participants Prerequisites: Docker or Node 18+, Yarn/NPM, Git",
      "title": "Quickstart"
    },
    {
      "location": "getting-started/quickstart/#1-run-the-stack-fast-path",
      "text": "Using Docker: see root docker-compose.yml Local dev: run backend and frontend independently Example: Backend: cd backend && npm install && npm run dev Frontend (Expo): cd frontend && npm install && npm start",
      "title": "1) Run the stack (fast path)"
    },
    {
      "location": "getting-started/quickstart/#2-verify-health",
      "text": "API docs at runtime: http://localhost:3000/docs OpenAPI JSON: http://localhost:3000/docs/json Frontend dev menu: Expo Dev Tools in browser",
      "title": "2) Verify health"
    },
    {
      "location": "getting-started/quickstart/#3-next-steps",
      "text": "Setup details: Setup Common issues: Troubleshooting Explore the system: System Overview",
      "title": "3) Next steps"
    },
    {
      "location": "getting-started/setup/",
      "text": "Setup and Configuration \u00b6 Authoritative setup guide for local development and demo environments. Requirements \u00b6 Node 18+ and npm (or yarn) Docker (optional but recommended) Git macOS/Linux/Windows Project bootstrap \u00b6 Install deps: npm install in backend/ and frontend/ Environment: Copy .env.example to .env where applicable Docker: Use docker-compose.yml to run infra/services if needed Additional references \u00b6 Docker setup: reference/docker-setup.md Code quality & tools: reference/code-quality.md",
      "title": "Setup"
    },
    {
      "location": "getting-started/setup/#setup-and-configuration",
      "text": "Authoritative setup guide for local development and demo environments.",
      "title": "Setup and Configuration"
    },
    {
      "location": "getting-started/setup/#requirements",
      "text": "Node 18+ and npm (or yarn) Docker (optional but recommended) Git macOS/Linux/Windows",
      "title": "Requirements"
    },
    {
      "location": "getting-started/setup/#project-bootstrap",
      "text": "Install deps: npm install in backend/ and frontend/ Environment: Copy .env.example to .env where applicable Docker: Use docker-compose.yml to run infra/services if needed",
      "title": "Project bootstrap"
    },
    {
      "location": "getting-started/setup/#additional-references",
      "text": "Docker setup: reference/docker-setup.md Code quality & tools: reference/code-quality.md",
      "title": "Additional references"
    },
    {
      "location": "getting-started/troubleshooting/",
      "text": "Troubleshooting \u00b6 Common issues and fixes during setup and development. Backend \u00b6 Swagger UI not available at /docs Ensure backend is running and swagger setup is enabled Tracing not emitted Verify OTEL env vars and sampling settings Frontend \u00b6 Expo cannot connect to packager Check network, restart with expo start -c Observability \u00b6 Prometheus/Grafana not showing data Validate targets and scraping config, see Operations > Observability",
      "title": "Troubleshooting"
    },
    {
      "location": "getting-started/troubleshooting/#troubleshooting",
      "text": "Common issues and fixes during setup and development.",
      "title": "Troubleshooting"
    },
    {
      "location": "getting-started/troubleshooting/#backend",
      "text": "Swagger UI not available at /docs Ensure backend is running and swagger setup is enabled Tracing not emitted Verify OTEL env vars and sampling settings",
      "title": "Backend"
    },
    {
      "location": "getting-started/troubleshooting/#frontend",
      "text": "Expo cannot connect to packager Check network, restart with expo start -c",
      "title": "Frontend"
    },
    {
      "location": "getting-started/troubleshooting/#observability",
      "text": "Prometheus/Grafana not showing data Validate targets and scraping config, see Operations > Observability",
      "title": "Observability"
    },
    {
      "location": "operations/ci-cd/",
      "text": "CI/CD \u00b6 Quality gates and continuous integration workflows. Pipelines \u00b6 Lint, test, type-check Markdown link checks for docs integrity References \u00b6 See .github/workflows for pipeline definitions",
      "title": "CI/CD"
    },
    {
      "location": "operations/ci-cd/#cicd",
      "text": "Quality gates and continuous integration workflows.",
      "title": "CI/CD"
    },
    {
      "location": "operations/ci-cd/#pipelines",
      "text": "Lint, test, type-check Markdown link checks for docs integrity",
      "title": "Pipelines"
    },
    {
      "location": "operations/ci-cd/#references",
      "text": "See .github/workflows for pipeline definitions",
      "title": "References"
    },
    {
      "location": "operations/observability/",
      "text": "Observability & Monitoring \u00b6 End-to-end tracing, metrics, and logging to validate system behavior. Tracing \u00b6 OpenTelemetry instrumentation Zipkin/Jaeger exporters (configuration dependent) Metrics \u00b6 Prometheus scraping targets Grafana dashboards References \u00b6 Prometheus & Grafana",
      "title": "Observability"
    },
    {
      "location": "operations/observability/#observability-monitoring",
      "text": "End-to-end tracing, metrics, and logging to validate system behavior.",
      "title": "Observability &amp; Monitoring"
    },
    {
      "location": "operations/observability/#tracing",
      "text": "OpenTelemetry instrumentation Zipkin/Jaeger exporters (configuration dependent)",
      "title": "Tracing"
    },
    {
      "location": "operations/observability/#metrics",
      "text": "Prometheus scraping targets Grafana dashboards",
      "title": "Metrics"
    },
    { "location": "operations/observability/#references", "text": "Prometheus & Grafana", "title": "References" },
    {
      "location": "operations/prometheus-grafana/",
      "text": "ValidationDashboard to Prometheus + Grafana Migration \u00b6 Overview \u00b6 The ValidationDashboard React component has been completely replaced with professional monitoring using Prometheus metrics and Grafana dashboards. What Was Removed \u00b6 frontend/components/ValidationDashboard.tsx - React component with inline validation display frontend/__tests__/components/ValidationDashboard.test.tsx - Associated tests What Was Added \u00b6 \ud83d\udcca Grafana Dashboards \u00b6 1. AI Validation Overview ( grafana/dashboards/ai-validation-overview.json ) \u00b6 Total Validations - Counter of all validation checks Success Rate - Percentage of validations that passed Average Score - Mean validation score across all agents Total Issues - Sum of all validation issues Validations by Agent Type - Pie chart breakdown Issues by Severity - Pie chart of high/medium/low issues Success Rate Over Time - Time series by agent type Average Scores by Agent - Time series comparison 2. AI Validation Quality ( grafana/dashboards/ai-validation-quality.json ) \u00b6 Readability Scores by Agent - Writing quality metrics Technical Accuracy by Agent - Domain expertise tracking Appropriateness Scores - Professional tone monitoring Coherence Scores - Logical consistency tracking Response Length Distribution - 95 th percentile & median lengths Issues by Type - Content, technical, appropriateness, etc. Issues by Agent and Severity - Stacked bar chart Proactive vs Regular Validation Rate - Engagement analysis \ud83d\udd27 Configuration Files \u00b6 Grafana Provisioning \u00b6 grafana/provisioning/datasources/prometheus.yml - Auto-configure Prometheus grafana/provisioning/dashboards/dashboards.yml - Auto-load dashboards \ud83d\udcc8 Enhanced Metrics \u00b6 The responseValidator.ts already emits comprehensive Prometheus metrics: 1 2 3 4 5 6 7 8 9 10 // Validation counters metrics . validationChecks . inc ({ agent_type , result , proactive }); // Quality metrics histograms metrics . validationScores . observe ({ agent_type , proactive }, score ); metrics . validationResponseLength . observe ({ agent_type }, length ); metrics . validationMetrics . observe ({ agent_type , metric_type }, value ); // Issue tracking metrics . validationIssues . inc ({ agent_type , severity , issue_type }); Benefits of the Migration \u00b6 \u2705 Professional Monitoring \u00b6 Industry-standard Prometheus + Grafana stack Real-time metrics collection and visualization Historical data retention and analysis Alerting capabilities (can be configured) \u2705 Better Performance \u00b6 No frontend React rendering overhead Metrics stored efficiently in time-series database Grafana handles large datasets smoothly Auto-refresh dashboards \u2705 Enhanced Analytics \u00b6 Time-based trend analysis Percentile calculations (P50, P95, P99) Cross-agent comparisons Issue categorization and tracking \u2705 Operational Excellence \u00b6 Centralized monitoring with other system metrics Professional dashboard sharing and embedding Role-based access control Dashboard versioning and backup Usage \u00b6 Access Dashboards \u00b6 Grafana UI : http://localhost:3000 Login : admin/admin Dashboards : Navigate to \"AI Validation Overview\" or \"AI Validation Quality\" View Metrics Directly \u00b6 Prometheus UI : http://localhost:9090 Query Examples : 1 2 3 4 5 6 7 8 # Average validation scores avg ( validation_scores ) by ( agent_type ) # Success rate over time rate ( validation_checks_total { result = \" pass \"}[ 5m ] ) / rate ( validation_checks_total [ 5m ] ) # Issues by severity sum ( validation_issues_total ) by ( severity ) Docker Compose Integration \u00b6 The docker-compose.yml already includes: Grafana service with dashboard provisioning Prometheus for metrics collection Volume mounts for persistence Health checks and dependencies Migration Complete \u00b6 The system now provides: Real-time validation monitoring through Grafana dashboards Historical trend analysis with Prometheus time-series data Professional visualization replacing the basic React component Scalable architecture supporting future monitoring needs No code changes are required - the backend already emits all necessary metrics, and Grafana automatically discovers and displays them through the pre-configured dashboards.",
      "title": "Prometheus & Grafana"
    },
    {
      "location": "operations/prometheus-grafana/#validationdashboard-to-prometheus-grafana-migration",
      "text": "",
      "title": "ValidationDashboard to Prometheus + Grafana Migration"
    },
    {
      "location": "operations/prometheus-grafana/#overview",
      "text": "The ValidationDashboard React component has been completely replaced with professional monitoring using Prometheus metrics and Grafana dashboards.",
      "title": "Overview"
    },
    {
      "location": "operations/prometheus-grafana/#what-was-removed",
      "text": "frontend/components/ValidationDashboard.tsx - React component with inline validation display frontend/__tests__/components/ValidationDashboard.test.tsx - Associated tests",
      "title": "What Was Removed"
    },
    { "location": "operations/prometheus-grafana/#what-was-added", "text": "", "title": "What Was Added" },
    {
      "location": "operations/prometheus-grafana/#grafana-dashboards",
      "text": "",
      "title": "\ud83d\udcca Grafana Dashboards"
    },
    {
      "location": "operations/prometheus-grafana/#1-ai-validation-overview-grafanadashboardsai-validation-overviewjson",
      "text": "Total Validations - Counter of all validation checks Success Rate - Percentage of validations that passed Average Score - Mean validation score across all agents Total Issues - Sum of all validation issues Validations by Agent Type - Pie chart breakdown Issues by Severity - Pie chart of high/medium/low issues Success Rate Over Time - Time series by agent type Average Scores by Agent - Time series comparison",
      "title": "1. AI Validation Overview (grafana/dashboards/ai-validation-overview.json)"
    },
    {
      "location": "operations/prometheus-grafana/#2-ai-validation-quality-grafanadashboardsai-validation-qualityjson",
      "text": "Readability Scores by Agent - Writing quality metrics Technical Accuracy by Agent - Domain expertise tracking Appropriateness Scores - Professional tone monitoring Coherence Scores - Logical consistency tracking Response Length Distribution - 95 th percentile & median lengths Issues by Type - Content, technical, appropriateness, etc. Issues by Agent and Severity - Stacked bar chart Proactive vs Regular Validation Rate - Engagement analysis",
      "title": "2. AI Validation Quality (grafana/dashboards/ai-validation-quality.json)"
    },
    {
      "location": "operations/prometheus-grafana/#configuration-files",
      "text": "",
      "title": "\ud83d\udd27 Configuration Files"
    },
    {
      "location": "operations/prometheus-grafana/#grafana-provisioning",
      "text": "grafana/provisioning/datasources/prometheus.yml - Auto-configure Prometheus grafana/provisioning/dashboards/dashboards.yml - Auto-load dashboards",
      "title": "Grafana Provisioning"
    },
    {
      "location": "operations/prometheus-grafana/#enhanced-metrics",
      "text": "The responseValidator.ts already emits comprehensive Prometheus metrics: 1 2 3 4 5 6 7 8 9 10 // Validation counters metrics . validationChecks . inc ({ agent_type , result , proactive }); // Quality metrics histograms metrics . validationScores . observe ({ agent_type , proactive }, score ); metrics . validationResponseLength . observe ({ agent_type }, length ); metrics . validationMetrics . observe ({ agent_type , metric_type }, value ); // Issue tracking metrics . validationIssues . inc ({ agent_type , severity , issue_type });",
      "title": "\ud83d\udcc8 Enhanced Metrics"
    },
    {
      "location": "operations/prometheus-grafana/#benefits-of-the-migration",
      "text": "",
      "title": "Benefits of the Migration"
    },
    {
      "location": "operations/prometheus-grafana/#professional-monitoring",
      "text": "Industry-standard Prometheus + Grafana stack Real-time metrics collection and visualization Historical data retention and analysis Alerting capabilities (can be configured)",
      "title": "\u2705 Professional Monitoring"
    },
    {
      "location": "operations/prometheus-grafana/#better-performance",
      "text": "No frontend React rendering overhead Metrics stored efficiently in time-series database Grafana handles large datasets smoothly Auto-refresh dashboards",
      "title": "\u2705 Better Performance"
    },
    {
      "location": "operations/prometheus-grafana/#enhanced-analytics",
      "text": "Time-based trend analysis Percentile calculations (P50, P95, P99) Cross-agent comparisons Issue categorization and tracking",
      "title": "\u2705 Enhanced Analytics"
    },
    {
      "location": "operations/prometheus-grafana/#operational-excellence",
      "text": "Centralized monitoring with other system metrics Professional dashboard sharing and embedding Role-based access control Dashboard versioning and backup",
      "title": "\u2705 Operational Excellence"
    },
    { "location": "operations/prometheus-grafana/#usage", "text": "", "title": "Usage" },
    {
      "location": "operations/prometheus-grafana/#access-dashboards",
      "text": "Grafana UI : http://localhost:3000 Login : admin/admin Dashboards : Navigate to \"AI Validation Overview\" or \"AI Validation Quality\"",
      "title": "Access Dashboards"
    },
    {
      "location": "operations/prometheus-grafana/#view-metrics-directly",
      "text": "Prometheus UI : http://localhost:9090 Query Examples : 1 2 3 4 5 6 7 8 # Average validation scores avg ( validation_scores ) by ( agent_type ) # Success rate over time rate ( validation_checks_total { result = \" pass \"}[ 5m ] ) / rate ( validation_checks_total [ 5m ] ) # Issues by severity sum ( validation_issues_total ) by ( severity )",
      "title": "View Metrics Directly"
    },
    {
      "location": "operations/prometheus-grafana/#docker-compose-integration",
      "text": "The docker-compose.yml already includes: Grafana service with dashboard provisioning Prometheus for metrics collection Volume mounts for persistence Health checks and dependencies",
      "title": "Docker Compose Integration"
    },
    {
      "location": "operations/prometheus-grafana/#migration-complete",
      "text": "The system now provides: Real-time validation monitoring through Grafana dashboards Historical trend analysis with Prometheus time-series data Professional visualization replacing the basic React component Scalable architecture supporting future monitoring needs No code changes are required - the backend already emits all necessary metrics, and Grafana automatically discovers and displays them through the pre-configured dashboards.",
      "title": "Migration Complete"
    },
    {
      "location": "operations/tracing/",
      "text": "Tracing (OTEL/Zipkin) \u00b6 Trace every request through agents, RAG, and validation. Key Settings \u00b6 Sampling and exporters Propagation and correlation Runtime \u00b6 UI available at /docs (Swagger) for API verification OpenAPI JSON at /docs/json for tooling",
      "title": "Tracing"
    },
    {
      "location": "operations/tracing/#tracing-otelzipkin",
      "text": "Trace every request through agents, RAG, and validation.",
      "title": "Tracing (OTEL/Zipkin)"
    },
    {
      "location": "operations/tracing/#key-settings",
      "text": "Sampling and exporters Propagation and correlation",
      "title": "Key Settings"
    },
    {
      "location": "operations/tracing/#runtime",
      "text": "UI available at /docs (Swagger) for API verification OpenAPI JSON at /docs/json for tooling",
      "title": "Runtime"
    },
    {
      "location": "reference/api-reference/",
      "text": "API Reference \u00b6 This project generates API documentation directly from code using swagger-jsdoc + swagger-ui-express. Use the live endpoints while the backend is running: Interactive Swagger UI: http://localhost:5001/docs OpenAPI JSON: http://localhost:5001/docs/json Notes: The spec is built from JSDoc annotations in backend/src/routes/* / .ts and backend/src/index.ts. Health checks are exposed at /health and /api/health. Core tags include: chat, conversations, reactions, validation, test-bench, queue, health. If you need a static artifact, you can save the JSON from /docs/json and distribute it, or convert it to YAML with your preferred tooling.",
      "title": "API Reference"
    },
    {
      "location": "reference/api-reference/#api-reference",
      "text": "This project generates API documentation directly from code using swagger-jsdoc + swagger-ui-express. Use the live endpoints while the backend is running: Interactive Swagger UI: http://localhost:5001/docs OpenAPI JSON: http://localhost:5001/docs/json Notes: The spec is built from JSDoc annotations in backend/src/routes/* / .ts and backend/src/index.ts. Health checks are exposed at /health and /api/health. Core tags include: chat, conversations, reactions, validation, test-bench, queue, health. If you need a static artifact, you can save the JSON from /docs/json and distribute it, or convert it to YAML with your preferred tooling.",
      "title": "API Reference"
    },
    {
      "location": "reference/code-quality/",
      "text": "Code Quality Setup Guide \u00b6 This document outlines the comprehensive code quality tools and processes implemented in this project. Overview \u00b6 The project now includes: Linting : ESLint with TypeScript support Formatting : Prettier for consistent code style Testing : Jest with comprehensive coverage reporting Pre-commit hooks : Husky + lint-staged CI/CD : GitHub Actions for automated quality checks Security : Vulnerability scanning with Trivy Tools Configuration \u00b6 ESLint \u00b6 Backend : TypeScript-specific rules with Prettier integration Frontend : React Native + TypeScript rules with Prettier integration Rules : Strict typing, consistent styling, React best practices Prettier \u00b6 Consistent code formatting across all file types Integration with ESLint to prevent conflicts Pre-commit hook ensures all code is formatted Jest Testing \u00b6 Backend Coverage Thresholds : 80% (85% for agents, 75% for routes) Frontend Coverage Thresholds : 70% (75% for components, 80% for hooks) Multiple coverage formats: HTML, LCOV, JSON, Cobertura Separate unit and integration test configurations Husky Pre-commit Hooks \u00b6 Automatic linting and formatting before commits TypeScript type checking Prevents broken code from being committed Available Scripts \u00b6 Root Level Commands \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Formatting npm run format # Format all files npm run format:check # Check formatting without changes npm run format:backend # Format backend only npm run format:frontend # Format frontend only # Linting npm run lint # Lint all code npm run lint:fix # Fix linting issues npm run lint:backend # Lint backend only npm run lint:frontend # Lint frontend only # Type Checking npm run type-check # Check all TypeScript npm run type-check:backend # Check backend TypeScript npm run type-check:frontend # Check frontend TypeScript # Testing & Coverage npm run coverage # Run tests with coverage npm run coverage:backend # Backend coverage only npm run coverage:merge # Merge coverage reports npm run coverage:report # Generate coverage reports Backend Commands \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cd backend # Testing npm test # Run all tests npm run test:unit # Unit tests only npm run test:integration # Integration tests only npm run test:coverage # Tests with coverage npm run test:watch # Watch mode # Code Quality npm run lint # Lint TypeScript files npm run lint:fix # Fix linting issues npm run format # Format code npm run format:check # Check formatting npm run typecheck # TypeScript checking Frontend Commands \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cd frontend # Testing npm test # Run tests npm run test:watch # Watch mode npm run test:coverage # Tests with coverage npm run test:ci # CI mode # Code Quality npm run lint # Lint files npm run lint:fix # Fix linting issues npm run format # Format code npm run format:check # Check formatting npm run type-check # TypeScript checking Coverage Thresholds \u00b6 Backend \u00b6 Global : 80% across all metrics Agents Module : 85% (critical business logic) Routes Module : 75% (API endpoints) Frontend \u00b6 Global : 70% across all metrics Components : 75% (UI components) Hooks : 80% (custom React hooks) CI/CD Integration \u00b6 Quality Checks Workflow \u00b6 The GitHub Actions workflow runs on every push and PR: Multi-Node Testing : Tests on Node.js 18.x and 20.x Code Formatting : Prettier format checking Linting : ESLint checks for all code Type Checking : TypeScript compilation Testing : Full test suite with coverage Security Scanning : Trivy vulnerability scan Dependency Audit : npm audit for security issues Coverage Upload : Codecov integration Security Features \u00b6 Trivy Scanner : Identifies vulnerabilities in dependencies Dependency Audit : High-level security issue detection SARIF Upload : Security results integrated with GitHub Pre-commit Process \u00b6 When you commit code, the following happens automatically: lint-staged runs on changed files: ESLint fixes issues Prettier formats code TypeScript type checking Success : Commit proceeds if all checks pass Failure : Commit blocked with error details Configuration Files \u00b6 Core Configuration \u00b6 .prettierrc - Prettier formatting rules .prettierignore - Files to skip formatting codecov.yml - Coverage reporting config .husky/pre-commit - Pre-commit hook script Backend Configuration \u00b6 backend/.eslintrc.js - ESLint rules backend/jest.config.js - Jest testing config Frontend Configuration \u00b6 frontend/eslint.config.js - ESLint rules frontend/jest.config.js - Jest testing config frontend/jest.setup.js - Test environment setup Getting Started \u00b6 Install Dependencies : 1 npm run install:all Setup Git Hooks : 1 npm run prepare Run Quality Checks : 1 2 3 4 npm run lint npm run format:check npm run type-check npm run coverage Fix Issues : 1 2 npm run lint:fix npm run format Best Practices \u00b6 Writing Tests \u00b6 Aim for high coverage but focus on quality Test critical business logic thoroughly Use descriptive test names Mock external dependencies Test both happy and error paths Code Style \u00b6 Let Prettier handle formatting Follow ESLint rules for best practices Use TypeScript strictly (avoid any ) Keep functions small and focused Write self-documenting code Git Workflow \u00b6 Commit frequently with descriptive messages Let pre-commit hooks catch issues early Review coverage reports in PRs Address security vulnerabilities promptly Troubleshooting \u00b6 Common Issues \u00b6 Pre-commit Hook Fails : Run npm run lint:fix and npm run format Check TypeScript errors with npm run type-check Coverage Below Threshold : Add tests for uncovered code paths Review coverage reports in coverage/ directory ESLint Conflicts : Rules are configured to work with Prettier Run npm run lint:fix to auto-fix issues Type Errors : Fix TypeScript issues before committing Use npm run type-check to identify problems For more details, see the individual configuration files and CI/CD workflow definitions.",
      "title": "Code Quality"
    },
    {
      "location": "reference/code-quality/#code-quality-setup-guide",
      "text": "This document outlines the comprehensive code quality tools and processes implemented in this project.",
      "title": "Code Quality Setup Guide"
    },
    {
      "location": "reference/code-quality/#overview",
      "text": "The project now includes: Linting : ESLint with TypeScript support Formatting : Prettier for consistent code style Testing : Jest with comprehensive coverage reporting Pre-commit hooks : Husky + lint-staged CI/CD : GitHub Actions for automated quality checks Security : Vulnerability scanning with Trivy",
      "title": "Overview"
    },
    { "location": "reference/code-quality/#tools-configuration", "text": "", "title": "Tools Configuration" },
    {
      "location": "reference/code-quality/#eslint",
      "text": "Backend : TypeScript-specific rules with Prettier integration Frontend : React Native + TypeScript rules with Prettier integration Rules : Strict typing, consistent styling, React best practices",
      "title": "ESLint"
    },
    {
      "location": "reference/code-quality/#prettier",
      "text": "Consistent code formatting across all file types Integration with ESLint to prevent conflicts Pre-commit hook ensures all code is formatted",
      "title": "Prettier"
    },
    {
      "location": "reference/code-quality/#jest-testing",
      "text": "Backend Coverage Thresholds : 80% (85% for agents, 75% for routes) Frontend Coverage Thresholds : 70% (75% for components, 80% for hooks) Multiple coverage formats: HTML, LCOV, JSON, Cobertura Separate unit and integration test configurations",
      "title": "Jest Testing"
    },
    {
      "location": "reference/code-quality/#husky-pre-commit-hooks",
      "text": "Automatic linting and formatting before commits TypeScript type checking Prevents broken code from being committed",
      "title": "Husky Pre-commit Hooks"
    },
    { "location": "reference/code-quality/#available-scripts", "text": "", "title": "Available Scripts" },
    {
      "location": "reference/code-quality/#root-level-commands",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # Formatting npm run format # Format all files npm run format:check # Check formatting without changes npm run format:backend # Format backend only npm run format:frontend # Format frontend only # Linting npm run lint # Lint all code npm run lint:fix # Fix linting issues npm run lint:backend # Lint backend only npm run lint:frontend # Lint frontend only # Type Checking npm run type-check # Check all TypeScript npm run type-check:backend # Check backend TypeScript npm run type-check:frontend # Check frontend TypeScript # Testing & Coverage npm run coverage # Run tests with coverage npm run coverage:backend # Backend coverage only npm run coverage:merge # Merge coverage reports npm run coverage:report # Generate coverage reports",
      "title": "Root Level Commands"
    },
    {
      "location": "reference/code-quality/#backend-commands",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cd backend # Testing npm test # Run all tests npm run test:unit # Unit tests only npm run test:integration # Integration tests only npm run test:coverage # Tests with coverage npm run test:watch # Watch mode # Code Quality npm run lint # Lint TypeScript files npm run lint:fix # Fix linting issues npm run format # Format code npm run format:check # Check formatting npm run typecheck # TypeScript checking",
      "title": "Backend Commands"
    },
    {
      "location": "reference/code-quality/#frontend-commands",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 cd frontend # Testing npm test # Run tests npm run test:watch # Watch mode npm run test:coverage # Tests with coverage npm run test:ci # CI mode # Code Quality npm run lint # Lint files npm run lint:fix # Fix linting issues npm run format # Format code npm run format:check # Check formatting npm run type-check # TypeScript checking",
      "title": "Frontend Commands"
    },
    { "location": "reference/code-quality/#coverage-thresholds", "text": "", "title": "Coverage Thresholds" },
    {
      "location": "reference/code-quality/#backend",
      "text": "Global : 80% across all metrics Agents Module : 85% (critical business logic) Routes Module : 75% (API endpoints)",
      "title": "Backend"
    },
    {
      "location": "reference/code-quality/#frontend",
      "text": "Global : 70% across all metrics Components : 75% (UI components) Hooks : 80% (custom React hooks)",
      "title": "Frontend"
    },
    { "location": "reference/code-quality/#cicd-integration", "text": "", "title": "CI/CD Integration" },
    {
      "location": "reference/code-quality/#quality-checks-workflow",
      "text": "The GitHub Actions workflow runs on every push and PR: Multi-Node Testing : Tests on Node.js 18.x and 20.x Code Formatting : Prettier format checking Linting : ESLint checks for all code Type Checking : TypeScript compilation Testing : Full test suite with coverage Security Scanning : Trivy vulnerability scan Dependency Audit : npm audit for security issues Coverage Upload : Codecov integration",
      "title": "Quality Checks Workflow"
    },
    {
      "location": "reference/code-quality/#security-features",
      "text": "Trivy Scanner : Identifies vulnerabilities in dependencies Dependency Audit : High-level security issue detection SARIF Upload : Security results integrated with GitHub",
      "title": "Security Features"
    },
    {
      "location": "reference/code-quality/#pre-commit-process",
      "text": "When you commit code, the following happens automatically: lint-staged runs on changed files: ESLint fixes issues Prettier formats code TypeScript type checking Success : Commit proceeds if all checks pass Failure : Commit blocked with error details",
      "title": "Pre-commit Process"
    },
    { "location": "reference/code-quality/#configuration-files", "text": "", "title": "Configuration Files" },
    {
      "location": "reference/code-quality/#core-configuration",
      "text": ".prettierrc - Prettier formatting rules .prettierignore - Files to skip formatting codecov.yml - Coverage reporting config .husky/pre-commit - Pre-commit hook script",
      "title": "Core Configuration"
    },
    {
      "location": "reference/code-quality/#backend-configuration",
      "text": "backend/.eslintrc.js - ESLint rules backend/jest.config.js - Jest testing config",
      "title": "Backend Configuration"
    },
    {
      "location": "reference/code-quality/#frontend-configuration",
      "text": "frontend/eslint.config.js - ESLint rules frontend/jest.config.js - Jest testing config frontend/jest.setup.js - Test environment setup",
      "title": "Frontend Configuration"
    },
    {
      "location": "reference/code-quality/#getting-started",
      "text": "Install Dependencies : 1 npm run install:all Setup Git Hooks : 1 npm run prepare Run Quality Checks : 1 2 3 4 npm run lint npm run format:check npm run type-check npm run coverage Fix Issues : 1 2 npm run lint:fix npm run format",
      "title": "Getting Started"
    },
    { "location": "reference/code-quality/#best-practices", "text": "", "title": "Best Practices" },
    {
      "location": "reference/code-quality/#writing-tests",
      "text": "Aim for high coverage but focus on quality Test critical business logic thoroughly Use descriptive test names Mock external dependencies Test both happy and error paths",
      "title": "Writing Tests"
    },
    {
      "location": "reference/code-quality/#code-style",
      "text": "Let Prettier handle formatting Follow ESLint rules for best practices Use TypeScript strictly (avoid any ) Keep functions small and focused Write self-documenting code",
      "title": "Code Style"
    },
    {
      "location": "reference/code-quality/#git-workflow",
      "text": "Commit frequently with descriptive messages Let pre-commit hooks catch issues early Review coverage reports in PRs Address security vulnerabilities promptly",
      "title": "Git Workflow"
    },
    { "location": "reference/code-quality/#troubleshooting", "text": "", "title": "Troubleshooting" },
    {
      "location": "reference/code-quality/#common-issues",
      "text": "Pre-commit Hook Fails : Run npm run lint:fix and npm run format Check TypeScript errors with npm run type-check Coverage Below Threshold : Add tests for uncovered code paths Review coverage reports in coverage/ directory ESLint Conflicts : Rules are configured to work with Prettier Run npm run lint:fix to auto-fix issues Type Errors : Fix TypeScript issues before committing Use npm run type-check to identify problems For more details, see the individual configuration files and CI/CD workflow definitions.",
      "title": "Common Issues"
    },
    {
      "location": "reference/docker-setup/",
      "text": "Docker Setup Guide \u00b6 This guide explains how to set up and run the AI Goal-Seeking System using Docker Compose with full observability stack for testing and tracing validation. Architecture Overview \u00b6 The Docker setup includes: Core Services \u00b6 Backend : Node.js API with TypeScript, OpenTelemetry tracing Frontend : React Native Web app served by Nginx Redis : In-memory data structure store for caching and sessions Observability Stack \u00b6 Jaeger : Distributed tracing UI and storage OpenTelemetry Collector : Telemetry data collection and processing Prometheus : Metrics storage and monitoring Grafana : Visualization dashboards for metrics and traces Testing Services \u00b6 Test Runner : Automated test execution Load Test : k6-based performance testing Trace Validator : Automated trace validation Quick Start \u00b6 1. Basic Stack \u00b6 Start the complete stack with observability: 1 ./run-docker-stack.sh -d 2. With Testing \u00b6 Start stack and run tests: 1 ./run-docker-stack.sh -d -t 3. Load Testing \u00b6 Start stack and run load tests: 1 ./run-docker-stack.sh -d -l 4. Trace Validation \u00b6 Start stack and validate tracing: 1 ./run-docker-stack.sh -d -v 5. Clean Start \u00b6 Clean everything and start fresh: 1 ./run-docker-stack.sh -d -c Service URLs \u00b6 When running in detached mode, access services at: Frontend : http://localhost:8080 Backend API : http://localhost:5001 Grafana : http://localhost:3000 (admin/admin) Jaeger UI : http://localhost:16686 Prometheus : http://localhost:9090 Redis : redis://localhost:6379 Manual Docker Compose Commands \u00b6 Basic Operations \u00b6 Start all services: 1 docker-compose up -d Stop all services: 1 docker-compose down View logs: 1 docker-compose logs -f Build images: 1 docker-compose build Testing Operations \u00b6 Run with test profile: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d --profile test Run load tests: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm load-test Run trace validation: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm trace-validator Environment Configuration \u00b6 Backend Environment Variables \u00b6 The backend service uses these environment variables: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Application NODE_ENV = production PORT = 5001 # Redis REDIS_URL = redis://redis:6379 # OpenTelemetry OTEL_EXPORTER_OTLP_ENDPOINT = http://otel-collector:4318 OTEL_SERVICE_NAME = ai-goal-seeking-backend OTEL_RESOURCE_ATTRIBUTES = service.name = ai-goal-seeking-backend,service.version = 1 .0.0,deployment.environment = docker # Frontend CORS FRONTEND_URL = http://frontend:80,http://localhost:8080 Frontend Environment Variables \u00b6 1 2 3 NODE_ENV = development REACT_APP_API_URL = http://backend:5001 REACT_APP_SOCKET_URL = http://backend:5001 Health Checks \u00b6 All services include health checks: Backend Health Check \u00b6 1 curl http://localhost:5001/health Frontend Health Check \u00b6 1 curl http://localhost:8080/health Service Status \u00b6 1 docker-compose ps Testing and Validation \u00b6 Load Testing \u00b6 The load testing uses k6 and includes: Health endpoint validation API endpoint testing Performance metrics collection Response time validation Results are saved to load-test-results.json . Trace Validation \u00b6 The trace validation script: Waits for all services to be healthy Generates test traces by calling API endpoints Queries Jaeger to verify traces are collected Validates trace data integrity Running Individual Tests \u00b6 Backend unit tests: 1 docker-compose run --rm backend npm test Load test only: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm load-test Trace validation only: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm trace-validator Monitoring and Observability \u00b6 Grafana Dashboards \u00b6 Access Grafana at http://localhost:3000 : Username: admin Password: admin Pre-configured data sources: Prometheus (metrics) Jaeger (traces) Jaeger Tracing \u00b6 Access Jaeger UI at http://localhost:16686 : View distributed traces Search by service name: ai-goal-seeking-backend Analyze request flows and performance Prometheus Metrics \u00b6 Access Prometheus at http://localhost:9090 : Monitor application metrics Query custom business metrics Set up alerts Troubleshooting \u00b6 Common Issues \u00b6 Port Conflicts 1 2 3 # Stop conflicting services sudo lsof -i :5001 sudo lsof -i :8080 Docker Build Failures 1 2 3 # Clean Docker cache docker system prune -a docker-compose build --no-cache Service Startup Issues 1 2 3 # Check logs docker-compose logs backend docker-compose logs frontend Health Check Failures 1 2 3 4 5 # Check service status docker-compose ps # Restart unhealthy services docker-compose restart backend Debug Mode \u00b6 Enable debug logging: 1 2 # Set environment in docker-compose.test.yml LOG_LEVEL = debug Network Issues \u00b6 Test service connectivity: 1 2 3 4 5 6 7 8 # Enter backend container docker-compose exec backend sh # Test Redis connection redis-cli -h redis ping # Test collector connection curl http://otel-collector:4318/ Development Workflow \u00b6 Hot Reloading \u00b6 For development with hot reloading: 1 2 # Use test override with source mounting docker-compose -f docker-compose.yml -f docker-compose.test.yml up backend Debugging \u00b6 Access container for debugging: 1 2 docker-compose exec backend sh docker-compose exec frontend sh Production Considerations \u00b6 Security \u00b6 Services run as non-root users Proper signal handling with dumb-init Resource limits configured Performance \u00b6 Multi-stage builds for smaller images Health checks with appropriate intervals Restart policies configured Monitoring \u00b6 Comprehensive metrics collection Distributed tracing enabled Log aggregation ready Cleanup \u00b6 Stop and Remove Everything \u00b6 1 ./run-docker-stack.sh -c Or manually: 1 2 docker-compose -f docker-compose.yml -f docker-compose.test.yml down -v --remove-orphans docker system prune -a Remove Specific Volumes \u00b6 1 2 3 docker volume rm react_prometheus_data docker volume rm react_grafana_data docker volume rm react_redis_data",
      "title": "Docker Setup"
    },
    {
      "location": "reference/docker-setup/#docker-setup-guide",
      "text": "This guide explains how to set up and run the AI Goal-Seeking System using Docker Compose with full observability stack for testing and tracing validation.",
      "title": "Docker Setup Guide"
    },
    {
      "location": "reference/docker-setup/#architecture-overview",
      "text": "The Docker setup includes:",
      "title": "Architecture Overview"
    },
    {
      "location": "reference/docker-setup/#core-services",
      "text": "Backend : Node.js API with TypeScript, OpenTelemetry tracing Frontend : React Native Web app served by Nginx Redis : In-memory data structure store for caching and sessions",
      "title": "Core Services"
    },
    {
      "location": "reference/docker-setup/#observability-stack",
      "text": "Jaeger : Distributed tracing UI and storage OpenTelemetry Collector : Telemetry data collection and processing Prometheus : Metrics storage and monitoring Grafana : Visualization dashboards for metrics and traces",
      "title": "Observability Stack"
    },
    {
      "location": "reference/docker-setup/#testing-services",
      "text": "Test Runner : Automated test execution Load Test : k6-based performance testing Trace Validator : Automated trace validation",
      "title": "Testing Services"
    },
    { "location": "reference/docker-setup/#quick-start", "text": "", "title": "Quick Start" },
    {
      "location": "reference/docker-setup/#1-basic-stack",
      "text": "Start the complete stack with observability: 1 ./run-docker-stack.sh -d",
      "title": "1. Basic Stack"
    },
    {
      "location": "reference/docker-setup/#2-with-testing",
      "text": "Start stack and run tests: 1 ./run-docker-stack.sh -d -t",
      "title": "2. With Testing"
    },
    {
      "location": "reference/docker-setup/#3-load-testing",
      "text": "Start stack and run load tests: 1 ./run-docker-stack.sh -d -l",
      "title": "3. Load Testing"
    },
    {
      "location": "reference/docker-setup/#4-trace-validation",
      "text": "Start stack and validate tracing: 1 ./run-docker-stack.sh -d -v",
      "title": "4. Trace Validation"
    },
    {
      "location": "reference/docker-setup/#5-clean-start",
      "text": "Clean everything and start fresh: 1 ./run-docker-stack.sh -d -c",
      "title": "5. Clean Start"
    },
    {
      "location": "reference/docker-setup/#service-urls",
      "text": "When running in detached mode, access services at: Frontend : http://localhost:8080 Backend API : http://localhost:5001 Grafana : http://localhost:3000 (admin/admin) Jaeger UI : http://localhost:16686 Prometheus : http://localhost:9090 Redis : redis://localhost:6379",
      "title": "Service URLs"
    },
    {
      "location": "reference/docker-setup/#manual-docker-compose-commands",
      "text": "",
      "title": "Manual Docker Compose Commands"
    },
    {
      "location": "reference/docker-setup/#basic-operations",
      "text": "Start all services: 1 docker-compose up -d Stop all services: 1 docker-compose down View logs: 1 docker-compose logs -f Build images: 1 docker-compose build",
      "title": "Basic Operations"
    },
    {
      "location": "reference/docker-setup/#testing-operations",
      "text": "Run with test profile: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d --profile test Run load tests: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm load-test Run trace validation: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm trace-validator",
      "title": "Testing Operations"
    },
    {
      "location": "reference/docker-setup/#environment-configuration",
      "text": "",
      "title": "Environment Configuration"
    },
    {
      "location": "reference/docker-setup/#backend-environment-variables",
      "text": "The backend service uses these environment variables: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Application NODE_ENV = production PORT = 5001 # Redis REDIS_URL = redis://redis:6379 # OpenTelemetry OTEL_EXPORTER_OTLP_ENDPOINT = http://otel-collector:4318 OTEL_SERVICE_NAME = ai-goal-seeking-backend OTEL_RESOURCE_ATTRIBUTES = service.name = ai-goal-seeking-backend,service.version = 1 .0.0,deployment.environment = docker # Frontend CORS FRONTEND_URL = http://frontend:80,http://localhost:8080",
      "title": "Backend Environment Variables"
    },
    {
      "location": "reference/docker-setup/#frontend-environment-variables",
      "text": "1 2 3 NODE_ENV = development REACT_APP_API_URL = http://backend:5001 REACT_APP_SOCKET_URL = http://backend:5001",
      "title": "Frontend Environment Variables"
    },
    {
      "location": "reference/docker-setup/#health-checks",
      "text": "All services include health checks:",
      "title": "Health Checks"
    },
    {
      "location": "reference/docker-setup/#backend-health-check",
      "text": "1 curl http://localhost:5001/health",
      "title": "Backend Health Check"
    },
    {
      "location": "reference/docker-setup/#frontend-health-check",
      "text": "1 curl http://localhost:8080/health",
      "title": "Frontend Health Check"
    },
    { "location": "reference/docker-setup/#service-status", "text": "1 docker-compose ps", "title": "Service Status" },
    { "location": "reference/docker-setup/#testing-and-validation", "text": "", "title": "Testing and Validation" },
    {
      "location": "reference/docker-setup/#load-testing",
      "text": "The load testing uses k6 and includes: Health endpoint validation API endpoint testing Performance metrics collection Response time validation Results are saved to load-test-results.json .",
      "title": "Load Testing"
    },
    {
      "location": "reference/docker-setup/#trace-validation",
      "text": "The trace validation script: Waits for all services to be healthy Generates test traces by calling API endpoints Queries Jaeger to verify traces are collected Validates trace data integrity",
      "title": "Trace Validation"
    },
    {
      "location": "reference/docker-setup/#running-individual-tests",
      "text": "Backend unit tests: 1 docker-compose run --rm backend npm test Load test only: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm load-test Trace validation only: 1 docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm trace-validator",
      "title": "Running Individual Tests"
    },
    {
      "location": "reference/docker-setup/#monitoring-and-observability",
      "text": "",
      "title": "Monitoring and Observability"
    },
    {
      "location": "reference/docker-setup/#grafana-dashboards",
      "text": "Access Grafana at http://localhost:3000 : Username: admin Password: admin Pre-configured data sources: Prometheus (metrics) Jaeger (traces)",
      "title": "Grafana Dashboards"
    },
    {
      "location": "reference/docker-setup/#jaeger-tracing",
      "text": "Access Jaeger UI at http://localhost:16686 : View distributed traces Search by service name: ai-goal-seeking-backend Analyze request flows and performance",
      "title": "Jaeger Tracing"
    },
    {
      "location": "reference/docker-setup/#prometheus-metrics",
      "text": "Access Prometheus at http://localhost:9090 : Monitor application metrics Query custom business metrics Set up alerts",
      "title": "Prometheus Metrics"
    },
    { "location": "reference/docker-setup/#troubleshooting", "text": "", "title": "Troubleshooting" },
    {
      "location": "reference/docker-setup/#common-issues",
      "text": "Port Conflicts 1 2 3 # Stop conflicting services sudo lsof -i :5001 sudo lsof -i :8080 Docker Build Failures 1 2 3 # Clean Docker cache docker system prune -a docker-compose build --no-cache Service Startup Issues 1 2 3 # Check logs docker-compose logs backend docker-compose logs frontend Health Check Failures 1 2 3 4 5 # Check service status docker-compose ps # Restart unhealthy services docker-compose restart backend",
      "title": "Common Issues"
    },
    {
      "location": "reference/docker-setup/#debug-mode",
      "text": "Enable debug logging: 1 2 # Set environment in docker-compose.test.yml LOG_LEVEL = debug",
      "title": "Debug Mode"
    },
    {
      "location": "reference/docker-setup/#network-issues",
      "text": "Test service connectivity: 1 2 3 4 5 6 7 8 # Enter backend container docker-compose exec backend sh # Test Redis connection redis-cli -h redis ping # Test collector connection curl http://otel-collector:4318/",
      "title": "Network Issues"
    },
    { "location": "reference/docker-setup/#development-workflow", "text": "", "title": "Development Workflow" },
    {
      "location": "reference/docker-setup/#hot-reloading",
      "text": "For development with hot reloading: 1 2 # Use test override with source mounting docker-compose -f docker-compose.yml -f docker-compose.test.yml up backend",
      "title": "Hot Reloading"
    },
    {
      "location": "reference/docker-setup/#debugging",
      "text": "Access container for debugging: 1 2 docker-compose exec backend sh docker-compose exec frontend sh",
      "title": "Debugging"
    },
    {
      "location": "reference/docker-setup/#production-considerations",
      "text": "",
      "title": "Production Considerations"
    },
    {
      "location": "reference/docker-setup/#security",
      "text": "Services run as non-root users Proper signal handling with dumb-init Resource limits configured",
      "title": "Security"
    },
    {
      "location": "reference/docker-setup/#performance",
      "text": "Multi-stage builds for smaller images Health checks with appropriate intervals Restart policies configured",
      "title": "Performance"
    },
    {
      "location": "reference/docker-setup/#monitoring",
      "text": "Comprehensive metrics collection Distributed tracing enabled Log aggregation ready",
      "title": "Monitoring"
    },
    { "location": "reference/docker-setup/#cleanup", "text": "", "title": "Cleanup" },
    {
      "location": "reference/docker-setup/#stop-and-remove-everything",
      "text": "1 ./run-docker-stack.sh -c Or manually: 1 2 docker-compose -f docker-compose.yml -f docker-compose.test.yml down -v --remove-orphans docker system prune -a",
      "title": "Stop and Remove Everything"
    },
    {
      "location": "reference/docker-setup/#remove-specific-volumes",
      "text": "1 2 3 docker volume rm react_prometheus_data docker volume rm react_grafana_data docker volume rm react_redis_data",
      "title": "Remove Specific Volumes"
    },
    {
      "location": "reference/test-bench/",
      "text": "Agent Test Bench System \u00b6 Overview \u00b6 The Agent Test Bench System provides comprehensive testing capabilities for all AI agents and system features. It includes both API endpoints for programmatic testing and a developer-friendly web interface. Backend API Endpoints \u00b6 All test bench endpoints are prefixed with /api/test-bench : Agent Testing \u00b6 Test Individual Agent \u00b6 Endpoint : POST /api/test-bench/agent/{agentType}/test Purpose : Test a specific agent with a custom message Request Body : 1 2 3 4 5 { \"message\" : \"Hello, how are you?\" , \"conversationHistory\" : [], \"userId\" : \"test-user\" } Bulk Test All Agents \u00b6 Endpoint : POST /api/test-bench/bulk-test Purpose : Test all agents with the same message Request Body : 1 2 3 4 5 { \"message\" : \"Tell me a joke\" , \"agentTypes\" : [ \"joke\" , \"general\" , \"trivia\" ], \"userId\" : \"test-user\" } Feature Testing \u00b6 Message Classification \u00b6 Endpoint : POST /api/test-bench/classifier/test Purpose : Test message classification system Request Body : 1 2 3 { \"message\" : \"I need billing support\" } RAG Service \u00b6 Endpoint : POST /api/test-bench/rag/test Purpose : Test RAG (Retrieval-Augmented Generation) service Request Body : 1 2 3 4 5 { \"agentType\" : \"joke\" , \"query\" : \"dad jokes\" , \"useFullSearch\" : false } Response Validation \u00b6 Endpoint : POST /api/test-bench/validator/test Purpose : Test response validation system Request Body : 1 2 3 4 5 6 7 8 { \"agentType\" : \"joke\" , \"userMessage\" : \"Tell me a joke\" , \"agentResponse\" : \"Why did the chicken cross the road?\" , \"conversationId\" : \"test-conversation\" , \"userId\" : \"test-user\" , \"isProactive\" : false } Joke Learning System \u00b6 Endpoint : POST /api/test-bench/joke-learning/test Purpose : Test adaptive joke learning system Request Body : 1 2 3 4 5 6 7 8 { \"userId\" : \"test-user\" , \"action\" : \"record-reaction\" , \"jokeId\" : \"joke-123\" , \"reactionType\" : \"laugh\" , \"jokeCategory\" : \"dad_jokes\" , \"jokeType\" : \"pun\" } Goal-Seeking System \u00b6 Endpoint : POST /api/test-bench/goal-seeking/test Purpose : Test proactive goal-seeking behavior Request Body : 1 2 3 4 5 { \"userId\" : \"test-user\" , \"action\" : \"update-state\" , \"message\" : \"I'm having billing issues\" } Conversation Manager \u00b6 Endpoint : POST /api/test-bench/conversation-manager/test Purpose : Test conversation flow and agent handoffs Request Body : 1 2 3 4 5 { \"userId\" : \"test-user\" , \"action\" : \"process-message\" , \"message\" : \"Hello there!\" } Comprehensive System Test \u00b6 Endpoint : POST /api/test-bench/comprehensive/test Purpose : Test full system integration (goal-seeking + conversation management) Request Body : 1 2 3 4 5 6 { \"userId\" : \"test-user\" , \"message\" : \"I need entertainment while I wait\" , \"conversationHistory\" : [], \"forcedAgentType\" : \"joke\" } System Information \u00b6 Get Available Agents \u00b6 Endpoint : GET /api/test-bench/agents/list Purpose : Retrieve list of all available agents Response : Returns agent metadata including names and descriptions System Health Check \u00b6 Endpoint : GET /api/test-bench/health Purpose : Check health status of all system components Response : Returns operational status of each service Agent Types \u00b6 The system supports the following 14 agent types: general - General assistant for casual conversation and everyday tasks joke - Adaptive joke master with learning capabilities trivia - Trivia master for fascinating facts and knowledge gif - GIF master for entertaining visual content account_support - Account-related issues and authentication billing_support - Billing, payments, and financial matters website_support - Website functionality and technical issues operator_support - General customer service coordination hold_agent - Hold experience management with entertainment story_teller - Creative storytelling and narratives riddle_master - Riddles, puzzles, and brain teasers quote_master - Inspirational quotes and wisdom game_host - Interactive games and challenges music_guru - Music recommendations and discussions Frontend Test Bench Interface \u00b6 The Developer Test Bench provides a comprehensive web interface for testing all system components: Features \u00b6 Tabbed Interface : Organized testing panels for different system components Real-time Results : Live feedback with success/failure indicators Execution Timing : Performance metrics for each test Result Export : Download test results as JSON for analysis System Health Dashboard : Monitor component operational status Agent Directory : View all available agents and their capabilities Usage \u00b6 Access : Navigate to the test bench interface in your development environment Select Test Type : Choose from agent testing, classifier, system health, etc. Configure Test : Set parameters like agent type, message, user ID Execute : Run individual tests or bulk tests across all agents Review Results : View detailed response data and execution metrics Export Data : Download results for further analysis Test Categories \u00b6 Agent Testing Tab \u00b6 Test individual agents with custom messages Bulk test all agents simultaneously Configure user ID and conversation history View agent-specific responses and confidence levels Classifier Tab \u00b6 Test message classification accuracy See which agent type is selected for different messages View classification confidence and reasoning System Health Tab \u00b6 Monitor operational status of all services View OpenAI API key configuration status Browse available agents and their descriptions Check system component health indicators Testing Best Practices \u00b6 1. Agent Response Testing \u00b6 1 2 3 4 # Test joke agent curl -X POST http://localhost:5001/api/test-bench/agent/joke/test \\ -H \"Content-Type: application/json\" \\ -d '{\"message\": \"Tell me a funny joke\", \"userId\": \"test-user\"}' 2. Classification Testing \u00b6 1 2 3 4 # Test message classification curl -X POST http://localhost:5001/api/test-bench/classifier/test \\ -H \"Content-Type: application/json\" \\ -d '{\"message\": \"I need help with my billing account\"}' 3. System Health Check \u00b6 1 2 # Check system health curl -X GET http://localhost:5001/api/test-bench/health 4. Bulk Agent Testing \u00b6 1 2 3 4 # Test all agents with same message curl -X POST http://localhost:5001/api/test-bench/bulk-test \\ -H \"Content-Type: application/json\" \\ -d '{\"message\": \"Hello, how can you help me?\", \"userId\": \"test-user\"}' Integration with CI/CD \u00b6 The test bench can be integrated into continuous integration pipelines: Example Test Script \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // test-agents.js const testAllAgents = async () => { const agents = [ 'general' , 'joke' , 'trivia' , 'gif' ]; const results = []; for ( const agent of agents ) { const response = await fetch ( `/api/test-bench/agent/ ${ agent } /test` , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ message : 'Hello, test message' , userId : 'ci-test-user' , }), }); const result = await response . json (); results . push ({ agent , success : result . success }); } return results ; }; Error Handling \u00b6 All test endpoints return consistent error responses: 1 2 3 4 5 6 { \"success\" : false , \"error\" : \"Error description\" , \"details\" : \"Additional error details\" , \"timestamp\" : \"2024-01-01T12:00:00Z\" } Performance Monitoring \u00b6 The test bench tracks: Response times for each endpoint Success/failure rates Agent performance comparisons System resource utilization Error frequency and types Security Considerations \u00b6 Test endpoints are intended for development environments Production deployments should disable or restrict access Test data should not contain sensitive information User IDs in tests should be clearly marked as test accounts Development Workflow \u00b6 Feature Development : Use individual agent tests during feature development Integration Testing : Use comprehensive tests for full system validation Performance Testing : Use bulk tests to identify performance bottlenecks Regression Testing : Use automated test suites for continuous validation Debugging : Use detailed test results to diagnose issues This test bench system provides comprehensive coverage for all AI agents and system features, enabling developers to validate functionality, performance, and integration across the entire platform.",
      "title": "Test Bench"
    },
    { "location": "reference/test-bench/#agent-test-bench-system", "text": "", "title": "Agent Test Bench System" },
    {
      "location": "reference/test-bench/#overview",
      "text": "The Agent Test Bench System provides comprehensive testing capabilities for all AI agents and system features. It includes both API endpoints for programmatic testing and a developer-friendly web interface.",
      "title": "Overview"
    },
    {
      "location": "reference/test-bench/#backend-api-endpoints",
      "text": "All test bench endpoints are prefixed with /api/test-bench :",
      "title": "Backend API Endpoints"
    },
    { "location": "reference/test-bench/#agent-testing", "text": "", "title": "Agent Testing" },
    {
      "location": "reference/test-bench/#test-individual-agent",
      "text": "Endpoint : POST /api/test-bench/agent/{agentType}/test Purpose : Test a specific agent with a custom message Request Body : 1 2 3 4 5 { \"message\" : \"Hello, how are you?\" , \"conversationHistory\" : [], \"userId\" : \"test-user\" }",
      "title": "Test Individual Agent"
    },
    {
      "location": "reference/test-bench/#bulk-test-all-agents",
      "text": "Endpoint : POST /api/test-bench/bulk-test Purpose : Test all agents with the same message Request Body : 1 2 3 4 5 { \"message\" : \"Tell me a joke\" , \"agentTypes\" : [ \"joke\" , \"general\" , \"trivia\" ], \"userId\" : \"test-user\" }",
      "title": "Bulk Test All Agents"
    },
    { "location": "reference/test-bench/#feature-testing", "text": "", "title": "Feature Testing" },
    {
      "location": "reference/test-bench/#message-classification",
      "text": "Endpoint : POST /api/test-bench/classifier/test Purpose : Test message classification system Request Body : 1 2 3 { \"message\" : \"I need billing support\" }",
      "title": "Message Classification"
    },
    {
      "location": "reference/test-bench/#rag-service",
      "text": "Endpoint : POST /api/test-bench/rag/test Purpose : Test RAG (Retrieval-Augmented Generation) service Request Body : 1 2 3 4 5 { \"agentType\" : \"joke\" , \"query\" : \"dad jokes\" , \"useFullSearch\" : false }",
      "title": "RAG Service"
    },
    {
      "location": "reference/test-bench/#response-validation",
      "text": "Endpoint : POST /api/test-bench/validator/test Purpose : Test response validation system Request Body : 1 2 3 4 5 6 7 8 { \"agentType\" : \"joke\" , \"userMessage\" : \"Tell me a joke\" , \"agentResponse\" : \"Why did the chicken cross the road?\" , \"conversationId\" : \"test-conversation\" , \"userId\" : \"test-user\" , \"isProactive\" : false }",
      "title": "Response Validation"
    },
    {
      "location": "reference/test-bench/#joke-learning-system",
      "text": "Endpoint : POST /api/test-bench/joke-learning/test Purpose : Test adaptive joke learning system Request Body : 1 2 3 4 5 6 7 8 { \"userId\" : \"test-user\" , \"action\" : \"record-reaction\" , \"jokeId\" : \"joke-123\" , \"reactionType\" : \"laugh\" , \"jokeCategory\" : \"dad_jokes\" , \"jokeType\" : \"pun\" }",
      "title": "Joke Learning System"
    },
    {
      "location": "reference/test-bench/#goal-seeking-system",
      "text": "Endpoint : POST /api/test-bench/goal-seeking/test Purpose : Test proactive goal-seeking behavior Request Body : 1 2 3 4 5 { \"userId\" : \"test-user\" , \"action\" : \"update-state\" , \"message\" : \"I'm having billing issues\" }",
      "title": "Goal-Seeking System"
    },
    {
      "location": "reference/test-bench/#conversation-manager",
      "text": "Endpoint : POST /api/test-bench/conversation-manager/test Purpose : Test conversation flow and agent handoffs Request Body : 1 2 3 4 5 { \"userId\" : \"test-user\" , \"action\" : \"process-message\" , \"message\" : \"Hello there!\" }",
      "title": "Conversation Manager"
    },
    {
      "location": "reference/test-bench/#comprehensive-system-test",
      "text": "Endpoint : POST /api/test-bench/comprehensive/test Purpose : Test full system integration (goal-seeking + conversation management) Request Body : 1 2 3 4 5 6 { \"userId\" : \"test-user\" , \"message\" : \"I need entertainment while I wait\" , \"conversationHistory\" : [], \"forcedAgentType\" : \"joke\" }",
      "title": "Comprehensive System Test"
    },
    { "location": "reference/test-bench/#system-information", "text": "", "title": "System Information" },
    {
      "location": "reference/test-bench/#get-available-agents",
      "text": "Endpoint : GET /api/test-bench/agents/list Purpose : Retrieve list of all available agents Response : Returns agent metadata including names and descriptions",
      "title": "Get Available Agents"
    },
    {
      "location": "reference/test-bench/#system-health-check",
      "text": "Endpoint : GET /api/test-bench/health Purpose : Check health status of all system components Response : Returns operational status of each service",
      "title": "System Health Check"
    },
    {
      "location": "reference/test-bench/#agent-types",
      "text": "The system supports the following 14 agent types: general - General assistant for casual conversation and everyday tasks joke - Adaptive joke master with learning capabilities trivia - Trivia master for fascinating facts and knowledge gif - GIF master for entertaining visual content account_support - Account-related issues and authentication billing_support - Billing, payments, and financial matters website_support - Website functionality and technical issues operator_support - General customer service coordination hold_agent - Hold experience management with entertainment story_teller - Creative storytelling and narratives riddle_master - Riddles, puzzles, and brain teasers quote_master - Inspirational quotes and wisdom game_host - Interactive games and challenges music_guru - Music recommendations and discussions",
      "title": "Agent Types"
    },
    {
      "location": "reference/test-bench/#frontend-test-bench-interface",
      "text": "The Developer Test Bench provides a comprehensive web interface for testing all system components:",
      "title": "Frontend Test Bench Interface"
    },
    {
      "location": "reference/test-bench/#features",
      "text": "Tabbed Interface : Organized testing panels for different system components Real-time Results : Live feedback with success/failure indicators Execution Timing : Performance metrics for each test Result Export : Download test results as JSON for analysis System Health Dashboard : Monitor component operational status Agent Directory : View all available agents and their capabilities",
      "title": "Features"
    },
    {
      "location": "reference/test-bench/#usage",
      "text": "Access : Navigate to the test bench interface in your development environment Select Test Type : Choose from agent testing, classifier, system health, etc. Configure Test : Set parameters like agent type, message, user ID Execute : Run individual tests or bulk tests across all agents Review Results : View detailed response data and execution metrics Export Data : Download results for further analysis",
      "title": "Usage"
    },
    { "location": "reference/test-bench/#test-categories", "text": "", "title": "Test Categories" },
    {
      "location": "reference/test-bench/#agent-testing-tab",
      "text": "Test individual agents with custom messages Bulk test all agents simultaneously Configure user ID and conversation history View agent-specific responses and confidence levels",
      "title": "Agent Testing Tab"
    },
    {
      "location": "reference/test-bench/#classifier-tab",
      "text": "Test message classification accuracy See which agent type is selected for different messages View classification confidence and reasoning",
      "title": "Classifier Tab"
    },
    {
      "location": "reference/test-bench/#system-health-tab",
      "text": "Monitor operational status of all services View OpenAI API key configuration status Browse available agents and their descriptions Check system component health indicators",
      "title": "System Health Tab"
    },
    { "location": "reference/test-bench/#testing-best-practices", "text": "", "title": "Testing Best Practices" },
    {
      "location": "reference/test-bench/#1-agent-response-testing",
      "text": "1 2 3 4 # Test joke agent curl -X POST http://localhost:5001/api/test-bench/agent/joke/test \\ -H \"Content-Type: application/json\" \\ -d '{\"message\": \"Tell me a funny joke\", \"userId\": \"test-user\"}'",
      "title": "1. Agent Response Testing"
    },
    {
      "location": "reference/test-bench/#2-classification-testing",
      "text": "1 2 3 4 # Test message classification curl -X POST http://localhost:5001/api/test-bench/classifier/test \\ -H \"Content-Type: application/json\" \\ -d '{\"message\": \"I need help with my billing account\"}'",
      "title": "2. Classification Testing"
    },
    {
      "location": "reference/test-bench/#3-system-health-check",
      "text": "1 2 # Check system health curl -X GET http://localhost:5001/api/test-bench/health",
      "title": "3. System Health Check"
    },
    {
      "location": "reference/test-bench/#4-bulk-agent-testing",
      "text": "1 2 3 4 # Test all agents with same message curl -X POST http://localhost:5001/api/test-bench/bulk-test \\ -H \"Content-Type: application/json\" \\ -d '{\"message\": \"Hello, how can you help me?\", \"userId\": \"test-user\"}'",
      "title": "4. Bulk Agent Testing"
    },
    {
      "location": "reference/test-bench/#integration-with-cicd",
      "text": "The test bench can be integrated into continuous integration pipelines:",
      "title": "Integration with CI/CD"
    },
    {
      "location": "reference/test-bench/#example-test-script",
      "text": "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // test-agents.js const testAllAgents = async () => { const agents = [ 'general' , 'joke' , 'trivia' , 'gif' ]; const results = []; for ( const agent of agents ) { const response = await fetch ( `/api/test-bench/agent/ ${ agent } /test` , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ message : 'Hello, test message' , userId : 'ci-test-user' , }), }); const result = await response . json (); results . push ({ agent , success : result . success }); } return results ; };",
      "title": "Example Test Script"
    },
    {
      "location": "reference/test-bench/#error-handling",
      "text": "All test endpoints return consistent error responses: 1 2 3 4 5 6 { \"success\" : false , \"error\" : \"Error description\" , \"details\" : \"Additional error details\" , \"timestamp\" : \"2024-01-01T12:00:00Z\" }",
      "title": "Error Handling"
    },
    {
      "location": "reference/test-bench/#performance-monitoring",
      "text": "The test bench tracks: Response times for each endpoint Success/failure rates Agent performance comparisons System resource utilization Error frequency and types",
      "title": "Performance Monitoring"
    },
    {
      "location": "reference/test-bench/#security-considerations",
      "text": "Test endpoints are intended for development environments Production deployments should disable or restrict access Test data should not contain sensitive information User IDs in tests should be clearly marked as test accounts",
      "title": "Security Considerations"
    },
    {
      "location": "reference/test-bench/#development-workflow",
      "text": "Feature Development : Use individual agent tests during feature development Integration Testing : Use comprehensive tests for full system validation Performance Testing : Use bulk tests to identify performance bottlenecks Regression Testing : Use automated test suites for continuous validation Debugging : Use detailed test results to diagnose issues This test bench system provides comprehensive coverage for all AI agents and system features, enabling developers to validate functionality, performance, and integration across the entire platform.",
      "title": "Development Workflow"
    },
    {
      "location": "reference/youtube-embedding/",
      "text": "YouTube Video Embedding \u00b6 The YouTube Guru agent can now embed actual YouTube videos directly in chat messages! How It Works \u00b6 Backend (Agent Configuration) \u00b6 The YouTube Guru agent has been updated to use a special markdown-like format for embedding videos When a user requests entertainment, the agent responds with embedded YouTube videos using the format: 1 2 3 4 ```youtube VIDEO_ID TITLE DURATION 1 2 3 4 5 6 7 8 ### Frontend (React Native Implementation) - Added a `YouTubeEmbed` component that uses `react-native-webview` to display videos - Created a `parseMessageContent` function that detects YouTube embed blocks in messages - Videos are rendered with a clean UI showing title, duration, and the video player ## Example Usage When a user says \"Show me an entertaining video right now\", the YouTube Guru will respond with something like: \ud83c\udfa5 Here's a hilarious video that's perfect for you right now! 1 2 3 dQw4w9WgXcQ Rick Astley - Never Gonna Give You Up (Official Video) 3:32 This classic never gets old! Sometimes you just need a good rickroll to brighten your day. Rick's dancing and that unforgettable chorus will definitely put a smile on your face! \ud83d\ude04 Want another video? I've got tons more entertainment ready to go! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ## Features - **Direct Video Embedding**: Videos play directly in the chat interface - **Clean UI**: Each video has a header showing the title and duration - **Fullscreen Support**: Users can watch videos in fullscreen mode - **No Autoplay**: Videos don't start playing automatically (user-friendly) - **Mobile Optimized**: Proper WebView configuration for React Native - **Mixed Content**: Videos can be embedded alongside text in the same message ## Available Video Content The YouTube Guru has access to a curated collection of: - Classic internet memes (Rickroll, Keyboard Cat, Dramatic Hamster) - Viral sensations (David After Dentist, Grumpy Cat, Sneezing Panda) - Music hits (Gangnam Style, Baby Shark, Chocolate Rain) - Gaming legends (Leroy Jenkins) - Feel-good content and animal comedy ## Technical Implementation ### YouTube Embed Component ```typescript const YouTubeEmbed: React.FC<{ videoId: string; title: string; duration: string }> = ({ videoId, title, duration }) => { const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=0&rel=0&modestbranding=1`; return ( <View style={styles.youtubeContainer}> <View style={styles.youtubeHeader}> <Text style={styles.youtubeTitle}>\ud83c\udfac {title}</Text> <Text style={styles.youtubeDuration}>\u23f1\ufe0f {duration}</Text> </View> <WebView source={{ uri: embedUrl }} style={styles.youtubeWebView} allowsFullscreenVideo mediaPlaybackRequiresUserAction={false} javaScriptEnabled domStorageEnabled startInLoadingState scalesPageToFit /> </View> ); }; Message Parsing \u00b6 The system uses regex to detect YouTube embed blocks: 1 const youtubeRegex = /```youtube\\n([^\\n]+)\\n([^\\n]+)\\n([^\\n]+)\\n```/g ; This allows for seamless integration of videos within regular text messages, enabling the agent to provide both commentary and embedded videos in a single response. User Experience \u00b6 Users can now: Ask the YouTube Guru for entertainment videos Receive immediate video recommendations with embedded players Watch videos directly in the chat interface Request additional videos for continued entertainment Enjoy a curated selection of proven funny and entertaining content This feature transforms the YouTube Guru from a simple video recommender into an interactive entertainment companion that delivers actual video content directly in the conversation!",
      "title": "YouTube Embedding"
    },
    {
      "location": "reference/youtube-embedding/#youtube-video-embedding",
      "text": "The YouTube Guru agent can now embed actual YouTube videos directly in chat messages!",
      "title": "YouTube Video Embedding"
    },
    { "location": "reference/youtube-embedding/#how-it-works", "text": "", "title": "How It Works" },
    {
      "location": "reference/youtube-embedding/#backend-agent-configuration",
      "text": "The YouTube Guru agent has been updated to use a special markdown-like format for embedding videos When a user requests entertainment, the agent responds with embedded YouTube videos using the format: 1 2 3 4 ```youtube VIDEO_ID TITLE DURATION 1 2 3 4 5 6 7 8 ### Frontend (React Native Implementation) - Added a `YouTubeEmbed` component that uses `react-native-webview` to display videos - Created a `parseMessageContent` function that detects YouTube embed blocks in messages - Videos are rendered with a clean UI showing title, duration, and the video player ## Example Usage When a user says \"Show me an entertaining video right now\", the YouTube Guru will respond with something like: \ud83c\udfa5 Here's a hilarious video that's perfect for you right now! 1 2 3 dQw4w9WgXcQ Rick Astley - Never Gonna Give You Up (Official Video) 3:32 This classic never gets old! Sometimes you just need a good rickroll to brighten your day. Rick's dancing and that unforgettable chorus will definitely put a smile on your face! \ud83d\ude04 Want another video? I've got tons more entertainment ready to go! 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 ## Features - **Direct Video Embedding**: Videos play directly in the chat interface - **Clean UI**: Each video has a header showing the title and duration - **Fullscreen Support**: Users can watch videos in fullscreen mode - **No Autoplay**: Videos don't start playing automatically (user-friendly) - **Mobile Optimized**: Proper WebView configuration for React Native - **Mixed Content**: Videos can be embedded alongside text in the same message ## Available Video Content The YouTube Guru has access to a curated collection of: - Classic internet memes (Rickroll, Keyboard Cat, Dramatic Hamster) - Viral sensations (David After Dentist, Grumpy Cat, Sneezing Panda) - Music hits (Gangnam Style, Baby Shark, Chocolate Rain) - Gaming legends (Leroy Jenkins) - Feel-good content and animal comedy ## Technical Implementation ### YouTube Embed Component ```typescript const YouTubeEmbed: React.FC<{ videoId: string; title: string; duration: string }> = ({ videoId, title, duration }) => { const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=0&rel=0&modestbranding=1`; return ( <View style={styles.youtubeContainer}> <View style={styles.youtubeHeader}> <Text style={styles.youtubeTitle}>\ud83c\udfac {title}</Text> <Text style={styles.youtubeDuration}>\u23f1\ufe0f {duration}</Text> </View> <WebView source={{ uri: embedUrl }} style={styles.youtubeWebView} allowsFullscreenVideo mediaPlaybackRequiresUserAction={false} javaScriptEnabled domStorageEnabled startInLoadingState scalesPageToFit /> </View> ); };",
      "title": "Backend (Agent Configuration)"
    },
    {
      "location": "reference/youtube-embedding/#message-parsing",
      "text": "The system uses regex to detect YouTube embed blocks: 1 const youtubeRegex = /```youtube\\n([^\\n]+)\\n([^\\n]+)\\n([^\\n]+)\\n```/g ; This allows for seamless integration of videos within regular text messages, enabling the agent to provide both commentary and embedded videos in a single response.",
      "title": "Message Parsing"
    },
    {
      "location": "reference/youtube-embedding/#user-experience",
      "text": "Users can now: Ask the YouTube Guru for entertainment videos Receive immediate video recommendations with embedded players Watch videos directly in the chat interface Request additional videos for continued entertainment Enjoy a curated selection of proven funny and entertaining content This feature transforms the YouTube Guru from a simple video recommender into an interactive entertainment companion that delivers actual video content directly in the conversation!",
      "title": "User Experience"
    }
  ]
}
