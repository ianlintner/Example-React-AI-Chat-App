name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  pr-info:
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.pr.outputs.number }}
      base-branch: ${{ steps.pr.outputs.base }}
      head-branch: ${{ steps.pr.outputs.head }}
    
    steps:
    - name: Get PR Info
      id: pr
      run: |
        echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        echo "base=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
        echo "head=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

  test-and-build:
    runs-on: ubuntu-latest
    needs: pr-info
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json
        
    - name: Install dependencies
      run: |
        cd ${{ matrix.component }}
        npm ci
        
    - name: Run tests
      run: |
        cd ${{ matrix.component }}
        npm run test:ci
        
    - name: Run linting (frontend only)
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm run lint
        
    - name: Build
      run: |
        cd ${{ matrix.component }}
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.component }}-build
        path: ${{ matrix.component }}/dist/
        retention-days: 7

  pr-comment:
    runs-on: ubuntu-latest
    needs: [pr-info, test-and-build]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
        
    - name: Create/Update PR Comment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        PR_NUMBER=${{ needs.pr-info.outputs.pr-number }}
        BASE_BRANCH=${{ needs.pr-info.outputs.base-branch }}
        HEAD_BRANCH=${{ needs.pr-info.outputs.head-branch }}
        
        # Check test results
        if [ "${{ needs.test-and-build.result }}" = "success" ]; then
          STATUS="‚úÖ All tests passed!"
          EMOJI="üéâ"
        else
          STATUS="‚ùå Some tests failed"
          EMOJI="üö®"
        fi
        
        # Create comment body
        COMMENT_BODY="## ${EMOJI} PR Check Results
        
        **Branch:** \`${HEAD_BRANCH}\` ‚Üí \`${BASE_BRANCH}\`
        **Status:** ${STATUS}
        **Build:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        
        ### Test Results:
        - Backend Tests: ${{ needs.test-and-build.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
        - Frontend Tests: ${{ needs.test-and-build.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}
        - Build Process: ${{ needs.test-and-build.result == 'success' && '‚úÖ Successful' || '‚ùå Failed' }}
        
        ### Next Steps:
        ${{ needs.test-and-build.result == 'success' && '- Ready for code review! üîç' || '- Please fix failing tests before review üõ†Ô∏è' }}
        ${{ needs.test-and-build.result == 'success' && '- Consider running local tests: `npm test` (backend) or `npm run test:ci` (frontend)' || '' }}
        
        ---
        *This comment was automatically generated by the PR Checks workflow.*"
        
        # Check if comment already exists and update/create accordingly
        EXISTING_COMMENT=$(gh pr view $PR_NUMBER --json comments --jq '.comments[] | select(.body | contains("PR Check Results")) | .id' || echo "")
        
        if [ -n "$EXISTING_COMMENT" ]; then
          echo "Updating existing comment..."
          echo "$COMMENT_BODY" | gh api -X PATCH "repos/${{ github.repository }}/issues/comments/$EXISTING_COMMENT" --field body=@-
        else
          echo "Creating new comment..."
          echo "$COMMENT_BODY" | gh pr comment $PR_NUMBER --body-file=-
        fi

  security-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level=moderate || true
        cd ../frontend && npm audit --audit-level=moderate || true
        
    - name: Check for secrets
      run: |
        # Simple check for potential secrets (can be enhanced with tools like truffleHog)
        echo "Checking for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.js" --include="*.json" --exclude-dir=node_modules --exclude="package-lock.json" .; then
          echo "‚ö†Ô∏è Found potential secrets in code. Please review."
        else
          echo "‚úÖ No obvious secrets found."
        fi
