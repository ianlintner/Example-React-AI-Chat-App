name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  pr-info:
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.pr.outputs.number }}
      base-branch: ${{ steps.pr.outputs.base }}
      head-branch: ${{ steps.pr.outputs.head }}
    
    steps:
    - name: Get PR Info
      id: pr
      run: |
        echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
        echo "base=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
        echo "head=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT

  test-and-build:
    runs-on: ubuntu-latest
    needs: pr-info
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json
        
    - name: Install dependencies
      run: |
        cd ${{ matrix.component }}
        npm ci
        
    - name: Run tests
      run: |
        cd ${{ matrix.component }}
        npm run test:ci
        
    - name: Run linting (frontend only)
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm run lint
        
    - name: Build
      run: |
        cd ${{ matrix.component }}
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.component }}-build
        path: ${{ matrix.component }}/dist/
        retention-days: 7


  security-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        cd backend && npm audit --audit-level=moderate || true
        cd ../frontend && npm audit --audit-level=moderate || true
        
    - name: Check for secrets
      run: |
        # Simple check for potential secrets (can be enhanced with tools like truffleHog)
        echo "Checking for potential secrets..."
        if grep -r -i "password\|secret\|key\|token" --include="*.ts" --include="*.js" --include="*.json" --exclude-dir=node_modules --exclude="package-lock.json" .; then
          echo "⚠️ Found potential secrets in code. Please review."
        else
          echo "✅ No obvious secrets found."
        fi
