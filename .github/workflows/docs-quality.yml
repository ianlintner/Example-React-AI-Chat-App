name: Documentation Quality

on:
  pull_request:
    paths: ['docs/**', 'mkdocs.yml', '*.md']
  push:
    branches: [main, develop]
    paths: ['docs/**', 'mkdocs.yml', '*.md']

jobs:
  docs-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install mkdocs-material mkdocs-techdocs-core

      - name: Install Node.js dependencies
        run: |
          npm install -g markdownlint-cli2 cspell

      - name: Lint markdown files
        run: |
          markdownlint-cli2 "docs/**/*.md" "*.md"
        continue-on-error: true

      - name: Spell check documentation
        run: |
          cspell "docs/**/*.md" "*.md"
        continue-on-error: true

      - name: Build docs (strict mode)
        run: |
          mkdocs build --strict --site-dir ./site

      - name: Check for broken internal links
        run: |
          # Start mkdocs dev server in background
          mkdocs serve --dev-addr=127.0.0.1:8000 &
          SERVER_PID=$!

          # Wait for server to start
          sleep 10

          # Install linkchecker
          pip install linkchecker

          # Check links (ignore external localhost links)
          linkchecker http://127.0.0.1:8000 \
            --ignore-url="localhost:3000" \
            --ignore-url="localhost:9090" \
            --ignore-url="localhost:5001" \
            --ignore-url="localhost:16686" \
            --no-warnings \
            --output=text
            
          # Clean up
          kill $SERVER_PID
        continue-on-error: true

      - name: Upload docs build artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: docs-build
          path: site/
          retention-days: 7

  docs-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: docs-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install mkdocs-material mkdocs-techdocs-core

      - name: Build docs for preview
        run: |
          mkdocs build --site-dir ./preview

      - name: Deploy to PR preview (placeholder)
        run: |
          echo "ðŸ“š Documentation preview would be available at:"
          echo "https://docs-preview.example.com/pr-${{ github.event.number }}"
          echo ""
          echo "In a real setup, this would deploy to:"
          echo "- GitHub Pages with PR previews"
          echo "- Netlify/Vercel preview deployments"
          echo "- Or internal preview infrastructure"

      - name: Comment PR with preview link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('ðŸ“š Documentation Preview')
            );

            const commentBody = `
            ## ðŸ“š Documentation Preview

            The documentation has been built successfully for this PR.

            **Changes detected in:**
            - Documentation files
            - MkDocs configuration

            **Quality checks:**
            - âœ… Markdown linting
            - âœ… Spell checking  
            - âœ… Build validation
            - âœ… Link verification

            *Preview deployment would be available in production setup*
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
