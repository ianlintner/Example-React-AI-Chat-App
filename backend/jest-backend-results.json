{
  "numFailedTestSuites": 2,
  "numFailedTests": 3,
  "numPassedTestSuites": 15,
  "numPassedTests": 373,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 17,
  "numTotalTests": 376,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1755109081149,
  "success": false,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["QueueService", "constructor"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService constructor should initialize with socket server and message queue",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize with socket server and message queue"
        },
        {
          "ancestorTitles": ["QueueService", "initialize"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService initialize should connect to message queue and setup handlers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "should connect to message queue and setup handlers"
        },
        {
          "ancestorTitles": ["QueueService", "initialize"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService initialize should handle dead letter queue events",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle dead letter queue events"
        },
        {
          "ancestorTitles": ["QueueService", "shutdown"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService shutdown should disconnect from message queue",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should disconnect from message queue"
        },
        {
          "ancestorTitles": ["QueueService", "queue handlers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue handlers should handle chat messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle chat messages"
        },
        {
          "ancestorTitles": ["QueueService", "queue handlers"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue handlers should handle agent responses",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle agent responses"
        },
        {
          "ancestorTitles": ["QueueService", "queue handlers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue handlers should handle proactive actions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle proactive actions"
        },
        {
          "ancestorTitles": ["QueueService", "queue handlers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue handlers should handle stream chunks",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle stream chunks"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueChatMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueChatMessage should enqueue chat message with default priority",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue chat message with default priority"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueChatMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueChatMessage should enqueue chat message with custom priority and force agent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue chat message with custom priority and force agent"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueAgentResponse"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueAgentResponse should enqueue agent response with higher default priority",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue agent response with higher default priority"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueAgentResponse"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueAgentResponse should enqueue agent response with custom priority",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue agent response with custom priority"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueProactiveAction"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueProactiveAction should enqueue immediate proactive action",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue immediate proactive action"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueProactiveAction"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueProactiveAction should enqueue delayed proactive action",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue delayed proactive action"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueStreamChunk"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueStreamChunk should enqueue stream chunk with high priority",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue stream chunk with high priority"
        },
        {
          "ancestorTitles": ["QueueService", "enqueue methods", "enqueueStreamChunk"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService enqueue methods enqueueStreamChunk should enqueue stream chunk with custom priority",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue stream chunk with custom priority"
        },
        {
          "ancestorTitles": ["QueueService", "queue management methods", "getQueueStats"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue management methods getQueueStats should return stats for all queues when no queue name provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return stats for all queues when no queue name provided"
        },
        {
          "ancestorTitles": ["QueueService", "queue management methods", "getQueueStats"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue management methods getQueueStats should return stats for specific queue when queue name provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return stats for specific queue when queue name provided"
        },
        {
          "ancestorTitles": ["QueueService", "queue management methods", "getQueueSize"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue management methods getQueueSize should return queue size",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return queue size"
        },
        {
          "ancestorTitles": ["QueueService", "queue management methods", "purgeQueue"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue management methods purgeQueue should purge queue and log message",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should purge queue and log message"
        },
        {
          "ancestorTitles": ["QueueService", "queue management methods", "isHealthy"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService queue management methods isHealthy should return health status",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return health status"
        },
        {
          "ancestorTitles": ["QueueService", "demonstrateQueueFeatures"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService demonstrateQueueFeatures should enqueue demo messages with different priorities",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue demo messages with different priorities"
        },
        {
          "ancestorTitles": ["QueueService", "getProviderType"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService getProviderType should return provider type from message queue",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return provider type from message queue"
        },
        {
          "ancestorTitles": ["QueueService", "switchProvider"],
          "duration": 2,
          "failureDetails": [
            {
              "matcherResult": {
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"🔄 Switching from memory to redis\"\u001b[39m\nReceived\n       1: \u001b[31m\"📨 Queue Service initialized with provider:\"\u001b[39m, \u001b[31m\"redis\"\u001b[39m\n       2: \u001b[31m\"📨 Queue handlers set up for all queues\"\u001b[39m\n       3: \u001b[31m\"🔄 Switching from redis to redis\"\u001b[39m\n\nNumber of calls: \u001b[31m5\u001b[39m",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32m\"🔄 Switching from memory to redis\"\u001b[39m\nReceived\n       1: \u001b[31m\"📨 Queue Service initialized with provider:\"\u001b[39m, \u001b[31m\"redis\"\u001b[39m\n       2: \u001b[31m\"📨 Queue handlers set up for all queues\"\u001b[39m\n       3: \u001b[31m\"🔄 Switching from redis to redis\"\u001b[39m\n\nNumber of calls: \u001b[31m5\u001b[39m\n    at Object.<anonymous> (/Users/ianlintner/Projects/React/backend/src/messageQueue/__tests__/queueService.test.ts:565:26)"
          ],
          "fullName": "QueueService switchProvider should switch from memory to redis provider",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "failed",
          "title": "should switch from memory to redis provider"
        },
        {
          "ancestorTitles": ["QueueService", "switchProvider"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService switchProvider should switch to memory provider without redis URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should switch to memory provider without redis URL"
        },
        {
          "ancestorTitles": ["QueueService singleton functions", "createQueueService"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService singleton functions createQueueService should create new instance if none exists",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should create new instance if none exists"
        },
        {
          "ancestorTitles": ["QueueService singleton functions", "createQueueService"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService singleton functions createQueueService should return existing instance if already created",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return existing instance if already created"
        },
        {
          "ancestorTitles": ["QueueService singleton functions", "getQueueService"],
          "duration": 0,
          "failureDetails": [
            {
              "matcherResult": {
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m{\"io\": {\"emit\": [Function mockConstructor], \"to\": [Function mockConstructor]}, \"messageQueue\": {\"connect\": [Function mockConstructor], \"createMessage\": [Function mockConstructor], \"disconnect\": [Function mockConstructor], \"enqueue\": [Function mockConstructor], \"getProviderType\": [Function mockConstructor], \"getQueueSize\": [Function mockConstructor], \"getStats\": [Function mockConstructor], \"isHealthy\": [Function mockConstructor], \"on\": [Function mockConstructor], \"purgeQueue\": [Function mockConstructor], \"subscribe\": [Function mockConstructor]}}\u001b[39m",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\nReceived: \u001b[31m{\"io\": {\"emit\": [Function mockConstructor], \"to\": [Function mockConstructor]}, \"messageQueue\": {\"connect\": [Function mockConstructor], \"createMessage\": [Function mockConstructor], \"disconnect\": [Function mockConstructor], \"enqueue\": [Function mockConstructor], \"getProviderType\": [Function mockConstructor], \"getQueueSize\": [Function mockConstructor], \"getStats\": [Function mockConstructor], \"isHealthy\": [Function mockConstructor], \"on\": [Function mockConstructor], \"purgeQueue\": [Function mockConstructor], \"subscribe\": [Function mockConstructor]}}\u001b[39m\n    at Object.<anonymous> (/Users/ianlintner/Projects/React/backend/src/messageQueue/__tests__/queueService.test.ts:613:33)\n    at Promise.then.completed (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/run.js:121:9)\n    at _runTestsForDescribeBlock (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/ianlintner/Projects/React/backend/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/ianlintner/Projects/React/backend/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/ianlintner/Projects/React/backend/node_modules/jest-runner/build/runTest.js:444:34)"
          ],
          "fullName": "QueueService singleton functions getQueueService should return null if no instance exists",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 0,
          "retryReasons": [],
          "status": "failed",
          "title": "should return null if no instance exists"
        },
        {
          "ancestorTitles": ["QueueService singleton functions", "getQueueService"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QueueService singleton functions getQueueService should return existing instance if created",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return existing instance if created"
        }
      ],
      "endTime": 1755109082435,
      "message": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueueService › switchProvider › should switch from memory to redis provider\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32m\"🔄 Switching from memory to redis\"\u001b[39m\n    Received\n           1: \u001b[31m\"📨 Queue Service initialized with provider:\"\u001b[39m, \u001b[31m\"redis\"\u001b[39m\n           2: \u001b[31m\"📨 Queue handlers set up for all queues\"\u001b[39m\n           3: \u001b[31m\"🔄 Switching from redis to redis\"\u001b[39m\n\n    Number of calls: \u001b[31m5\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 563 |\u001b[39m       })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 564 |\u001b[39m       expect(newMockQueue\u001b[33m.\u001b[39mconnect)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 565 |\u001b[39m       expect(consoleSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'🔄 Switching from memory to redis'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 566 |\u001b[39m       expect(consoleSpy)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[32m'✅ Successfully switched to redis provider'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 567 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 568 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/messageQueue/__tests__/queueService.test.ts\u001b[39m\u001b[0m\u001b[2m:565:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mQueueService singleton functions › getQueueService › should return null if no instance exists\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeNull\u001b[2m()\u001b[22m\n\n    Received: \u001b[31m{\"io\": {\"emit\": [Function mockConstructor], \"to\": [Function mockConstructor]}, \"messageQueue\": {\"connect\": [Function mockConstructor], \"createMessage\": [Function mockConstructor], \"disconnect\": [Function mockConstructor], \"enqueue\": [Function mockConstructor], \"getProviderType\": [Function mockConstructor], \"getQueueSize\": [Function mockConstructor], \"getStats\": [Function mockConstructor], \"isHealthy\": [Function mockConstructor], \"on\": [Function mockConstructor], \"purgeQueue\": [Function mockConstructor], \"subscribe\": [Function mockConstructor]}}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 611 |\u001b[39m   describe(\u001b[32m'getQueueService'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 612 |\u001b[39m     it(\u001b[32m'should return null if no instance exists'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 613 |\u001b[39m       expect(getQueueService())\u001b[33m.\u001b[39mtoBeNull()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                 \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 614 |\u001b[39m     })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 615 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 616 |\u001b[39m     it(\u001b[32m'should return existing instance if created'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/messageQueue/__tests__/queueService.test.ts\u001b[39m\u001b[0m\u001b[2m:613:33)\u001b[22m\u001b[2m\u001b[22m\n",
      "name": "/Users/ianlintner/Projects/React/backend/src/messageQueue/__tests__/queueService.test.ts",
      "startTime": 1755109081304,
      "status": "failed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Complete Agent Processing Flow"],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Complete Agent Processing Flow should handle joke request end-to-end",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle joke request end-to-end"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Complete Agent Processing Flow"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Complete Agent Processing Flow should handle technical question end-to-end",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle technical question end-to-end"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Complete Agent Processing Flow"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Complete Agent Processing Flow should handle trivia request end-to-end",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle trivia request end-to-end"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Complete Agent Processing Flow"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Complete Agent Processing Flow should handle GIF request end-to-end",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle GIF request end-to-end"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Conversation Context Integration"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Conversation Context Integration should initialize and maintain conversation context",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize and maintain conversation context"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Conversation Context Integration"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Conversation Context Integration should handle agent handoffs properly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle agent handoffs properly"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Conversation Context Integration"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Conversation Context Integration should track conversation satisfaction and performance",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should track conversation satisfaction and performance"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "RAG Integration with Classification"],
          "duration": 5,
          "failureDetails": [
            {
              "matcherResult": {
                "actual": "general",
                "expected": "trivia",
                "message": "\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trivia\"\u001b[39m\nReceived: \u001b[31m\"general\"\u001b[39m",
                "name": "toBe",
                "pass": false
              }
            }
          ],
          "failureMessages": [
            "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"trivia\"\u001b[39m\nReceived: \u001b[31m\"general\"\u001b[39m\n    at Object.<anonymous> (/Users/ianlintner/Projects/React/backend/src/__tests__/integration/agentFlow.integration.test.ts:264:42)"
          ],
          "fullName": "Agent Flow Integration Tests RAG Integration with Classification should return relevant content based on classification",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "failed",
          "title": "should return relevant content based on classification"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "RAG Integration with Classification"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests RAG Integration with Classification should handle fallback when no specific content found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle fallback when no specific content found"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Error Handling Integration"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Error Handling Integration should gracefully handle invalid agent types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should gracefully handle invalid agent types"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Error Handling Integration"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Error Handling Integration should handle empty or invalid messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty or invalid messages"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Error Handling Integration"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Error Handling Integration should handle conversation management errors gracefully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle conversation management errors gracefully"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Goal-Seeking System Integration"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Goal-Seeking System Integration should process messages with goal-seeking system",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should process messages with goal-seeking system"
        },
        {
          "ancestorTitles": ["Agent Flow Integration Tests", "Goal-Seeking System Integration"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Flow Integration Tests Goal-Seeking System Integration should combine both systems properly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should combine both systems properly"
        }
      ],
      "endTime": 1755109082547,
      "message": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mAgent Flow Integration Tests › RAG Integration with Classification › should return relevant content based on classification\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"trivia\"\u001b[39m\n    Received: \u001b[31m\"general\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 262 |\u001b[39m         \u001b[90m// Classify message\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 263 |\u001b[39m         \u001b[36mconst\u001b[39m classification \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m classifyMessage(testCase\u001b[33m.\u001b[39mmessage)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 264 |\u001b[39m         expect(classification\u001b[33m.\u001b[39magentType)\u001b[33m.\u001b[39mtoBe(testCase\u001b[33m.\u001b[39mexpectedAgent)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 265 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 266 |\u001b[39m         \u001b[90m// Get RAG content\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 267 |\u001b[39m         \u001b[36mconst\u001b[39m ragContent \u001b[33m=\u001b[39m ragService\u001b[33m.\u001b[39msearchForAgent(\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/__tests__/integration/agentFlow.integration.test.ts\u001b[39m\u001b[0m\u001b[2m:264:42)\u001b[22m\u001b[2m\u001b[22m\n",
      "name": "/Users/ianlintner/Projects/React/backend/src/__tests__/integration/agentFlow.integration.test.ts",
      "startTime": 1755109082439,
      "status": "failed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Message Queue System", "Basic Queue Operations"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Basic Queue Operations should enqueue and dequeue messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should enqueue and dequeue messages"
        },
        {
          "ancestorTitles": ["Message Queue System", "Basic Queue Operations"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Basic Queue Operations should handle priority ordering",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle priority ordering"
        },
        {
          "ancestorTitles": ["Message Queue System", "Basic Queue Operations"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Basic Queue Operations should peek at messages without removing them",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should peek at messages without removing them"
        },
        {
          "ancestorTitles": ["Message Queue System", "Basic Queue Operations"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Basic Queue Operations should handle empty queue operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty queue operations"
        },
        {
          "ancestorTitles": ["Message Queue System", "Message Processing"],
          "duration": 104,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Message Processing should process messages with subscribers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should process messages with subscribers"
        },
        {
          "ancestorTitles": ["Message Queue System", "Message Processing"],
          "duration": 102,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Message Processing should handle multiple subscribers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle multiple subscribers"
        },
        {
          "ancestorTitles": ["Message Queue System", "Error Handling and Retries"],
          "duration": 5003,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Error Handling and Retries should retry failed messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should retry failed messages"
        },
        {
          "ancestorTitles": ["Message Queue System", "Error Handling and Retries"],
          "duration": 8004,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Error Handling and Retries should emit dead letter events for permanently failed messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should emit dead letter events for permanently failed messages"
        },
        {
          "ancestorTitles": ["Message Queue System", "Queue Management"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Queue Management should get queue statistics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should get queue statistics"
        },
        {
          "ancestorTitles": ["Message Queue System", "Queue Management"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Queue Management should purge queues",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should purge queues"
        },
        {
          "ancestorTitles": ["Message Queue System", "Queue Management"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Queue Management should delete queues",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete queues"
        },
        {
          "ancestorTitles": ["Message Queue System", "Health and Connection"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Health and Connection should report healthy when connected",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should report healthy when connected"
        },
        {
          "ancestorTitles": ["Message Queue System", "Health and Connection"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Health and Connection should report unhealthy when disconnected",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should report unhealthy when disconnected"
        },
        {
          "ancestorTitles": ["Message Queue System", "Delayed Messages"],
          "duration": 1502,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Delayed Messages should process delayed messages after delay",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should process delayed messages after delay"
        },
        {
          "ancestorTitles": ["Message Queue System", "Provider Configuration"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Provider Configuration should create memory provider by default",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should create memory provider by default"
        },
        {
          "ancestorTitles": ["Message Queue System", "Provider Configuration"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Provider Configuration should create memory provider explicitly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should create memory provider explicitly"
        },
        {
          "ancestorTitles": ["Message Queue System", "Provider Configuration"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Queue System Provider Configuration should respect environment configuration",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should respect environment configuration"
        },
        {
          "ancestorTitles": ["Message Creation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Creation should create messages with all properties",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 11,
          "retryReasons": [],
          "status": "passed",
          "title": "should create messages with all properties"
        },
        {
          "ancestorTitles": ["Message Creation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Creation should apply default values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should apply default values"
        }
      ],
      "endTime": 1755109097316,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/messageQueue/__tests__/messageQueue.test.ts",
      "startTime": 1755109082550,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Socket Handlers", "setupSocketHandlers"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers setupSocketHandlers should set up socket handlers and return helper functions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should set up socket handlers and return helper functions"
        },
        {
          "ancestorTitles": ["Socket Handlers", "setupSocketHandlers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers setupSocketHandlers should log OpenAI API key status",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should log OpenAI API key status"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Connection Handler"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Connection Handler should handle new socket connection",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle new socket connection"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Connection Handler"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Connection Handler should set up socket event handlers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "should set up socket event handlers"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Connection Handler"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Connection Handler should set up periodic timers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should set up periodic timers"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Connection Handler"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Connection Handler should properly clean up on disconnect",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should properly clean up on disconnect"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Join/Leave Conversation Handlers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Join/Leave Conversation Handlers should handle join_conversation event",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle join_conversation event"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Join/Leave Conversation Handlers"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Join/Leave Conversation Handlers should handle leave_conversation event",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle leave_conversation event"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Typing Handlers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Typing Handlers should handle typing_start event",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle typing_start event"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Typing Handlers"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Typing Handlers should handle typing_start event without userName",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle typing_start event without userName"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Typing Handlers"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Typing Handlers should handle typing_stop event",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle typing_stop event"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Message Read Handler"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Message Read Handler should handle message_read event",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle message_read event"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should handle empty message",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty message"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should handle conversation not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle conversation not found"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 68,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should create new conversation when no conversationId provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create new conversation when no conversationId provided"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 64,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should use existing conversation when conversationId provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should use existing conversation when conversationId provided"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 63,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should process message and emit streaming response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should process message and emit streaming response"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should handle agent service errors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle agent service errors"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 65,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should handle proactive actions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle proactive actions"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Stream Chat Handler"],
          "duration": 63,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Stream Chat Handler should track metrics during message processing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should track metrics during message processing"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Disconnect Handler"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Disconnect Handler should handle socket disconnection",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle socket disconnection"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Error Handler"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Error Handler should handle socket errors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle socket errors"
        },
        {
          "ancestorTitles": ["Socket Handlers", "Helper Functions"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Socket Handlers Helper Functions should provide emitToConversation helper",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should provide emitToConversation helper"
        }
      ],
      "endTime": 1755109097788,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/socket/__tests__/socketHandlers.test.ts",
      "startTime": 1755109097320,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/stats"],
          "duration": 24,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/stats should return validation statistics successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return validation statistics successfully"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/stats"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/stats should return 500 when responseValidator throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when responseValidator throws error"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/logs"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/logs should return paginated validation logs successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return paginated validation logs successfully"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/logs"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/logs should handle custom limit and offset parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle custom limit and offset parameters"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/logs"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/logs should return 500 when responseValidator throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when responseValidator throws error"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/logs/:agentType"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/logs/:agentType should return filtered validation logs by agent type",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return filtered validation logs by agent type"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/logs/:agentType"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/logs/:agentType should handle pagination for filtered logs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle pagination for filtered logs"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/logs/:agentType"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/logs/:agentType should return empty array for non-existent agent type",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array for non-existent agent type"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/logs/:agentType"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/logs/:agentType should return 500 when responseValidator throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when responseValidator throws error"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/failed"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/failed should return only failed validations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return only failed validations"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/failed"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/failed should handle pagination for failed validations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle pagination for failed validations"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/failed"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/failed should return empty array when no failed validations exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array when no failed validations exist"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/failed"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/failed should return 500 when responseValidator throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when responseValidator throws error"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/summary"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/summary should return validation summary by agent type",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return validation summary by agent type"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/summary"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/summary should handle empty logs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty logs"
        },
        {
          "ancestorTitles": ["Validation Routes", "GET /api/validation/summary"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes GET /api/validation/summary should return 500 when responseValidator throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when responseValidator throws error"
        },
        {
          "ancestorTitles": ["Validation Routes", "POST /api/validation/clear"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes POST /api/validation/clear should clear validation logs successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should clear validation logs successfully"
        },
        {
          "ancestorTitles": ["Validation Routes", "POST /api/validation/clear"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Validation Routes POST /api/validation/clear should return 500 when responseValidator throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when responseValidator throws error"
        }
      ],
      "endTime": 1755109098013,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/routes/__tests__/validation.test.ts",
      "startTime": 1755109097793,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Conversations Routes", "GET /api/conversations"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes GET /api/conversations should return all conversations with last message only",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all conversations with last message only"
        },
        {
          "ancestorTitles": ["Conversations Routes", "GET /api/conversations"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes GET /api/conversations should handle empty conversations list",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty conversations list"
        },
        {
          "ancestorTitles": ["Conversations Routes", "GET /api/conversations"],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes GET /api/conversations should return 500 when storage throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when storage throws error"
        },
        {
          "ancestorTitles": ["Conversations Routes", "GET /api/conversations/:id"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes GET /api/conversations/:id should return specific conversation with all messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return specific conversation with all messages"
        },
        {
          "ancestorTitles": ["Conversations Routes", "GET /api/conversations/:id"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes GET /api/conversations/:id should return 404 when conversation not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 404 when conversation not found"
        },
        {
          "ancestorTitles": ["Conversations Routes", "GET /api/conversations/:id"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes GET /api/conversations/:id should return 500 when storage throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when storage throws error"
        },
        {
          "ancestorTitles": ["Conversations Routes", "POST /api/conversations"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes POST /api/conversations should create new conversation with valid title",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should create new conversation with valid title"
        },
        {
          "ancestorTitles": ["Conversations Routes", "POST /api/conversations"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes POST /api/conversations should trim whitespace from title",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should trim whitespace from title"
        },
        {
          "ancestorTitles": ["Conversations Routes", "POST /api/conversations"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes POST /api/conversations should return 400 when title is empty",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when title is empty"
        },
        {
          "ancestorTitles": ["Conversations Routes", "POST /api/conversations"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes POST /api/conversations should return 400 when title is whitespace only",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when title is whitespace only"
        },
        {
          "ancestorTitles": ["Conversations Routes", "POST /api/conversations"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes POST /api/conversations should return 500 when storage throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when storage throws error"
        },
        {
          "ancestorTitles": ["Conversations Routes", "PUT /api/conversations/:id"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes PUT /api/conversations/:id should update conversation title",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should update conversation title"
        },
        {
          "ancestorTitles": ["Conversations Routes", "PUT /api/conversations/:id"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes PUT /api/conversations/:id should trim whitespace from updated title",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should trim whitespace from updated title"
        },
        {
          "ancestorTitles": ["Conversations Routes", "PUT /api/conversations/:id"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes PUT /api/conversations/:id should return 400 when title is empty",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when title is empty"
        },
        {
          "ancestorTitles": ["Conversations Routes", "PUT /api/conversations/:id"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes PUT /api/conversations/:id should return 404 when conversation not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 404 when conversation not found"
        },
        {
          "ancestorTitles": ["Conversations Routes", "PUT /api/conversations/:id"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes PUT /api/conversations/:id should return 500 when storage throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when storage throws error"
        },
        {
          "ancestorTitles": ["Conversations Routes", "DELETE /api/conversations/:id"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes DELETE /api/conversations/:id should delete conversation successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete conversation successfully"
        },
        {
          "ancestorTitles": ["Conversations Routes", "DELETE /api/conversations/:id"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes DELETE /api/conversations/:id should return 404 when conversation not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 404 when conversation not found"
        },
        {
          "ancestorTitles": ["Conversations Routes", "DELETE /api/conversations/:id"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Conversations Routes DELETE /api/conversations/:id should return 500 when storage throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when storage throws error"
        }
      ],
      "endTime": 1755109098172,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/routes/__tests__/conversations.test.ts",
      "startTime": 1755109098015,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should record a reaction successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should record a reaction successfully"
        },
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should return 400 when messageId is missing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when messageId is missing"
        },
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should return 400 when userId is missing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when userId is missing"
        },
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should return 400 when reactionType is missing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when reactionType is missing"
        },
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should return 400 when reactionType is invalid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when reactionType is invalid"
        },
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should accept all valid reaction types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "should accept all valid reaction types"
        },
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should handle optional fields correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle optional fields correctly"
        },
        {
          "ancestorTitles": ["Reactions Routes", "POST /api/reactions/record"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes POST /api/reactions/record should return 500 when jokeLearningSystem throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when jokeLearningSystem throws error"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/profile/:userId"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/profile/:userId should return user profile successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return user profile successfully"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/profile/:userId"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/profile/:userId should return 404 when user profile not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 404 when user profile not found"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/profile/:userId"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/profile/:userId should return 500 when jokeLearningSystem throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when jokeLearningSystem throws error"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/metrics"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/metrics should return learning metrics successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return learning metrics successfully"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/metrics"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/metrics should return 500 when jokeLearningSystem throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when jokeLearningSystem throws error"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/categories"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/categories should return joke categories successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return joke categories successfully"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/categories"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/categories should return 500 when jokeLearningSystem throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when jokeLearningSystem throws error"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/recommendation/:userId"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/recommendation/:userId should return personalized joke recommendation successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return personalized joke recommendation successfully"
        },
        {
          "ancestorTitles": ["Reactions Routes", "GET /api/reactions/recommendation/:userId"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Reactions Routes GET /api/reactions/recommendation/:userId should return 500 when jokeLearningSystem throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when jokeLearningSystem throws error"
        }
      ],
      "endTime": 1755109098289,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/routes/__tests__/reactions.test.ts",
      "startTime": 1755109098174,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should create a new conversation and process message",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new conversation and process message"
        },
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should use existing conversation when conversationId provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should use existing conversation when conversationId provided"
        },
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should handle forceAgent parameter",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle forceAgent parameter"
        },
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should return 400 when message is empty",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when message is empty"
        },
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should return 400 when message is whitespace only",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 400 when message is whitespace only"
        },
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should return 404 when conversationId not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 404 when conversationId not found"
        },
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should return 500 when agent service throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when agent service throws error"
        },
        {
          "ancestorTitles": ["Chat Routes", "POST /api/chat"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes POST /api/chat should generate proper conversation title",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should generate proper conversation title"
        },
        {
          "ancestorTitles": ["Chat Routes", "GET /api/chat/agents"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes GET /api/chat/agents should return available agents",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return available agents"
        },
        {
          "ancestorTitles": ["Chat Routes", "GET /api/chat/agents"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Chat Routes GET /api/chat/agents should return 500 when agent service throws error",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 500 when agent service throws error"
        }
      ],
      "endTime": 1755109098377,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/routes/__tests__/chat.test.ts",
      "startTime": 1755109098291,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AgentService", "constructor"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService constructor should create AgentService instance with dependencies",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should create AgentService instance with dependencies"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should process a simple message successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should process a simple message successfully"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should handle forced agent type",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle forced agent type"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should generate demo response when no API key",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should generate demo response when no API key"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should handle OpenAI API errors gracefully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle OpenAI API errors gracefully"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should handle conversation history correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle conversation history correctly"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should limit conversation history to last 10 messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should limit conversation history to last 10 messages"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should use adaptive prompt for joke agent with userId",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should use adaptive prompt for joke agent with userId"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should validate response when conversationId and userId provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should validate response when conversationId and userId provided"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should handle malformed OpenAI response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle malformed OpenAI response"
        },
        {
          "ancestorTitles": ["AgentService", "processMessage"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessage should handle classification failure gracefully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle classification failure gracefully"
        },
        {
          "ancestorTitles": ["AgentService", "getAvailableAgents"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService getAvailableAgents should return list of available agents",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 62,
          "retryReasons": [],
          "status": "passed",
          "title": "should return list of available agents"
        },
        {
          "ancestorTitles": ["AgentService", "getAvailableAgents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService getAvailableAgents should include all expected agent types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "should include all expected agent types"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithGoalSeeking"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithGoalSeeking should process message with goal-seeking integration",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should process message with goal-seeking integration"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithGoalSeeking"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithGoalSeeking should filter proactive actions to single action",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should filter proactive actions to single action"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithGoalSeeking"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithGoalSeeking should handle forced agent type",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle forced agent type"
        },
        {
          "ancestorTitles": ["AgentService", "executeProactiveAction"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService executeProactiveAction should execute proactive action successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should execute proactive action successfully"
        },
        {
          "ancestorTitles": ["AgentService", "executeProactiveAction"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService executeProactiveAction should throw error when agent is already active",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw error when agent is already active"
        },
        {
          "ancestorTitles": ["AgentService", "executeProactiveAction"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService executeProactiveAction should queue action when agent is active",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should queue action when agent is active"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithConversation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithConversation should initialize context for new user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize context for new user"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithConversation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithConversation should handle existing conversation context",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle existing conversation context"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithConversation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithConversation should handle handoff scenario",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle handoff scenario"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithConversation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithConversation should handle entertainment agent handoff directly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle entertainment agent handoff directly"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithBothSystems"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithBothSystems should combine conversation and goal-seeking systems",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should combine conversation and goal-seeking systems"
        },
        {
          "ancestorTitles": ["AgentService", "processMessageWithBothSystems"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService processMessageWithBothSystems should prioritize goal-seeking when agent is forced",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should prioritize goal-seeking when agent is forced"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should check if user agent is active",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should check if user agent is active"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should get active agent info",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should get active agent info"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should get user goal state",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should get user goal state"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should get user active goals",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should get user active goals"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should initialize user goals",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize user goals"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should cleanup inactive users",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should cleanup inactive users"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should get conversation context",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should get conversation context"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should force agent handoff",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should force agent handoff"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should get current agent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should get current agent"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should return general agent as default",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return general agent as default"
        },
        {
          "ancestorTitles": ["AgentService", "utility methods"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AgentService utility methods should initialize conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize conversation"
        }
      ],
      "endTime": 1755109098447,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/agents/__tests__/agentService.test.ts",
      "startTime": 1755109098380,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Agent Configuration", "AGENTS Configuration Object"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration AGENTS Configuration Object should contain all expected agent types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 32,
          "retryReasons": [],
          "status": "passed",
          "title": "should contain all expected agent types"
        },
        {
          "ancestorTitles": ["Agent Configuration", "AGENTS Configuration Object"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration AGENTS Configuration Object should have consistent structure for all agents",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 256,
          "retryReasons": [],
          "status": "passed",
          "title": "should have consistent structure for all agents"
        },
        {
          "ancestorTitles": ["Agent Configuration", "AGENTS Configuration Object"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration AGENTS Configuration Object should have non-empty required string fields",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 96,
          "retryReasons": [],
          "status": "passed",
          "title": "should have non-empty required string fields"
        },
        {
          "ancestorTitles": ["Agent Configuration", "AGENTS Configuration Object"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration AGENTS Configuration Object should have valid temperature values (0-2)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 32,
          "retryReasons": [],
          "status": "passed",
          "title": "should have valid temperature values (0-2)"
        },
        {
          "ancestorTitles": ["Agent Configuration", "AGENTS Configuration Object"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration AGENTS Configuration Object should have reasonable maxTokens values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 32,
          "retryReasons": [],
          "status": "passed",
          "title": "should have reasonable maxTokens values"
        },
        {
          "ancestorTitles": ["Agent Configuration", "AGENTS Configuration Object"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration AGENTS Configuration Object should have id matching the key in AGENTS object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 16,
          "retryReasons": [],
          "status": "passed",
          "title": "should have id matching the key in AGENTS object"
        },
        {
          "ancestorTitles": ["Agent Configuration", "AGENTS Configuration Object"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration AGENTS Configuration Object should have type matching the agent id",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 16,
          "retryReasons": [],
          "status": "passed",
          "title": "should have type matching the agent id"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "General Agent"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations General Agent should have proper routing and handoff instructions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should have proper routing and handoff instructions"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure joke agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure joke agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure trivia agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure trivia agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure gif agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure gif agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure story_teller agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure story_teller agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure riddle_master agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure riddle_master agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure quote_master agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure quote_master agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure game_host agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure game_host agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure music_guru agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure music_guru agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure youtube_guru agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure youtube_guru agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure dnd_master agent for immediate response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure dnd_master agent for immediate response"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure joke agent for adaptive learning",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure joke agent for adaptive learning"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure trivia agent for educational content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure trivia agent for educational content"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure gif agent with Giphy integration",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure gif agent with Giphy integration"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure D&D master with comprehensive RPG features",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure D&D master with comprehensive RPG features"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Entertainment Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Entertainment Agents should configure YouTube guru with embed functionality",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure YouTube guru with embed functionality"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure account_support agent with professional tone",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure account_support agent with professional tone"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure billing_support agent with professional tone",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure billing_support agent with professional tone"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure website_support agent with professional tone",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure website_support agent with professional tone"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure operator_support agent with professional tone",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure operator_support agent with professional tone"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure hold_agent agent with professional tone",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure hold_agent agent with professional tone"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure account support for authentication and security",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure account support for authentication and security"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure billing support for financial matters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure billing support for financial matters"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure website support for technical issues",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure website support for technical issues"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure operator support for routing and coordination",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure operator support for routing and coordination"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Individual Agent Configurations", "Support Agents"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Individual Agent Configurations Support Agents should configure hold agent for wait management",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should configure hold agent for wait management"
        },
        {
          "ancestorTitles": ["Agent Configuration", "getAgent function"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration getAgent function should return correct agent for valid agent types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 64,
          "retryReasons": [],
          "status": "passed",
          "title": "should return correct agent for valid agent types"
        },
        {
          "ancestorTitles": ["Agent Configuration", "getAgent function"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration getAgent function should throw error for unknown agent types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 20,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw error for unknown agent types"
        },
        {
          "ancestorTitles": ["Agent Configuration", "getAgent function"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration getAgent function should return immutable agent objects",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return immutable agent objects"
        },
        {
          "ancestorTitles": ["Agent Configuration", "getAgent function"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration getAgent function should handle edge cases gracefully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle edge cases gracefully"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Configuration Validation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Configuration Validation should use consistent model names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should use consistent model names"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Configuration Validation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Configuration Validation should have reasonable temperature distributions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "should have reasonable temperature distributions"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Configuration Validation"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Configuration Validation should have appropriate maxTokens for agent purposes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should have appropriate maxTokens for agent purposes"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Configuration Validation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Configuration Validation should have system prompts with minimum length requirements",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 32,
          "retryReasons": [],
          "status": "passed",
          "title": "should have system prompts with minimum length requirements"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Configuration Validation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Configuration Validation should have unique agent names",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should have unique agent names"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Configuration Validation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Configuration Validation should have unique agent descriptions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should have unique agent descriptions"
        },
        {
          "ancestorTitles": ["Agent Configuration", "System Prompt Quality"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration System Prompt Quality should contain role definitions in system prompts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 16,
          "retryReasons": [],
          "status": "passed",
          "title": "should contain role definitions in system prompts"
        },
        {
          "ancestorTitles": ["Agent Configuration", "System Prompt Quality"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration System Prompt Quality should have consistent formatting in system prompts",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 32,
          "retryReasons": [],
          "status": "passed",
          "title": "should have consistent formatting in system prompts"
        },
        {
          "ancestorTitles": ["Agent Configuration", "System Prompt Quality"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration System Prompt Quality should include behavioral instructions in entertainment agents",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 10,
          "retryReasons": [],
          "status": "passed",
          "title": "should include behavioral instructions in entertainment agents"
        },
        {
          "ancestorTitles": ["Agent Configuration", "System Prompt Quality"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration System Prompt Quality should include escalation instructions in support agents",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should include escalation instructions in support agents"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Type Safety"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Type Safety should have agent types matching TypeScript AgentType union",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 16,
          "retryReasons": [],
          "status": "passed",
          "title": "should have agent types matching TypeScript AgentType union"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Type Safety"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Type Safety should return proper Agent interface structure",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return proper Agent interface structure"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Performance"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Performance should retrieve agents quickly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should retrieve agents quickly"
        },
        {
          "ancestorTitles": ["Agent Configuration", "Performance"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Agent Configuration Performance should handle concurrent agent retrievals",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 51,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle concurrent agent retrievals"
        }
      ],
      "endTime": 1755109098516,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/agents/__tests__/config.test.ts",
      "startTime": 1755109098449,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Message Classifier",
            "Fallback Classification (No OpenAI)",
            "Website Support Classification"
          ],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Website Support Classification should classify programming-related messages as website_support",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 40,
          "retryReasons": [],
          "status": "passed",
          "title": "should classify programming-related messages as website_support"
        },
        {
          "ancestorTitles": [
            "Message Classifier",
            "Fallback Classification (No OpenAI)",
            "Website Support Classification"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Website Support Classification should give higher confidence for messages with more technical keywords",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should give higher confidence for messages with more technical keywords"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "GIF Classification"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) GIF Classification should classify GIF-related messages with highest priority",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 40,
          "retryReasons": [],
          "status": "passed",
          "title": "should classify GIF-related messages with highest priority"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "GIF Classification"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) GIF Classification should prioritize GIF over other classifications",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should prioritize GIF over other classifications"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Joke Classification"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Joke Classification should classify joke-related messages as joke",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 40,
          "retryReasons": [],
          "status": "passed",
          "title": "should classify joke-related messages as joke"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Joke Classification"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Joke Classification should be lower priority than GIF but higher than trivia",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should be lower priority than GIF but higher than trivia"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Trivia Classification"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Trivia Classification should classify trivia-related messages as trivia",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 40,
          "retryReasons": [],
          "status": "passed",
          "title": "should classify trivia-related messages as trivia"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "General Classification"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) General Classification should classify general messages as general",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 24,
          "retryReasons": [],
          "status": "passed",
          "title": "should classify general messages as general"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Priority System"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Priority System should prioritize classifications correctly: GIF > Joke > Trivia > Technical > General",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should prioritize classifications correctly: GIF > Joke > Trivia > Technical > General"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Edge Cases"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Edge Cases should handle empty messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty messages"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Edge Cases"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Edge Cases should handle whitespace-only messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle whitespace-only messages"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Edge Cases"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Edge Cases should handle very long messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle very long messages"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Edge Cases"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Edge Cases should handle messages with mixed case",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle messages with mixed case"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Edge Cases"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Edge Cases should handle messages with special characters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle messages with special characters"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Edge Cases"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Edge Cases should handle single character messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle single character messages"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Confidence Scoring"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Confidence Scoring should cap confidence at maximum values",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should cap confidence at maximum values"
        },
        {
          "ancestorTitles": ["Message Classifier", "Fallback Classification (No OpenAI)", "Confidence Scoring"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Fallback Classification (No OpenAI) Confidence Scoring should increase confidence with more relevant keywords",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should increase confidence with more relevant keywords"
        },
        {
          "ancestorTitles": ["Message Classifier", "OpenAI Integration"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier OpenAI Integration should use OpenAI classification when API key is available",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should use OpenAI classification when API key is available"
        },
        {
          "ancestorTitles": ["Message Classifier", "OpenAI Integration"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier OpenAI Integration should fall back to keyword matching when OpenAI API fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should fall back to keyword matching when OpenAI API fails"
        },
        {
          "ancestorTitles": ["Message Classifier", "OpenAI Integration"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier OpenAI Integration should fall back when OpenAI returns invalid JSON",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should fall back when OpenAI returns invalid JSON"
        },
        {
          "ancestorTitles": ["Message Classifier", "OpenAI Integration"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier OpenAI Integration should fall back when OpenAI returns empty response",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should fall back when OpenAI returns empty response"
        },
        {
          "ancestorTitles": ["Message Classifier", "OpenAI Integration"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier OpenAI Integration should handle OpenAI timeout errors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle OpenAI timeout errors"
        },
        {
          "ancestorTitles": ["Message Classifier", "Classification Consistency"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Classification Consistency should return consistent results for similar messages",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "should return consistent results for similar messages"
        },
        {
          "ancestorTitles": ["Message Classifier", "Classification Consistency"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Classification Consistency should handle variations in phrasing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle variations in phrasing"
        },
        {
          "ancestorTitles": ["Message Classifier", "Return Type Validation"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Return Type Validation should always return a valid MessageClassification object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 54,
          "retryReasons": [],
          "status": "passed",
          "title": "should always return a valid MessageClassification object"
        },
        {
          "ancestorTitles": ["Message Classifier", "Performance"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Performance should classify messages within reasonable time",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should classify messages within reasonable time"
        },
        {
          "ancestorTitles": ["Message Classifier", "Performance"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Message Classifier Performance should handle multiple concurrent classifications",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle multiple concurrent classifications"
        }
      ],
      "endTime": 1755109098572,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/agents/__tests__/classifier.test.ts",
      "startTime": 1755109098519,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should validate a good response successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should validate a good response successfully"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should detect empty or too short responses",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect empty or too short responses"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should detect repetitive content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect repetitive content"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should detect inappropriate language",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect inappropriate language"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should detect overly casual tone",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect overly casual tone"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should validate response length for different agent types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should validate response length for different agent types"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should detect technical accuracy issues",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect technical accuracy issues"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should detect coherence issues",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect coherence issues"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should detect logical contradictions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should detect logical contradictions"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should handle validation errors gracefully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle validation errors gracefully"
        },
        {
          "ancestorTitles": ["ResponseValidator", "validateResponse"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator validateResponse should create proper tracing spans",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should create proper tracing spans"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Metrics Calculation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Metrics Calculation should calculate basic metrics correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 6,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate basic metrics correctly"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Metrics Calculation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Metrics Calculation should handle empty responses in metrics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle empty responses in metrics"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Scoring System"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Scoring System should calculate higher scores for better responses",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate higher scores for better responses"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Scoring System"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Scoring System should penalize responses with high severity issues",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should penalize responses with high severity issues"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Validation Logging"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Validation Logging should log validation results",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should log validation results"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Validation Logging"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Validation Logging should maintain validation logs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should maintain validation logs"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Validation Logging"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Validation Logging should limit log size",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should limit log size"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Validation Statistics"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Validation Statistics should return empty stats when no validations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty stats when no validations"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Validation Statistics"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Validation Statistics should calculate validation statistics correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate validation statistics correctly"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Validation Statistics"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Validation Statistics should track issue breakdown correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should track issue breakdown correctly"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Helper Methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Helper Methods should count syllables correctly",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should count syllables correctly"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Helper Methods"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Helper Methods should calculate readability score",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate readability score"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Helper Methods"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Helper Methods should calculate technical accuracy score",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate technical accuracy score"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Helper Methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Helper Methods should calculate appropriateness score",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate appropriateness score"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Helper Methods"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Helper Methods should calculate coherence score",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should calculate coherence score"
        },
        {
          "ancestorTitles": ["ResponseValidator", "Clear Logs"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ResponseValidator Clear Logs should clear validation logs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should clear validation logs"
        }
      ],
      "endTime": 1755109098631,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/validation/__tests__/responseValidator.test.ts",
      "startTime": 1755109098577,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Prometheus Metrics", "Metrics Initialization"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Metrics Initialization should create all required metrics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 13,
          "retryReasons": [],
          "status": "passed",
          "title": "should create all required metrics"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "Metrics Initialization"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Metrics Initialization should have histogram metrics with observe method",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should have histogram metrics with observe method"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "Metrics Initialization"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Metrics Initialization should have counter metrics with inc method",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should have counter metrics with inc method"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "Metrics Initialization"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Metrics Initialization should have gauge metrics with set method",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should have gauge metrics with set method"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "HTTP Metrics Middleware"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics HTTP Metrics Middleware should call next middleware",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should call next middleware"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "HTTP Metrics Middleware"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics HTTP Metrics Middleware should register finish event listener",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should register finish event listener"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "HTTP Metrics Middleware"],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics HTTP Metrics Middleware should record metrics when response finishes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should record metrics when response finishes"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "HTTP Metrics Middleware"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics HTTP Metrics Middleware should handle requests without route",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle requests without route"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "HTTP Metrics Middleware"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics HTTP Metrics Middleware should handle requests without path",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle requests without path"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "HTTP Metrics Middleware"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics HTTP Metrics Middleware should handle different status codes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle different status codes"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "Registry and Exports"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Registry and Exports should export register",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should export register"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "Registry and Exports"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Registry and Exports should export metrics object",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should export metrics object"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "Registry and Exports"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Registry and Exports should export promClient as default",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should export promClient as default"
        },
        {
          "ancestorTitles": ["Prometheus Metrics", "Registry and Exports"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Prometheus Metrics Registry and Exports should be able to collect metrics",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be able to collect metrics"
        }
      ],
      "endTime": 1755109098667,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/metrics/__tests__/prometheus.test.ts",
      "startTime": 1755109098633,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Creation Functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Creation Functions should create conversation span with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create conversation span with correct parameters"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Creation Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Creation Functions should create goal-seeking span with user state",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create goal-seeking span with user state"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Creation Functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Creation Functions should create agent span with correct attributes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create agent span with correct attributes"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Creation Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Creation Functions should create validation span with correct attributes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create validation span with correct attributes"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Creation Functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Creation Functions should create agent span without optional parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create agent span without optional parameters"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Creation Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Creation Functions should create validation span without optional parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create validation span without optional parameters"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should end span safely when span exists",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should end span safely when span exists"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should end span without attributes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should end span without attributes"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should handle null span gracefully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle null span gracefully"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should set span status to OK for successful operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should set span status to OK for successful operations"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should set span status to ERROR for failed operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should set span status to ERROR for failed operations"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should use default error message when none provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should use default error message when none provided"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should handle null span in setSpanStatus",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle null span in setSpanStatus"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should add event to span with attributes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add event to span with attributes"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should add event to span without attributes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add event to span without attributes"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Span Utility Functions"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Span Utility Functions should handle null span in addSpanEvent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle null span in addSpanEvent"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Tracer Instance"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Tracer Instance should provide tracer instance",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should provide tracer instance"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Tracer Instance"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Tracer Instance should initialize tracing without errors",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize tracing without errors"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Edge Cases"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Edge Cases should handle goal-seeking span with null user state",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle goal-seeking span with null user state"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Edge Cases"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Edge Cases should handle goal-seeking span with undefined user state",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle goal-seeking span with undefined user state"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Edge Cases"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Edge Cases should handle very long conversation IDs",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle very long conversation IDs"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Edge Cases"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Edge Cases should handle special characters in agent types",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle special characters in agent types"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Context Manager Integration"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Context Manager Integration should call context manager methods for conversation spans",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should call context manager methods for conversation spans"
        },
        {
          "ancestorTitles": ["Tracer Integration Tests", "Context Manager Integration"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Integration Tests Context Manager Integration should call context manager methods for agent spans",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should call context manager methods for agent spans"
        }
      ],
      "endTime": 1755109098693,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/tracing/__tests__/tracer.integration.test.ts",
      "startTime": 1755109098669,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["MemoryStorage", "Singleton Pattern"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Singleton Pattern should return the same instance",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return the same instance"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "addConversation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management addConversation should add a new conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should add a new conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "addConversation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management addConversation should add multiple conversations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should add multiple conversations"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "getConversations"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management getConversations should return empty array when no conversations exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array when no conversations exist"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "getConversations"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management getConversations should return all conversations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all conversations"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "getConversation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management getConversation should return conversation by id",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return conversation by id"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "getConversation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management getConversation should return undefined for non-existent conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return undefined for non-existent conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "updateConversation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management updateConversation should update existing conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should update existing conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "updateConversation"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management updateConversation should return null for non-existent conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return null for non-existent conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "updateConversation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management updateConversation should partially update conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should partially update conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "deleteConversation"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management deleteConversation should delete existing conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete existing conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "deleteConversation"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management deleteConversation should return false for non-existent conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return false for non-existent conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Conversation Management", "deleteConversation"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Conversation Management deleteConversation should not affect other conversations when deleting one",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should not affect other conversations when deleting one"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Helper Methods", "getSortedConversations"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Helper Methods getSortedConversations should return conversations sorted by updatedAt (newest first)",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 4,
          "retryReasons": [],
          "status": "passed",
          "title": "should return conversations sorted by updatedAt (newest first)"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Helper Methods", "getSortedConversations"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Helper Methods getSortedConversations should return empty array when no conversations exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return empty array when no conversations exist"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Helper Methods", "getSortedConversations"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Helper Methods getSortedConversations should not modify original conversations array",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should not modify original conversations array"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Helper Methods", "getConversationWithLastMessage"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Helper Methods getConversationWithLastMessage should return conversation with only the last message",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 5,
          "retryReasons": [],
          "status": "passed",
          "title": "should return conversation with only the last message"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Helper Methods", "getConversationWithLastMessage"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Helper Methods getConversationWithLastMessage should return conversation with empty messages array if no messages exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return conversation with empty messages array if no messages exist"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Helper Methods", "getConversationWithLastMessage"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Helper Methods getConversationWithLastMessage should return null for non-existent conversation",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return null for non-existent conversation"
        },
        {
          "ancestorTitles": ["MemoryStorage", "Data Integrity"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "MemoryStorage Data Integrity should maintain data integrity across operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "should maintain data integrity across operations"
        }
      ],
      "endTime": 1755109098721,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/storage/__tests__/memoryStorage.test.ts",
      "startTime": 1755109098696,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["RAGService", "Content Database"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Database should initialize with predefined content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should initialize with predefined content"
        },
        {
          "ancestorTitles": ["RAGService", "Content Database"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Database should have quality-rated content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 60,
          "retryReasons": [],
          "status": "passed",
          "title": "should have quality-rated content"
        },
        {
          "ancestorTitles": ["RAGService", "Content Database"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Database should have proper content structure",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 35,
          "retryReasons": [],
          "status": "passed",
          "title": "should have proper content structure"
        },
        {
          "ancestorTitles": ["RAGService", "Search Functionality"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Search Functionality should find content matches",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should find content matches"
        },
        {
          "ancestorTitles": ["RAGService", "Search Functionality"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Search Functionality should respect search limits",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should respect search limits"
        },
        {
          "ancestorTitles": ["RAGService", "Agent-Specific Search"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Agent-Specific Search should return appropriate content for joke agent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return appropriate content for joke agent"
        },
        {
          "ancestorTitles": ["RAGService", "Agent-Specific Search"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Agent-Specific Search should return appropriate content for trivia agent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return appropriate content for trivia agent"
        },
        {
          "ancestorTitles": ["RAGService", "Agent-Specific Search"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Agent-Specific Search should return appropriate content for gif agent",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return appropriate content for gif agent"
        },
        {
          "ancestorTitles": ["RAGService", "Agent-Specific Search"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Agent-Specific Search should fallback to random content when no match found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should fallback to random content when no match found"
        },
        {
          "ancestorTitles": ["RAGService", "Agent-Specific Search"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Agent-Specific Search should return null when no fallback requested",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return null when no fallback requested"
        },
        {
          "ancestorTitles": ["RAGService", "Random Content Retrieval"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Random Content Retrieval should return random jokes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return random jokes"
        },
        {
          "ancestorTitles": ["RAGService", "Random Content Retrieval"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Random Content Retrieval should return random content by category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return random content by category"
        },
        {
          "ancestorTitles": ["RAGService", "Content Management"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Management should add new content successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add new content successfully"
        },
        {
          "ancestorTitles": ["RAGService", "Content Management"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Management should retrieve top-rated content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 7,
          "retryReasons": [],
          "status": "passed",
          "title": "should retrieve top-rated content"
        },
        {
          "ancestorTitles": ["RAGService", "Content Quality Assurance"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Quality Assurance should have family-friendly joke content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 20,
          "retryReasons": [],
          "status": "passed",
          "title": "should have family-friendly joke content"
        },
        {
          "ancestorTitles": ["RAGService", "Content Quality Assurance"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Quality Assurance should have educational trivia content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 20,
          "retryReasons": [],
          "status": "passed",
          "title": "should have educational trivia content"
        },
        {
          "ancestorTitles": ["RAGService", "Content Quality Assurance"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "RAGService Content Quality Assurance should have accessible GIF content",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 30,
          "retryReasons": [],
          "status": "passed",
          "title": "should have accessible GIF content"
        }
      ],
      "endTime": 1755109098747,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/agents/__tests__/ragService.test.ts",
      "startTime": 1755109098723,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["Tracer Utility Functions", "endSpan function"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions endSpan function should handle null spans without throwing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle null spans without throwing"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "endSpan function"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions endSpan function should call span.end() when given a valid span",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should call span.end() when given a valid span"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "endSpan function"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions endSpan function should set attributes and end span when attributes provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should set attributes and end span when attributes provided"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "setSpanStatus function"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions setSpanStatus function should handle null spans without throwing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle null spans without throwing"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "setSpanStatus function"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions setSpanStatus function should set OK status for successful operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should set OK status for successful operations"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "setSpanStatus function"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions setSpanStatus function should set ERROR status for failed operations",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should set ERROR status for failed operations"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "setSpanStatus function"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions setSpanStatus function should use default error message when none provided",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should use default error message when none provided"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "addSpanEvent function"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions addSpanEvent function should handle null spans without throwing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should handle null spans without throwing"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "addSpanEvent function"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions addSpanEvent function should add event with timestamp",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add event with timestamp"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "addSpanEvent function"],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions addSpanEvent function should add event with custom attributes",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should add event with custom attributes"
        },
        {
          "ancestorTitles": ["Tracer Utility Functions", "basic functionality"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Tracer Utility Functions basic functionality should export necessary functions",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should export necessary functions"
        }
      ],
      "endTime": 1755109098767,
      "message": "",
      "name": "/Users/ianlintner/Projects/React/backend/src/tracing/__tests__/tracer.test.ts",
      "startTime": 1755109098751,
      "status": "passed",
      "summary": ""
    }
  ],
  "wasInterrupted": false
}
